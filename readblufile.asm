		.686 
		.model flat, stdcall 
		option casemap:none 
		
		





; Include 文件定义 


 include shell32.inc
 includelib shell32.lib
 include kernel32.inc
 includelib kernel32.lib
  include ws2_32.inc
 includelib ws2_32.lib
 
include msvcrt.inc
;includelib msvcrt.lib

include libcurl.inc
includelib libcurl.lib


EXTRN  AES_set_decrypt_key:NEAR
EXTRN AES_decrypt:NEAR
EXTRN  AES_set_encrypt_key:NEAR
EXTRN AES_encrypt:NEAR
EXTRN  AES_cbc_encrypt:NEAR

EXTRN  c AskNetFileContent_xlsvr_title_save:NEAR
EXTRN  c AskNetFileContent_xlsvr_title_load:NEAR
EXTRN  c AskNetFileContent_xlsvr_volume_load:NEAR
EXTRN  c AskNetFileContent_xlsvr_volume_save:NEAR
EXTRN  c AskNetFileContent_xlsvr_cert_check:NEAR
EXTRN  c AskNetFileContent_xlsvr_cert_load:NEAR
EXTRN  c AskNetFileContent_xlsvr_cert_sign:NEAR
EXTRN  c AskNetFileContent_xlsvr_cache_fail:NEAR

;EXTRN  c ___report_gsfailure:NEAR

EXTRN  c BN_bin2bn:NEAR
EXTRN  c BN_CTX_new:NEAR
EXTRN  c EC_GROUP_new:NEAR
EXTRN  c BN_new:NEAR
EXTRN  c BN_bn2bin:NEAR
EXTRN  c EC_KEY_new:NEAR
EXTRN  c EVP_EncryptFinal:NEAR
EXTRN  c EVP_md5:NEAR
EXTRN  c ECDSA_do_verify:NEAR
EXTRN  c EC_GROUP_free:NEAR
EXTRN  c ECDSA_do_sign:NEAR
EXTRN  c EVP_bf_ecb:NEAR
EXTRN  c ECDSA_SIG_new:NEAR
EXTRN  c EVP_sha1:NEAR
EXTRN  c EC_KEY_set_private_key:NEAR
EXTRN  c EC_GROUP_set_generator:NEAR
;EXTRN  c ecdsa_check:NEAR
EXTRN  c EVP_EncryptUpdate:NEAR
EXTRN  c BN_set_word:NEAR
EXTRN  c ECDSA_SIG_free:NEAR
EXTRN  c EVP_CIPHER_block_size:NEAR
EXTRN  c EVP_EncryptInit:NEAR
EXTRN  c EVP_DigestUpdate:NEAR
EXTRN  c EC_POINT_set_affine_coordinates_GFp:NEAR
EXTRN  c EVP_CIPHER_key_length:NEAR
EXTRN  c EC_POINT_new:NEAR
EXTRN  c EC_POINT_set_affine_coordinates_GF2m:NEAR
EXTRN  c EC_POINT_free:NEAR
EXTRN  c EC_KEY_set_public_key:NEAR
EXTRN  c EC_POINT_point2bn:NEAR
;EXTRN  c bf_encrypt:NEAR
EXTRN  c EVP_CIPHER_iv_length:NEAR
EXTRN  c CRYPTO_free:NEAR
EXTRN  c EC_POINT_mul:NEAR
EXTRN  c BN_free:NEAR
EXTRN  c CRYPTO_malloc:NEAR
EXTRN  c ERR_get_state:NEAR
EXTRN  c EC_GROUP_new_curve_GFp:NEAR
EXTRN  c EC_GROUP_dup:NEAR
EXTRN  c CRYPTO_add_lock:NEAR
EXTRN  c EVP_MD_CTX_init:NEAR
EXTRN  c EVP_DigestFinal_ex:NEAR
EXTRN  c EVP_ecdsa:NEAR
EXTRN  c OPENSSL_cleanse:NEAR
EXTRN  c BN_dup:NEAR
EXTRN  c EVP_DigestInit:NEAR
EXTRN  c BN_CTX_free:NEAR
EXTRN  c EC_KEY_free:NEAR
;EXTRN  c EC_EX_DATA_free_all_data:NEAR
EXTRN  c BN_dec2bn:NEAR
EXTRN  c ERR_put_error:NEAR
EXTRN  c BN_clear_free:NEAR
EXTRN  c BN_copy:NEAR
EXTRN  c EC_KEY_set_group:NEAR

unicode         macro name,string,zero
name label byte
                irpc c,<string>
                db '&c', 0
                endm

                ifnb <zero>
				   dw zero
                endif
endm
    	.data
;----------------------------------
Te0             dd 0C66363A5h,0F87C7C84h,0EE777799h,0F67B7B8Dh,0FFF2F20Dh
                                        ; DATA XREF: AES__ExpandKey+8F?
                                        ; AES__ExpandKey+A2? ...
                dd 0D66B6BBDh,0DE6F6FB1h,91C5C554h,60303050h,2010103h
                dd 0CE6767A9h,562B2B7Dh,0E7FEFE19h,0B5D7D762h,4DABABE6h
                dd 0EC76769Ah,8FCACA45h,1F82829Dh,89C9C940h,0FA7D7D87h
                dd 0EFFAFA15h,0B25959EBh,8E4747C9h,0FBF0F00Bh,41ADADECh
                dd 0B3D4D467h,5FA2A2FDh,45AFAFEAh,239C9CBFh,53A4A4F7h
                dd 0E4727296h,9BC0C05Bh,75B7B7C2h,0E1FDFD1Ch,3D9393AEh
                dd 4C26266Ah,6C36365Ah,7E3F3F41h,0F5F7F702h,83CCCC4Fh
                dd 6834345Ch,51A5A5F4h,0D1E5E534h,0F9F1F108h,0E2717193h
                dd 0ABD8D873h,62313153h,2A15153Fh,804040Ch,95C7C752h,46232365h
                dd 9DC3C35Eh,30181828h,379696A1h,0A05050Fh,2F9A9AB5h,0E070709h
                dd 24121236h,1B80809Bh,0DFE2E23Dh,0CDEBEB26h,4E272769h
                dd 7FB2B2CDh,0EA75759Fh,1209091Bh,1D83839Eh,582C2C74h
                dd 341A1A2Eh,361B1B2Dh,0DC6E6EB2h,0B45A5AEEh,5BA0A0FBh
                dd 0A45252F6h,763B3B4Dh,0B7D6D661h,7DB3B3CEh,5229297Bh
                dd 0DDE3E33Eh,5E2F2F71h,13848497h,0A65353F5h,0B9D1D168h
                dd 0,0C1EDED2Ch,40202060h,0E3FCFC1Fh,79B1B1C8h,0B65B5BEDh
                dd 0D46A6ABEh,8DCBCB46h,67BEBED9h,7239394Bh,944A4ADEh
                dd 984C4CD4h,0B05858E8h,85CFCF4Ah,0BBD0D06Bh,0C5EFEF2Ah
                dd 4FAAAAE5h,0EDFBFB16h,864343C5h,9A4D4DD7h,66333355h
                dd 11858594h,8A4545CFh,0E9F9F910h,4020206h,0FE7F7F81h
                dd 0A05050F0h,783C3C44h,259F9FBAh,4BA8A8E3h,0A25151F3h
                dd 5DA3A3FEh,804040C0h,58F8F8Ah,3F9292ADh,219D9DBCh,70383848h
                dd 0F1F5F504h,63BCBCDFh,77B6B6C1h,0AFDADA75h,42212163h
                dd 20101030h,0E5FFFF1Ah,0FDF3F30Eh,0BFD2D26Dh,81CDCD4Ch
                dd 180C0C14h,26131335h,0C3ECEC2Fh,0BE5F5FE1h,359797A2h
                dd 884444CCh,2E171739h,93C4C457h,55A7A7F2h,0FC7E7E82h
                dd 7A3D3D47h,0C86464ACh,0BA5D5DE7h,3219192Bh,0E6737395h
                dd 0C06060A0h,19818198h,9E4F4FD1h,0A3DCDC7Fh,44222266h
                dd 542A2A7Eh,3B9090ABh,0B888883h,8C4646CAh,0C7EEEE29h
                dd 6BB8B8D3h,2814143Ch,0A7DEDE79h,0BC5E5EE2h,160B0B1Dh
                dd 0ADDBDB76h,0DBE0E03Bh,64323256h,743A3A4Eh,140A0A1Eh
                dd 924949DBh,0C06060Ah,4824246Ch,0B85C5CE4h,9FC2C25Dh
                dd 0BDD3D36Eh,43ACACEFh,0C46262A6h,399191A8h,319595A4h
                dd 0D3E4E437h,0F279798Bh,0D5E7E732h,8BC8C843h,6E373759h
                dd 0DA6D6DB7h,18D8D8Ch,0B1D5D564h,9C4E4ED2h,49A9A9E0h
                dd 0D86C6CB4h,0AC5656FAh,0F3F4F407h,0CFEAEA25h,0CA6565AFh
                dd 0F47A7A8Eh,47AEAEE9h,10080818h,6FBABAD5h,0F0787888h
                dd 4A25256Fh,5C2E2E72h,381C1C24h,57A6A6F1h,73B4B4C7h,97C6C651h
                dd 0CBE8E823h,0A1DDDD7Ch,0E874749Ch,3E1F1F21h,964B4BDDh
                dd 61BDBDDCh,0D8B8B86h,0F8A8A85h,0E0707090h,7C3E3E42h
                dd 71B5B5C4h,0CC6666AAh,904848D8h,6030305h,0F7F6F601h
                dd 1C0E0E12h,0C26161A3h,6A35355Fh,0AE5757F9h,69B9B9D0h
                dd 17868691h,99C1C158h,3A1D1D27h,279E9EB9h,0D9E1E138h
                dd 0EBF8F813h,2B9898B3h,22111133h,0D26969BBh,0A9D9D970h
                dd 78E8E89h,339494A7h,2D9B9BB6h,3C1E1E22h,15878792h,0C9E9E920h
                dd 87CECE49h,0AA5555FFh,50282878h,0A5DFDF7Ah,38C8C8Fh
                dd 59A1A1F8h,9898980h,1A0D0D17h,65BFBFDAh,0D7E6E631h,844242C6h
                dd 0D06868B8h,824141C3h,299999B0h,5A2D2D77h,1E0F0F11h
                dd 7BB0B0CBh,0A85454FCh,6DBBBBD6h,2C16163Ah
Te1             dd 0A5C66363h,84F87C7Ch,99EE7777h,8DF67B7Bh,0DFFF2F2h
                                        ; DATA XREF: AES__InvertKey+6F?
                                        ; AES__InvertKey+CD? ...
                dd 0BDD66B6Bh,0B1DE6F6Fh,5491C5C5h,50603030h,3020101h
                dd 0A9CE6767h,7D562B2Bh,19E7FEFEh,62B5D7D7h,0E64DABABh
                dd 9AEC7676h,458FCACAh,9D1F8282h,4089C9C9h,87FA7D7Dh,15EFFAFAh
                dd 0EBB25959h,0C98E4747h,0BFBF0F0h,0EC41ADADh,67B3D4D4h
                dd 0FD5FA2A2h,0EA45AFAFh,0BF239C9Ch,0F753A4A4h,96E47272h
                dd 5B9BC0C0h,0C275B7B7h,1CE1FDFDh,0AE3D9393h,6A4C2626h
                dd 5A6C3636h,417E3F3Fh,2F5F7F7h,4F83CCCCh,5C683434h,0F451A5A5h
                dd 34D1E5E5h,8F9F1F1h,93E27171h,73ABD8D8h,53623131h,3F2A1515h
                dd 0C080404h,5295C7C7h,65462323h,5E9DC3C3h,28301818h,0A1379696h
                dd 0F0A0505h,0B52F9A9Ah,90E0707h,36241212h,9B1B8080h,3DDFE2E2h
                dd 26CDEBEBh,694E2727h,0CD7FB2B2h,9FEA7575h,1B120909h
                dd 9E1D8383h,74582C2Ch,2E341A1Ah,2D361B1Bh,0B2DC6E6Eh
                dd 0EEB45A5Ah,0FB5BA0A0h,0F6A45252h,4D763B3Bh,61B7D6D6h
                dd 0CE7DB3B3h,7B522929h,3EDDE3E3h,715E2F2Fh,97138484h
                dd 0F5A65353h,68B9D1D1h,0,2CC1EDEDh,60402020h,1FE3FCFCh
                dd 0C879B1B1h,0EDB65B5Bh,0BED46A6Ah,468DCBCBh,0D967BEBEh
                dd 4B723939h,0DE944A4Ah,0D4984C4Ch,0E8B05858h,4A85CFCFh
                dd 6BBBD0D0h,2AC5EFEFh,0E54FAAAAh,16EDFBFBh,0C5864343h
                dd 0D79A4D4Dh,55663333h,94118585h,0CF8A4545h,10E9F9F9h
                dd 6040202h,81FE7F7Fh,0F0A05050h,44783C3Ch,0BA259F9Fh
                dd 0E34BA8A8h,0F3A25151h,0FE5DA3A3h,0C0804040h,8A058F8Fh
                dd 0AD3F9292h,0BC219D9Dh,48703838h,4F1F5F5h,0DF63BCBCh
                dd 0C177B6B6h,75AFDADAh,63422121h,30201010h,1AE5FFFFh
                dd 0EFDF3F3h,6DBFD2D2h,4C81CDCDh,14180C0Ch,35261313h,2FC3ECECh
                dd 0E1BE5F5Fh,0A2359797h,0CC884444h,392E1717h,5793C4C4h
                dd 0F255A7A7h,82FC7E7Eh,477A3D3Dh,0ACC86464h,0E7BA5D5Dh
                dd 2B321919h,95E67373h,0A0C06060h,98198181h,0D19E4F4Fh
                dd 7FA3DCDCh,66442222h,7E542A2Ah,0AB3B9090h,830B8888h
                dd 0CA8C4646h,29C7EEEEh,0D36BB8B8h,3C281414h,79A7DEDEh
                dd 0E2BC5E5Eh,1D160B0Bh,76ADDBDBh,3BDBE0E0h,56643232h
                dd 4E743A3Ah,1E140A0Ah,0DB924949h,0A0C0606h,6C482424h
                dd 0E4B85C5Ch,5D9FC2C2h,6EBDD3D3h,0EF43ACACh,0A6C46262h
                dd 0A8399191h,0A4319595h,37D3E4E4h,8BF27979h,32D5E7E7h
                dd 438BC8C8h,596E3737h,0B7DA6D6Dh,8C018D8Dh,64B1D5D5h
                dd 0D29C4E4Eh,0E049A9A9h,0B4D86C6Ch,0FAAC5656h,7F3F4F4h
                dd 25CFEAEAh,0AFCA6565h,8EF47A7Ah,0E947AEAEh,18100808h
                dd 0D56FBABAh,88F07878h,6F4A2525h,725C2E2Eh,24381C1Ch
                dd 0F157A6A6h,0C773B4B4h,5197C6C6h,23CBE8E8h,7CA1DDDDh
                dd 9CE87474h,213E1F1Fh,0DD964B4Bh,0DC61BDBDh,860D8B8Bh
                dd 850F8A8Ah,90E07070h,427C3E3Eh,0C471B5B5h,0AACC6666h
                dd 0D8904848h,5060303h,1F7F6F6h,121C0E0Eh,0A3C26161h,5F6A3535h
                dd 0F9AE5757h,0D069B9B9h,91178686h,5899C1C1h,273A1D1Dh
                dd 0B9279E9Eh,38D9E1E1h,13EBF8F8h,0B32B9898h,33221111h
                dd 0BBD26969h,70A9D9D9h,89078E8Eh,0A7339494h,0B62D9B9Bh
                dd 223C1E1Eh,92158787h,20C9E9E9h,4987CECEh,0FFAA5555h
                dd 78502828h,7AA5DFDFh,8F038C8Ch,0F859A1A1h,80098989h
                dd 171A0D0Dh,0DA65BFBFh,31D7E6E6h,0C6844242h,0B8D06868h
                dd 0C3824141h,0B0299999h,775A2D2Dh,111E0F0Fh,0CB7BB0B0h
                dd 0FCA85454h,0D66DBBBBh,3A2C1616h
Te2             dd 63A5C663h,7C84F87Ch,7799EE77h,7B8DF67Bh,0F20DFFF2h
                                        ; DATA XREF: AES__InvertKey+87?
                                        ; AES__InvertKey+F2? ...
                dd 6BBDD66Bh,6FB1DE6Fh,0C55491C5h,30506030h,1030201h,67A9CE67h
                dd 2B7D562Bh,0FE19E7FEh,0D762B5D7h,0ABE64DABh,769AEC76h
                dd 0CA458FCAh,829D1F82h,0C94089C9h,7D87FA7Dh,0FA15EFFAh
                dd 59EBB259h,47C98E47h,0F00BFBF0h,0ADEC41ADh,0D467B3D4h
                dd 0A2FD5FA2h,0AFEA45AFh,9CBF239Ch,0A4F753A4h,7296E472h
                dd 0C05B9BC0h,0B7C275B7h,0FD1CE1FDh,93AE3D93h,266A4C26h
                dd 365A6C36h,3F417E3Fh,0F702F5F7h,0CC4F83CCh,345C6834h
                dd 0A5F451A5h,0E534D1E5h,0F108F9F1h,7193E271h,0D873ABD8h
                dd 31536231h,153F2A15h,40C0804h,0C75295C7h,23654623h,0C35E9DC3h
                dd 18283018h,96A13796h,50F0A05h,9AB52F9Ah,7090E07h,12362412h
                dd 809B1B80h,0E23DDFE2h,0EB26CDEBh,27694E27h,0B2CD7FB2h
                dd 759FEA75h,91B1209h,839E1D83h,2C74582Ch,1A2E341Ah,1B2D361Bh
                dd 6EB2DC6Eh,5AEEB45Ah,0A0FB5BA0h,52F6A452h,3B4D763Bh
                dd 0D661B7D6h,0B3CE7DB3h,297B5229h,0E33EDDE3h,2F715E2Fh
                dd 84971384h,53F5A653h,0D168B9D1h,0,0ED2CC1EDh,20604020h
                dd 0FC1FE3FCh,0B1C879B1h,5BEDB65Bh,6ABED46Ah,0CB468DCBh
                dd 0BED967BEh,394B7239h,4ADE944Ah,4CD4984Ch,58E8B058h
                dd 0CF4A85CFh,0D06BBBD0h,0EF2AC5EFh,0AAE54FAAh,0FB16EDFBh
                dd 43C58643h,4DD79A4Dh,33556633h,85941185h,45CF8A45h,0F910E9F9h
                dd 2060402h,7F81FE7Fh,50F0A050h,3C44783Ch,9FBA259Fh,0A8E34BA8h
                dd 51F3A251h,0A3FE5DA3h,40C08040h,8F8A058Fh,92AD3F92h
                dd 9DBC219Dh,38487038h,0F504F1F5h,0BCDF63BCh,0B6C177B6h
                dd 0DA75AFDAh,21634221h,10302010h,0FF1AE5FFh,0F30EFDF3h
                dd 0D26DBFD2h,0CD4C81CDh,0C14180Ch,13352613h,0EC2FC3ECh
                dd 5FE1BE5Fh,97A23597h,44CC8844h,17392E17h,0C45793C4h
                dd 0A7F255A7h,7E82FC7Eh,3D477A3Dh,64ACC864h,5DE7BA5Dh
                dd 192B3219h,7395E673h,60A0C060h,81981981h,4FD19E4Fh,0DC7FA3DCh
                dd 22664422h,2A7E542Ah,90AB3B90h,88830B88h,46CA8C46h,0EE29C7EEh
                dd 0B8D36BB8h,143C2814h,0DE79A7DEh,5EE2BC5Eh,0B1D160Bh
                dd 0DB76ADDBh,0E03BDBE0h,32566432h,3A4E743Ah,0A1E140Ah
                dd 49DB9249h,60A0C06h,246C4824h,5CE4B85Ch,0C25D9FC2h,0D36EBDD3h
                dd 0ACEF43ACh,62A6C462h,91A83991h,95A43195h,0E437D3E4h
                dd 798BF279h,0E732D5E7h,0C8438BC8h,37596E37h,6DB7DA6Dh
                dd 8D8C018Dh,0D564B1D5h,4ED29C4Eh,0A9E049A9h,6CB4D86Ch
                dd 56FAAC56h,0F407F3F4h,0EA25CFEAh,65AFCA65h,7A8EF47Ah
                dd 0AEE947AEh,8181008h,0BAD56FBAh,7888F078h,256F4A25h
                dd 2E725C2Eh,1C24381Ch,0A6F157A6h,0B4C773B4h,0C65197C6h
                dd 0E823CBE8h,0DD7CA1DDh,749CE874h,1F213E1Fh,4BDD964Bh
                dd 0BDDC61BDh,8B860D8Bh,8A850F8Ah,7090E070h,3E427C3Eh
                dd 0B5C471B5h,66AACC66h,48D89048h,3050603h,0F601F7F6h
                dd 0E121C0Eh,61A3C261h,355F6A35h,57F9AE57h,0B9D069B9h
                dd 86911786h,0C15899C1h,1D273A1Dh,9EB9279Eh,0E138D9E1h
                dd 0F813EBF8h,98B32B98h,11332211h,69BBD269h,0D970A9D9h
                dd 8E89078Eh,94A73394h,9BB62D9Bh,1E223C1Eh,87921587h,0E920C9E9h
                dd 0CE4987CEh,55FFAA55h,28785028h,0DF7AA5DFh,8C8F038Ch
                dd 0A1F859A1h,89800989h,0D171A0Dh,0BFDA65BFh,0E631D7E6h
                dd 42C68442h,68B8D068h,41C38241h,99B02999h,2D775A2Dh,0F111E0Fh
                dd 0B0CB7BB0h,54FCA854h,0BBD66DBBh,163A2C16h
Te3             dd 6363A5C6h,7C7C84F8h,777799EEh,7B7B8DF6h,0F2F20DFFh
                                        ; DATA XREF: AES__InvertKey+56?
                                        ; AES__InvertKey+DA? ...
                dd 6B6BBDD6h,6F6FB1DEh,0C5C55491h,30305060h,1010302h,6767A9CEh
                dd 2B2B7D56h,0FEFE19E7h,0D7D762B5h,0ABABE64Dh,76769AECh
                dd 0CACA458Fh,82829D1Fh,0C9C94089h,7D7D87FAh,0FAFA15EFh
                dd 5959EBB2h,4747C98Eh,0F0F00BFBh,0ADADEC41h,0D4D467B3h
                dd 0A2A2FD5Fh,0AFAFEA45h,9C9CBF23h,0A4A4F753h,727296E4h
                dd 0C0C05B9Bh,0B7B7C275h,0FDFD1CE1h,9393AE3Dh,26266A4Ch
                dd 36365A6Ch,3F3F417Eh,0F7F702F5h,0CCCC4F83h,34345C68h
                dd 0A5A5F451h,0E5E534D1h,0F1F108F9h,717193E2h,0D8D873ABh
                dd 31315362h,15153F2Ah,4040C08h,0C7C75295h,23236546h,0C3C35E9Dh
                dd 18182830h,9696A137h,5050F0Ah,9A9AB52Fh,707090Eh,12123624h
                dd 80809B1Bh,0E2E23DDFh,0EBEB26CDh,2727694Eh,0B2B2CD7Fh
                dd 75759FEAh,9091B12h,83839E1Dh,2C2C7458h,1A1A2E34h,1B1B2D36h
                dd 6E6EB2DCh,5A5AEEB4h,0A0A0FB5Bh,5252F6A4h,3B3B4D76h
                dd 0D6D661B7h,0B3B3CE7Dh,29297B52h,0E3E33EDDh,2F2F715Eh
                dd 84849713h,5353F5A6h,0D1D168B9h,0,0EDED2CC1h,20206040h
                dd 0FCFC1FE3h,0B1B1C879h,5B5BEDB6h,6A6ABED4h,0CBCB468Dh
                dd 0BEBED967h,39394B72h,4A4ADE94h,4C4CD498h,5858E8B0h
                dd 0CFCF4A85h,0D0D06BBBh,0EFEF2AC5h,0AAAAE54Fh,0FBFB16EDh
                dd 4343C586h,4D4DD79Ah,33335566h,85859411h,4545CF8Ah,0F9F910E9h
                dd 2020604h,7F7F81FEh,5050F0A0h,3C3C4478h,9F9FBA25h,0A8A8E34Bh
                dd 5151F3A2h,0A3A3FE5Dh,4040C080h,8F8F8A05h,9292AD3Fh
                dd 9D9DBC21h,38384870h,0F5F504F1h,0BCBCDF63h,0B6B6C177h
                dd 0DADA75AFh,21216342h,10103020h,0FFFF1AE5h,0F3F30EFDh
                dd 0D2D26DBFh,0CDCD4C81h,0C0C1418h,13133526h,0ECEC2FC3h
                dd 5F5FE1BEh,9797A235h,4444CC88h,1717392Eh,0C4C45793h
                dd 0A7A7F255h,7E7E82FCh,3D3D477Ah,6464ACC8h,5D5DE7BAh
                dd 19192B32h,737395E6h,6060A0C0h,81819819h,4F4FD19Eh,0DCDC7FA3h
                dd 22226644h,2A2A7E54h,9090AB3Bh,8888830Bh,4646CA8Ch,0EEEE29C7h
                dd 0B8B8D36Bh,14143C28h,0DEDE79A7h,5E5EE2BCh,0B0B1D16h
                dd 0DBDB76ADh,0E0E03BDBh,32325664h,3A3A4E74h,0A0A1E14h
                dd 4949DB92h,6060A0Ch,24246C48h,5C5CE4B8h,0C2C25D9Fh,0D3D36EBDh
                dd 0ACACEF43h,6262A6C4h,9191A839h,9595A431h,0E4E437D3h
                dd 79798BF2h,0E7E732D5h,0C8C8438Bh,3737596Eh,6D6DB7DAh
                dd 8D8D8C01h,0D5D564B1h,4E4ED29Ch,0A9A9E049h,6C6CB4D8h
                dd 5656FAACh,0F4F407F3h,0EAEA25CFh,6565AFCAh,7A7A8EF4h
                dd 0AEAEE947h,8081810h,0BABAD56Fh,787888F0h,25256F4Ah
                dd 2E2E725Ch,1C1C2438h,0A6A6F157h,0B4B4C773h,0C6C65197h
                dd 0E8E823CBh,0DDDD7CA1h,74749CE8h,1F1F213Eh,4B4BDD96h
                dd 0BDBDDC61h,8B8B860Dh,8A8A850Fh,707090E0h,3E3E427Ch
                dd 0B5B5C471h,6666AACCh,4848D890h,3030506h,0F6F601F7h
                dd 0E0E121Ch,6161A3C2h,35355F6Ah,5757F9AEh,0B9B9D069h
                dd 86869117h,0C1C15899h,1D1D273Ah,9E9EB927h,0E1E138D9h
                dd 0F8F813EBh,9898B32Bh,11113322h,6969BBD2h,0D9D970A9h
                dd 8E8E8907h,9494A733h,9B9BB62Dh,1E1E223Ch,87879215h,0E9E920C9h
                dd 0CECE4987h,5555FFAAh,28287850h,0DFDF7AA5h,8C8C8F03h
                dd 0A1A1F859h,89898009h,0D0D171Ah,0BFBFDA65h,0E6E631D7h
                dd 4242C684h,6868B8D0h,4141C382h,9999B029h,2D2D775Ah,0F0F111Eh
                dd 0B0B0CB7Bh,5454FCA8h,0BBBBD66Dh,16163A2Ch
; _BYTE Te4[1024]
Te4             dd 63636363h,7C7C7C7Ch,77777777h,7B7B7B7Bh,0F2F2F2F2h
                                        ; DATA XREF: AES__ExpandKey+8Fr
                                        ; AES__ExpandKey+A2r ...
                dd 6B6B6B6Bh,6F6F6F6Fh,0C5C5C5C5h,30303030h,1010101h,67676767h
                dd 2B2B2B2Bh,0FEFEFEFEh,0D7D7D7D7h,0ABABABABh,76767676h
                dd 0CACACACAh,82828282h,0C9C9C9C9h,7D7D7D7Dh,0FAFAFAFAh
                dd 59595959h,47474747h,0F0F0F0F0h,0ADADADADh,0D4D4D4D4h
                dd 0A2A2A2A2h,0AFAFAFAFh,9C9C9C9Ch,0A4A4A4A4h,72727272h
                dd 0C0C0C0C0h,0B7B7B7B7h,0FDFDFDFDh,93939393h,26262626h
                dd 36363636h,3F3F3F3Fh,0F7F7F7F7h,0CCCCCCCCh,34343434h
                dd 0A5A5A5A5h,0E5E5E5E5h,0F1F1F1F1h,71717171h,0D8D8D8D8h
                dd 31313131h,15151515h,4040404h,0C7C7C7C7h,23232323h,0C3C3C3C3h
                dd 18181818h,96969696h,5050505h,9A9A9A9Ah,7070707h,12121212h
                dd 80808080h,0E2E2E2E2h,0EBEBEBEBh,27272727h,0B2B2B2B2h
                dd 75757575h,9090909h,83838383h,2C2C2C2Ch,1A1A1A1Ah,1B1B1B1Bh
                dd 6E6E6E6Eh,5A5A5A5Ah,0A0A0A0A0h,52525252h,3B3B3B3Bh
                dd 0D6D6D6D6h,0B3B3B3B3h,29292929h,0E3E3E3E3h,2F2F2F2Fh
                dd 84848484h,53535353h,0D1D1D1D1h,0,0EDEDEDEDh,20202020h
                dd 0FCFCFCFCh,0B1B1B1B1h,5B5B5B5Bh,6A6A6A6Ah,0CBCBCBCBh
                dd 0BEBEBEBEh,39393939h,4A4A4A4Ah,4C4C4C4Ch,58585858h
                dd 0CFCFCFCFh,0D0D0D0D0h,0EFEFEFEFh,0AAAAAAAAh,0FBFBFBFBh
                dd 43434343h,4D4D4D4Dh,33333333h,85858585h,45454545h,0F9F9F9F9h
                dd 2020202h,7F7F7F7Fh,50505050h,3C3C3C3Ch,9F9F9F9Fh,0A8A8A8A8h
                dd 51515151h,0A3A3A3A3h,40404040h,8F8F8F8Fh,92929292h
                dd 9D9D9D9Dh,38383838h,0F5F5F5F5h,0BCBCBCBCh,0B6B6B6B6h
                dd 0DADADADAh,21212121h,10101010h,0FFFFFFFFh,0F3F3F3F3h
                dd 0D2D2D2D2h,0CDCDCDCDh,0C0C0C0Ch,13131313h,0ECECECECh
                dd 5F5F5F5Fh,97979797h,44444444h,17171717h,0C4C4C4C4h
                dd 0A7A7A7A7h,7E7E7E7Eh,3D3D3D3Dh,64646464h,5D5D5D5Dh
                dd 19191919h,73737373h,60606060h,81818181h,4F4F4F4Fh,0DCDCDCDCh
                dd 22222222h,2A2A2A2Ah,90909090h,88888888h,46464646h,0EEEEEEEEh
                dd 0B8B8B8B8h,14141414h,0DEDEDEDEh,5E5E5E5Eh,0B0B0B0Bh
                dd 0DBDBDBDBh,0E0E0E0E0h,32323232h,3A3A3A3Ah,0A0A0A0Ah
                dd 49494949h,6060606h,24242424h,5C5C5C5Ch,0C2C2C2C2h,0D3D3D3D3h
                dd 0ACACACACh,62626262h,91919191h,95959595h,0E4E4E4E4h
                dd 79797979h,0E7E7E7E7h,0C8C8C8C8h,37373737h,6D6D6D6Dh
                dd 8D8D8D8Dh,0D5D5D5D5h,4E4E4E4Eh,0A9A9A9A9h,6C6C6C6Ch
                dd 56565656h,0F4F4F4F4h,0EAEAEAEAh,65656565h,7A7A7A7Ah
                dd 0AEAEAEAEh,8080808h,0BABABABAh,78787878h,25252525h
                dd 2E2E2E2Eh,1C1C1C1Ch,0A6A6A6A6h,0B4B4B4B4h,0C6C6C6C6h
                dd 0E8E8E8E8h,0DDDDDDDDh,74747474h,1F1F1F1Fh,4B4B4B4Bh
                dd 0BDBDBDBDh,8B8B8B8Bh,8A8A8A8Ah,70707070h,3E3E3E3Eh
                dd 0B5B5B5B5h,66666666h,48484848h,3030303h,0F6F6F6F6h
                dd 0E0E0E0Eh,61616161h,35353535h,57575757h,0B9B9B9B9h
                dd 86868686h,0C1C1C1C1h,1D1D1D1Dh,9E9E9E9Eh,0E1E1E1E1h
                dd 0F8F8F8F8h,98989898h,11111111h,69696969h,0D9D9D9D9h
                dd 8E8E8E8Eh,94949494h,9B9B9B9Bh,1E1E1E1Eh,87878787h,0E9E9E9E9h
                dd 0CECECECEh,55555555h,28282828h,0DFDFDFDFh,8C8C8C8Ch
                dd 0A1A1A1A1h,89898989h,0D0D0D0Dh,0BFBFBFBFh,0E6E6E6E6h
                dd 42424242h,68686868h,41414141h,99999999h,2D2D2D2Dh,0F0F0F0Fh
                dd 0B0B0B0B0h,54545454h,0BBBBBBBBh,16161616h
; int Td0[]
Td0             dd 51F4A750h,7E416553h,1A17A4C3h,3A275E96h,3BAB6BCBh,1F9D45F1h
                                        ; DATA XREF: AES__InvertKey+6Fr
                                        ; AES__InvertKey+CDr ...
                dd 0ACFA58ABh,4BE30393h,2030FA55h,0AD766DF6h,88CC7691h
                dd 0F5024C25h,4FE5D7FCh,0C52ACBD7h,26354480h,0B562A38Fh
                dd 0DEB15A49h,25BA1B67h,45EA0E98h,5DFEC0E1h,0C32F7502h
                dd 814CF012h,8D4697A3h,6BD3F9C6h,38F5FE7h,15929C95h,0BF6D7AEBh
                dd 955259DAh,0D4BE832Dh,587421D3h,49E06929h,8EC9C844h
                dd 75C2896Ah,0F48E7978h,99583E6Bh,27B971DDh,0BEE14FB6h
                dd 0F088AD17h,0C920AC66h,7DCE3AB4h,63DF4A18h,0E51A3182h
                dd 97513360h,62537F45h,0B16477E0h,0BB6BAE84h,0FE81A01Ch
                dd 0F9082B94h,70486858h,8F45FD19h,94DE6C87h,527BF8B7h
                dd 0AB73D323h,724B02E2h,0E31F8F57h,6655AB2Ah,0B2EB2807h
                dd 2FB5C203h,86C57B9Ah,0D33708A5h,302887F2h,23BFA5B2h
                dd 2036ABAh,0ED16825Ch,8ACF1C2Bh,0A779B492h,0F307F2F0h
                dd 4E69E2A1h,65DAF4CDh,605BED5h,0D134621Fh,0C4A6FE8Ah
                dd 342E539Dh,0A2F355A0h,58AE132h,0A4F6EB75h,0B83EC39h
                dd 4060EFAAh,5E719F06h,0BD6E1051h,3E218AF9h,96DD063Dh
                dd 0DD3E05AEh,4DE6BD46h,91548DB5h,71C45D05h,406D46Fh,605015FFh
                dd 1998FB24h,0D6BDE997h,894043CCh,67D99E77h,0B0E842BDh
                dd 7898B88h,0E7195B38h,79C8EEDBh,0A17C0A47h,7C420FE9h
                dd 0F8841EC9h,0,9808683h,322BED48h,1E1170ACh,6C5A724Eh
                dd 0FD0EFFFBh,0F853856h,3DAED51Eh,362D3927h,0A0FD964h
                dd 685CA621h,9B5B54D1h,24362E3Ah,0C0A67B1h,9357E70Fh,0B4EE96D2h
                dd 1B9B919Eh,80C0C54Fh,61DC20A2h,5A774B69h,1C121A16h,0E293BA0Ah
                dd 0C0A02AE5h,3C22E043h,121B171Dh,0E090D0Bh,0F28BC7ADh
                dd 2DB6A8B9h,141EA9C8h,57F11985h,0AF75074Ch,0EE99DDBBh
                dd 0A37F60FDh,0F701269Fh,5C72F5BCh,44663BC5h,5BFB7E34h
                dd 8B432976h,0CB23C6DCh,0B6EDFC68h,0B8E4F163h,0D731DCCAh
                dd 42638510h,13972240h,84C61120h,854A247Dh,0D2BB3DF8h
                dd 0AEF93211h,0C729A16Dh,1D9E2F4Bh,0DCB230F3h,0D8652ECh
                dd 77C1E3D0h,2BB3166Ch,0A970B999h,119448FAh,47E96422h
                dd 0A8FC8CC4h,0A0F03F1Ah,567D2CD8h,223390EFh,87494EC7h
                dd 0D938D1C1h,8CCAA2FEh,98D40B36h,0A6F581CFh,0A57ADE28h
                dd 0DAB78E26h,3FADBFA4h,2C3A9DE4h,5078920Dh,6A5FCC9Bh
                dd 547E4662h,0F68D13C2h,90D8B8E8h,2E39F75Eh,82C3AFF5h
                dd 9F5D80BEh,69D0937Ch,6FD52DA9h,0CF2512B3h,0C8AC993Bh
                dd 10187DA7h,0E89C636Eh,0DB3BBB7Bh,0CD267809h,6E5918F4h
                dd 0EC9AB701h,834F9AA8h,0E6956E65h,0AAFFE67Eh,21BCCF08h
                dd 0EF15E8E6h,0BAE79BD9h,4A6F36CEh,0EA9F09D4h,29B07CD6h
                dd 31A4B2AFh,2A3F2331h,0C6A59430h,35A266C0h,744EBC37h
                dd 0FC82CAA6h,0E090D0B0h,33A7D815h,0F104984Ah,41ECDAF7h
                dd 7FCD500Eh,1791F62Fh,764DD68Dh,43EFB04Dh,0CCAA4D54h
                dd 0E49604DFh,9ED1B5E3h,4C6A881Bh,0C12C1FB8h,4665517Fh
                dd 9D5EEA04h,18C355Dh,0FA877473h,0FB0B412Eh,0B3671D5Ah
                dd 92DBD252h,0E9105633h,6DD64713h,9AD7618Ch,37A10C7Ah
                dd 59F8148Eh,0EB133C89h,0CEA927EEh,0B761C935h,0E11CE5EDh
                dd 7A47B13Ch,9CD2DF59h,55F2733Fh,1814CE79h,73C737BFh,53F7CDEAh
                dd 5FFDAA5Bh,0DF3D6F14h,7844DB86h,0CAAFF381h,0B968C43Eh
                dd 3824342Ch,0C2A3405Fh,161DC372h,0BCE2250Ch,283C498Bh
                dd 0FF0D9541h,39A80171h,80CB3DEh,0D8B4E49Ch,6456C190h
                dd 7BCB8461h,0D532B670h,486C5C74h,0D0B85742h
; int Td1[]
Td1             dd 5051F4A7h,537E4165h,0C31A17A4h,963A275Eh,0CB3BAB6Bh
                                        ; DATA XREF: AES__ExpandKey+152?
                                        ; AES__ExpandKey+2AA? ...
                dd 0F11F9D45h,0ABACFA58h,934BE303h,552030FAh,0F6AD766Dh
                dd 9188CC76h,25F5024Ch,0FC4FE5D7h,0D7C52ACBh,80263544h
                dd 8FB562A3h,49DEB15Ah,6725BA1Bh,9845EA0Eh,0E15DFEC0h
                dd 2C32F75h,12814CF0h,0A38D4697h,0C66BD3F9h,0E7038F5Fh
                dd 9515929Ch,0EBBF6D7Ah,0DA955259h,2DD4BE83h,0D3587421h
                dd 2949E069h,448EC9C8h,6A75C289h,78F48E79h,6B99583Eh,0DD27B971h
                dd 0B6BEE14Fh,17F088ADh,66C920ACh,0B47DCE3Ah,1863DF4Ah
                dd 82E51A31h,60975133h,4562537Fh,0E0B16477h,84BB6BAEh
                dd 1CFE81A0h,94F9082Bh,58704868h,198F45FDh,8794DE6Ch,0B7527BF8h
                dd 23AB73D3h,0E2724B02h,57E31F8Fh,2A6655ABh,7B2EB28h,32FB5C2h
                dd 9A86C57Bh,0A5D33708h,0F2302887h,0B223BFA5h,0BA02036Ah
                dd 5CED1682h,2B8ACF1Ch,92A779B4h,0F0F307F2h,0A14E69E2h
                dd 0CD65DAF4h,0D50605BEh,1FD13462h,8AC4A6FEh,9D342E53h
                dd 0A0A2F355h,32058AE1h,75A4F6EBh,390B83ECh,0AA4060EFh
                dd 65E719Fh,51BD6E10h,0F93E218Ah,3D96DD06h,0AEDD3E05h
                dd 464DE6BDh,0B591548Dh,571C45Dh,6F0406D4h,0FF605015h
                dd 241998FBh,97D6BDE9h,0CC894043h,7767D99Eh,0BDB0E842h
                dd 8807898Bh,38E7195Bh,0DB79C8EEh,47A17C0Ah,0E97C420Fh
                dd 0C9F8841Eh,0,83098086h,48322BEDh,0AC1E1170h,4E6C5A72h
                dd 0FBFD0EFFh,560F8538h,1E3DAED5h,27362D39h,640A0FD9h
                dd 21685CA6h,0D19B5B54h,3A24362Eh,0B10C0A67h,0F9357E7h
                dd 0D2B4EE96h,9E1B9B91h,4F80C0C5h,0A261DC20h,695A774Bh
                dd 161C121Ah,0AE293BAh,0E5C0A02Ah,433C22E0h,1D121B17h
                dd 0B0E090Dh,0ADF28BC7h,0B92DB6A8h,0C8141EA9h,8557F119h
                dd 4CAF7507h,0BBEE99DDh,0FDA37F60h,9FF70126h,0BC5C72F5h
                dd 0C544663Bh,345BFB7Eh,768B4329h,0DCCB23C6h,68B6EDFCh
                dd 63B8E4F1h,0CAD731DCh,10426385h,40139722h,2084C611h
                dd 7D854A24h,0F8D2BB3Dh,11AEF932h,6DC729A1h,4B1D9E2Fh
                dd 0F3DCB230h,0EC0D8652h,0D077C1E3h,6C2BB316h,99A970B9h
                dd 0FA119448h,2247E964h,0C4A8FC8Ch,1AA0F03Fh,0D8567D2Ch
                dd 0EF223390h,0C787494Eh,0C1D938D1h,0FE8CCAA2h,3698D40Bh
                dd 0CFA6F581h,28A57ADEh,26DAB78Eh,0A43FADBFh,0E42C3A9Dh
                dd 0D507892h,9B6A5FCCh,62547E46h,0C2F68D13h,0E890D8B8h
                dd 5E2E39F7h,0F582C3AFh,0BE9F5D80h,7C69D093h,0A96FD52Dh
                dd 0B3CF2512h,3BC8AC99h,0A710187Dh,6EE89C63h,7BDB3BBBh
                dd 9CD2678h,0F46E5918h,1EC9AB7h,0A8834F9Ah,65E6956Eh,7EAAFFE6h
                dd 821BCCFh,0E6EF15E8h,0D9BAE79Bh,0CE4A6F36h,0D4EA9F09h
                dd 0D629B07Ch,0AF31A4B2h,312A3F23h,30C6A594h,0C035A266h
                dd 37744EBCh,0A6FC82CAh,0B0E090D0h,1533A7D8h,4AF10498h
                dd 0F741ECDAh,0E7FCD50h,2F1791F6h,8D764DD6h,4D43EFB0h
                dd 54CCAA4Dh,0DFE49604h,0E39ED1B5h,1B4C6A88h,0B8C12C1Fh
                dd 7F466551h,49D5EEAh,5D018C35h,73FA8774h,2EFB0B41h,5AB3671Dh
                dd 5292DBD2h,33E91056h,136DD647h,8C9AD761h,7A37A10Ch,8E59F814h
                dd 89EB133Ch,0EECEA927h,35B761C9h,0EDE11CE5h,3C7A47B1h
                dd 599CD2DFh,3F55F273h,791814CEh,0BF73C737h,0EA53F7CDh
                dd 5B5FFDAAh,14DF3D6Fh,867844DBh,81CAAFF3h,3EB968C4h,2C382434h
                dd 5FC2A340h,72161DC3h,0CBCE225h,8B283C49h,41FF0D95h,7139A801h
                dd 0DE080CB3h,9CD8B4E4h,906456C1h,617BCB84h,70D532B6h
                dd 74486C5Ch,42D0B857h
; int Td2[]
Td2             dd 0A75051F4h,65537E41h,0A4C31A17h,5E963A27h,6BCB3BABh
                                        ; DATA XREF: AES__InvertKey+56r
                                        ; AES__InvertKey+DAr ...
                dd 45F11F9Dh,58ABACFAh,3934BE3h,0FA552030h,6DF6AD76h,769188CCh
                dd 4C25F502h,0D7FC4FE5h,0CBD7C52Ah,44802635h,0A38FB562h
                dd 5A49DEB1h,1B6725BAh,0E9845EAh,0C0E15DFEh,7502C32Fh
                dd 0F012814Ch,97A38D46h,0F9C66BD3h,5FE7038Fh,9C951592h
                dd 7AEBBF6Dh,59DA9552h,832DD4BEh,21D35874h,692949E0h,0C8448EC9h
                dd 896A75C2h,7978F48Eh,3E6B9958h,71DD27B9h,4FB6BEE1h,0AD17F088h
                dd 0AC66C920h,3AB47DCEh,4A1863DFh,3182E51Ah,33609751h
                dd 7F456253h,77E0B164h,0AE84BB6Bh,0A01CFE81h,2B94F908h
                dd 68587048h,0FD198F45h,6C8794DEh,0F8B7527Bh,0D323AB73h
                dd 2E2724Bh,8F57E31Fh,0AB2A6655h,2807B2EBh,0C2032FB5h
                dd 7B9A86C5h,8A5D337h,87F23028h,0A5B223BFh,6ABA0203h,825CED16h
                dd 1C2B8ACFh,0B492A779h,0F2F0F307h,0E2A14E69h,0F4CD65DAh
                dd 0BED50605h,621FD134h,0FE8AC4A6h,539D342Eh,55A0A2F3h
                dd 0E132058Ah,0EB75A4F6h,0EC390B83h,0EFAA4060h,9F065E71h
                dd 1051BD6Eh,8AF93E21h,63D96DDh,5AEDD3Eh,0BD464DE6h,8DB59154h
                dd 5D0571C4h,0D46F0406h,15FF6050h,0FB241998h,0E997D6BDh
                dd 43CC8940h,9E7767D9h,42BDB0E8h,8B880789h,5B38E719h,0EEDB79C8h
                dd 0A47A17Ch,0FE97C42h,1EC9F884h,0,86830980h,0ED48322Bh
                dd 70AC1E11h,724E6C5Ah,0FFFBFD0Eh,38560F85h,0D51E3DAEh
                dd 3927362Dh,0D9640A0Fh,0A621685Ch,54D19B5Bh,2E3A2436h
                dd 67B10C0Ah,0E70F9357h,96D2B4EEh,919E1B9Bh,0C54F80C0h
                dd 20A261DCh,4B695A77h,1A161C12h,0BA0AE293h,2AE5C0A0h
                dd 0E0433C22h,171D121Bh,0D0B0E09h,0C7ADF28Bh,0A8B92DB6h
                dd 0A9C8141Eh,198557F1h,74CAF75h,0DDBBEE99h,60FDA37Fh
                dd 269FF701h,0F5BC5C72h,3BC54466h,7E345BFBh,29768B43h
                dd 0C6DCCB23h,0FC68B6EDh,0F163B8E4h,0DCCAD731h,85104263h
                dd 22401397h,112084C6h,247D854Ah,3DF8D2BBh,3211AEF9h,0A16DC729h
                dd 2F4B1D9Eh,30F3DCB2h,52EC0D86h,0E3D077C1h,166C2BB3h
                dd 0B999A970h,48FA1194h,642247E9h,8CC4A8FCh,3F1AA0F0h
                dd 2CD8567Dh,90EF2233h,4EC78749h,0D1C1D938h,0A2FE8CCAh
                dd 0B3698D4h,81CFA6F5h,0DE28A57Ah,8E26DAB7h,0BFA43FADh
                dd 9DE42C3Ah,920D5078h,0CC9B6A5Fh,4662547Eh,13C2F68Dh
                dd 0B8E890D8h,0F75E2E39h,0AFF582C3h,80BE9F5Dh,937C69D0h
                dd 2DA96FD5h,12B3CF25h,993BC8ACh,7DA71018h,636EE89Ch,0BB7BDB3Bh
                dd 7809CD26h,18F46E59h,0B701EC9Ah,9AA8834Fh,6E65E695h
                dd 0E67EAAFFh,0CF0821BCh,0E8E6EF15h,9BD9BAE7h,36CE4A6Fh
                dd 9D4EA9Fh,7CD629B0h,0B2AF31A4h,23312A3Fh,9430C6A5h,66C035A2h
                dd 0BC37744Eh,0CAA6FC82h,0D0B0E090h,0D81533A7h,984AF104h
                dd 0DAF741ECh,500E7FCDh,0F62F1791h,0D68D764Dh,0B04D43EFh
                dd 4D54CCAAh,4DFE496h,0B5E39ED1h,881B4C6Ah,1FB8C12Ch,517F4665h
                dd 0EA049D5Eh,355D018Ch,7473FA87h,412EFB0Bh,1D5AB367h
                dd 0D25292DBh,5633E910h,47136DD6h,618C9AD7h,0C7A37A1h
                dd 148E59F8h,3C89EB13h,27EECEA9h,0C935B761h,0E5EDE11Ch
                dd 0B13C7A47h,0DF599CD2h,733F55F2h,0CE791814h,37BF73C7h
                dd 0CDEA53F7h,0AA5B5FFDh,6F14DF3Dh,0DB867844h,0F381CAAFh
                dd 0C43EB968h,342C3824h,405FC2A3h,0C372161Dh,250CBCE2h
                dd 498B283Ch,9541FF0Dh,17139A8h,0B3DE080Ch,0E49CD8B4h
                dd 0C1906456h,84617BCBh,0B670D532h,5C74486Ch,5742D0B8h
; int Td3[]
Td3             dd 0F4A75051h,4165537Eh,17A4C31Ah,275E963Ah,0AB6BCB3Bh
                                        ; DATA XREF: AES__InvertKey+A1r
                                        ; AES__InvertKey+10Cr ...
                dd 9D45F11Fh,0FA58ABACh,0E303934Bh,30FA5520h,766DF6ADh
                dd 0CC769188h,24C25F5h,0E5D7FC4Fh,2ACBD7C5h,35448026h
                dd 62A38FB5h,0B15A49DEh,0BA1B6725h,0EA0E9845h,0FEC0E15Dh
                dd 2F7502C3h,4CF01281h,4697A38Dh,0D3F9C66Bh,8F5FE703h
                dd 929C9515h,6D7AEBBFh,5259DA95h,0BE832DD4h,7421D358h
                dd 0E0692949h,0C9C8448Eh,0C2896A75h,8E7978F4h,583E6B99h
                dd 0B971DD27h,0E14FB6BEh,88AD17F0h,20AC66C9h,0CE3AB47Dh
                dd 0DF4A1863h,1A3182E5h,51336097h,537F4562h,6477E0B1h
                dd 6BAE84BBh,81A01CFEh,82B94F9h,48685870h,45FD198Fh,0DE6C8794h
                dd 7BF8B752h,73D323ABh,4B02E272h,1F8F57E3h,55AB2A66h,0EB2807B2h
                dd 0B5C2032Fh,0C57B9A86h,3708A5D3h,2887F230h,0BFA5B223h
                dd 36ABA02h,16825CEDh,0CF1C2B8Ah,79B492A7h,7F2F0F3h,69E2A14Eh
                dd 0DAF4CD65h,5BED506h,34621FD1h,0A6FE8AC4h,2E539D34h
                dd 0F355A0A2h,8AE13205h,0F6EB75A4h,83EC390Bh,60EFAA40h
                dd 719F065Eh,6E1051BDh,218AF93Eh,0DD063D96h,3E05AEDDh
                dd 0E6BD464Dh,548DB591h,0C45D0571h,6D46F04h,5015FF60h
                dd 98FB2419h,0BDE997D6h,4043CC89h,0D99E7767h,0E842BDB0h
                dd 898B8807h,195B38E7h,0C8EEDB79h,7C0A47A1h,420FE97Ch
                dd 841EC9F8h,0,80868309h,2BED4832h,1170AC1Eh,5A724E6Ch
                dd 0EFFFBFDh,8538560Fh,0AED51E3Dh,2D392736h,0FD9640Ah
                dd 5CA62168h,5B54D19Bh,362E3A24h,0A67B10Ch,57E70F93h,0EE96D2B4h
                dd 9B919E1Bh,0C0C54F80h,0DC20A261h,774B695Ah,121A161Ch
                dd 93BA0AE2h,0A02AE5C0h,22E0433Ch,1B171D12h,90D0B0Eh,8BC7ADF2h
                dd 0B6A8B92Dh,1EA9C814h,0F1198557h,75074CAFh,99DDBBEEh
                dd 7F60FDA3h,1269FF7h,72F5BC5Ch,663BC544h,0FB7E345Bh,4329768Bh
                dd 23C6DCCBh,0EDFC68B6h,0E4F163B8h,31DCCAD7h,63851042h
                dd 97224013h,0C6112084h,4A247D85h,0BB3DF8D2h,0F93211AEh
                dd 29A16DC7h,9E2F4B1Dh,0B230F3DCh,8652EC0Dh,0C1E3D077h
                dd 0B3166C2Bh,70B999A9h,9448FA11h,0E9642247h,0FC8CC4A8h
                dd 0F03F1AA0h,7D2CD856h,3390EF22h,494EC787h,38D1C1D9h
                dd 0CAA2FE8Ch,0D40B3698h,0F581CFA6h,7ADE28A5h,0B78E26DAh
                dd 0ADBFA43Fh,3A9DE42Ch,78920D50h,5FCC9B6Ah,7E466254h
                dd 8D13C2F6h,0D8B8E890h,39F75E2Eh,0C3AFF582h,5D80BE9Fh
                dd 0D0937C69h,0D52DA96Fh,2512B3CFh,0AC993BC8h,187DA710h
                dd 9C636EE8h,3BBB7BDBh,267809CDh,5918F46Eh,9AB701ECh,4F9AA883h
                dd 956E65E6h,0FFE67EAAh,0BCCF0821h,15E8E6EFh,0E79BD9BAh
                dd 6F36CE4Ah,9F09D4EAh,0B07CD629h,0A4B2AF31h,3F23312Ah
                dd 0A59430C6h,0A266C035h,4EBC3774h,82CAA6FCh,90D0B0E0h
                dd 0A7D81533h,4984AF1h,0ECDAF741h,0CD500E7Fh,91F62F17h
                dd 4DD68D76h,0EFB04D43h,0AA4D54CCh,9604DFE4h,0D1B5E39Eh
                dd 6A881B4Ch,2C1FB8C1h,65517F46h,5EEA049Dh,8C355D01h,877473FAh
                dd 0B412EFBh,671D5AB3h,0DBD25292h,105633E9h,0D647136Dh
                dd 0D7618C9Ah,0A10C7A37h,0F8148E59h,133C89EBh,0A927EECEh
                dd 61C935B7h,1CE5EDE1h,47B13C7Ah,0D2DF599Ch,0F2733F55h
                dd 14CE7918h,0C737BF73h,0F7CDEA53h,0FDAA5B5Fh,3D6F14DFh
                dd 44DB8678h,0AFF381CAh,68C43EB9h,24342C38h,0A3405FC2h
                dd 1DC37216h,0E2250CBCh,3C498B28h,0D9541FFh,0A8017139h
                dd 0CB3DE08h,0B4E49CD8h,56C19064h,0CB84617Bh,32B670D5h
                dd 6C5C7448h,0B85742D0h
Td4             dd 52525252h,9090909h,6A6A6A6Ah,0D5D5D5D5h,30303030h,36363636h
                                        ; DATA XREF: AES__decrypt+C90r
                                        ; AES__decrypt+CA4r ...
                dd 0A5A5A5A5h,38383838h,0BFBFBFBFh,40404040h,0A3A3A3A3h
                dd 9E9E9E9Eh,81818181h,0F3F3F3F3h,0D7D7D7D7h,0FBFBFBFBh
                dd 7C7C7C7Ch,0E3E3E3E3h,39393939h,82828282h,9B9B9B9Bh
                dd 2F2F2F2Fh,0FFFFFFFFh,87878787h,34343434h,8E8E8E8Eh
                dd 43434343h,44444444h,0C4C4C4C4h,0DEDEDEDEh,0E9E9E9E9h
                dd 0CBCBCBCBh,54545454h,7B7B7B7Bh,94949494h,32323232h
                dd 0A6A6A6A6h,0C2C2C2C2h,23232323h,3D3D3D3Dh,0EEEEEEEEh
                dd 4C4C4C4Ch,95959595h,0B0B0B0Bh,42424242h,0FAFAFAFAh
                dd 0C3C3C3C3h,4E4E4E4Eh,8080808h,2E2E2E2Eh,0A1A1A1A1h
                dd 66666666h,28282828h,0D9D9D9D9h,24242424h,0B2B2B2B2h
                dd 76767676h,5B5B5B5Bh,0A2A2A2A2h,49494949h,6D6D6D6Dh
                dd 8B8B8B8Bh,0D1D1D1D1h,25252525h,72727272h,0F8F8F8F8h
                dd 0F6F6F6F6h,64646464h,86868686h,68686868h,98989898h
                dd 16161616h,0D4D4D4D4h,0A4A4A4A4h,5C5C5C5Ch,0CCCCCCCCh
                dd 5D5D5D5Dh,65656565h,0B6B6B6B6h,92929292h,6C6C6C6Ch
                dd 70707070h,48484848h,50505050h,0FDFDFDFDh,0EDEDEDEDh
                dd 0B9B9B9B9h,0DADADADAh,5E5E5E5Eh,15151515h,46464646h
                dd 57575757h,0A7A7A7A7h,8D8D8D8Dh,9D9D9D9Dh,84848484h
                dd 90909090h,0D8D8D8D8h,0ABABABABh,0,8C8C8C8Ch,0BCBCBCBCh
                dd 0D3D3D3D3h,0A0A0A0Ah,0F7F7F7F7h,0E4E4E4E4h,58585858h
                dd 5050505h,0B8B8B8B8h,0B3B3B3B3h,45454545h,6060606h,0D0D0D0D0h
                dd 2C2C2C2Ch,1E1E1E1Eh,8F8F8F8Fh,0CACACACAh,3F3F3F3Fh
                dd 0F0F0F0Fh,2020202h,0C1C1C1C1h,0AFAFAFAFh,0BDBDBDBDh
                dd 3030303h,1010101h,13131313h,8A8A8A8Ah,6B6B6B6Bh,3A3A3A3Ah
                dd 91919191h,11111111h,41414141h,4F4F4F4Fh,67676767h,0DCDCDCDCh
                dd 0EAEAEAEAh,97979797h,0F2F2F2F2h,0CFCFCFCFh,0CECECECEh
                dd 0F0F0F0F0h,0B4B4B4B4h,0E6E6E6E6h,73737373h,96969696h
                dd 0ACACACACh,74747474h,22222222h,0E7E7E7E7h,0ADADADADh
                dd 35353535h,85858585h,0E2E2E2E2h,0F9F9F9F9h,37373737h
                dd 0E8E8E8E8h,1C1C1C1Ch,75757575h,0DFDFDFDFh,6E6E6E6Eh
                dd 47474747h,0F1F1F1F1h,1A1A1A1Ah,71717171h,1D1D1D1Dh
                dd 29292929h,0C5C5C5C5h,89898989h,6F6F6F6Fh,0B7B7B7B7h
                dd 62626262h,0E0E0E0Eh,0AAAAAAAAh,18181818h,0BEBEBEBEh
                dd 1B1B1B1Bh,0FCFCFCFCh,56565656h,3E3E3E3Eh,4B4B4B4Bh
                dd 0C6C6C6C6h,0D2D2D2D2h,79797979h,20202020h,9A9A9A9Ah
                dd 0DBDBDBDBh,0C0C0C0C0h,0FEFEFEFEh,78787878h,0CDCDCDCDh
                dd 5A5A5A5Ah,0F4F4F4F4h,1F1F1F1Fh,0DDDDDDDDh,0A8A8A8A8h
                dd 33333333h,88888888h,7070707h,0C7C7C7C7h,31313131h,0B1B1B1B1h
                dd 12121212h,10101010h,59595959h,27272727h,80808080h,0ECECECECh
                dd 5F5F5F5Fh,60606060h,51515151h,7F7F7F7Fh,0A9A9A9A9h
                dd 19191919h,0B5B5B5B5h,4A4A4A4Ah,0D0D0D0Dh,2D2D2D2Dh
                dd 0E5E5E5E5h,7A7A7A7Ah,9F9F9F9Fh,93939393h,0C9C9C9C9h
                dd 9C9C9C9Ch,0EFEFEFEFh,0A0A0A0A0h,0E0E0E0E0h,3B3B3B3Bh
                dd 4D4D4D4Dh,0AEAEAEAEh,2A2A2A2Ah,0F5F5F5F5h,0B0B0B0B0h
                dd 0C8C8C8C8h,0EBEBEBEBh,0BBBBBBBBh,3C3C3C3Ch,83838383h
                dd 53535353h,99999999h,61616161h,17171717h,2B2B2B2Bh,4040404h
                dd 7E7E7E7Eh,0BABABABAh,77777777h,0D6D6D6D6h,26262626h
                dd 0E1E1E1E1h,69696969h,14141414h,63636363h,55555555h
                dd 21212121h,0C0C0C0Ch,7D7D7D7Dh
rcon            dd 1000000h,2000000h,4000000h,8000000h,10000000h,20000000h
                                        ; DATA XREF: AES__ExpandKey+152r
                                        ; AES__ExpandKey+2AAr ...
                dd 40000000h,80000000h,1B000000h,36000000h

unk_10061454    db 0FFh                 ; DATA XREF: .rdata:10061464o
                db 0FFh
                db 0FFh
                db 0FFh
                dd offset sub_1004BE20
unk_1006145C    db  22h ; "             ; DATA XREF: sub_1004BE28+11o
                db    5
                db  93h ; ?
                db  19h
                db    1
                db    0
                db    0
                db    0
                dd offset unk_10061454
                db 14h dup(0),1,3 dup(0)

unk_10061480    db 0FFh                 ; DATA XREF: .rdata:10061498o
                db 0FFh
                db 0FFh
                db 0FFh
                dd offset sub_1004BE50
                db    0
                db    0
                db    0
                db    0
                dd offset sub_1004BE5B

unk_10061490    db  22h ; "             ; DATA XREF: sub_1004BE66+17o
                db    5
                db  93h ; ?
                db  19h
                db    2
                db    0
                db    0
                db    0
                dd offset unk_10061480
                db 14h dup(0),1,3 dup(0)

unk_10061400    db    1                 ; DATA XREF: .rdata:1006143Co
                db    0
                db    0
                db    0
                dd offset off_100848C8
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db    0
                db    0
                db    0
                db    0
                db    4
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
unk_1006141C    db    1                 ; DATA XREF: .rdata:10061440o
                db    0
                db    0
                db    0
                dd offset off_100848D8
                align 8
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db    0
                db    0
                db    0
                db    0
                db    4
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0

unk_10061438    db    2                 ; DATA XREF: .rdata:10061450o
                db    0
                db    0
                db    0
                dd offset unk_10061400
                dd offset unk_1006141C
unk_10061444    db    0                 ; DATA XREF: calculate_volume_id_mac+97o
                                        ; CMAC::CMAC(void)+4Bo ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd offset unk_10061438

; const AES::`RTTI Complete Object Locator'
??_R4AES@@6B@   dd 0                    ; DATA XREF: .rdata:100601FCo
                                        ; signature
                dd 0                    ; offset
                dd 0                    ; cdOffset
                dd offset ??_R0?AVAES@@@8 ; pTypeDescriptor
                dd offset ??_R3AES@@8   ; pClassDescriptor

; AES::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@AES@@8 dd offset ??_R0?AVAES@@@8
                                        ; DATA XREF: .rdata:AES::`RTTI Base Class Array'o
                                        ; pTypeDescriptor
                dd 1                    ; numContainedBases
                dd 0, 0FFFFFFFFh, 0     ; PMD where
                dd 40h                  ; attributes
                dd offset ??_R3AES@@8   ; AES::`RTTI Class Hierarchy Descriptor'

; AES::`RTTI Base Class Array'
??_R2AES@@8     dd offset ??_R1A@?0A@EA@AES@@8 ; DATA XREF: .rdata:100608F0o
                                        ; BaseClass[00]
                dd offset ??_R1A@?0A@EA@BlockCipher@@8 ; BaseClass[01]

; AES::`RTTI Class Hierarchy Descriptor'
??_R3AES@@8     dd 0                    ; DATA XREF: .rdata:100608E0o
                                        ; .rdata:10060918o
                                        ; signature
                dd 0                    ; attributes
                dd 2                    ; numBaseClasses
                dd offset ??_R2AES@@8   ; pBaseClassArray

; class AES `RTTI Type Descriptor'
??_R0?AVAES@@@8 dd offset ??_7type_info@@6B@ ; DATA XREF: __stbuf+46?
                                        ; .rdata:100608DCo ...
                                        ; pVFTable
                dd 0                    ; spare
                db '.?AVAES@@',0        ; name

; BlockCipher::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@BlockCipher@@8 dd offset ??_R0?AVBlockCipher@@@8 ; DATA XREF: .rdata:100608F8o
                                        ; .rdata:BlockCipher::`RTTI Base Class Array'o
                                        ; pTypeDescriptor
                dd 0                    ; numContainedBases
                dd 0, 0FFFFFFFFh, 0     ; PMD where
                dd 40h                  ; attributes
                dd offset ??_R3BlockCipher@@8 ; BlockCipher::`RTTI Class Hierarchy Descriptor'

; BlockCipher::`RTTI Base Class Array'
??_R2BlockCipher@@8 dd offset ??_R1A@?0A@EA@BlockCipher@@8 ; DATA XREF: .rdata:1006093Co
                                        ; BaseClass[00]

; BlockCipher::`RTTI Class Hierarchy Descriptor'
??_R3BlockCipher@@8 dd 0                ; DATA XREF: .rdata:1006092Co
                                        ; .rdata:10060960o
                                        ; signature
                dd 0                    ; attributes
                dd 1                    ; numBaseClasses
                dd offset ??_R2BlockCipher@@8 ; pBaseClassArray

; class BlockCipher `RTTI Type Descriptor'
??_R0?AVBlockCipher@@@8 dd offset ??_7type_info@@6B@ ; DATA XREF: _isdigit?
                                        ; _strtol+5? ...
                                        ; pVFTable
                dd 0                    ; spare
                db '.?AVBlockCipher@@',0 ; name
                db    0
                db    0

; const BlockCipher::`RTTI Complete Object Locator'
??_R4BlockCipher@@6B@ dd 0              ; DATA XREF: .rdata:100601D0o
                                        ; signature
                dd 0                    ; offset
                dd 0                    ; cdOffset
                dd offset ??_R0?AVBlockCipher@@@8 ; pTypeDescriptor
                dd offset ??_R3BlockCipher@@8 ; pClassDescriptor

; MAC::`RTTI Base Class Array'
??_R2MAC@@8     dd offset ??_R1A@?0A@EA@MAC@@8 ; DATA XREF: .rdata:100608A8o
                                        ; BaseClass[00]
                db    0
                db    0
                db    0
                db    0

; MAC::`RTTI Class Hierarchy Descriptor'
??_R3MAC@@8     dd 0                    ; DATA XREF: .rdata:10060898o
                                        ; .rdata:100608CCo
                                        ; signature
                dd 0                    ; attributes
                dd 1                    ; numBaseClasses
                dd offset ??_R2MAC@@8   ; pBaseClassArray

; class MAC `RTTI Type Descriptor'
??_R0?AVMAC@@@8 dd offset ??_7type_info@@6B@ ; DATA XREF: .rdata:10060894o
                                        ; .rdata:MAC::`RTTI Base Class Descriptor at (0,-1,0,64)'o
                                        ; pVFTable
                dd 0                    ; spare
                db '.?AVMAC@@',0        ; name
                db    0
                db    0

; MAC::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@MAC@@8 dd offset ??_R0?AVMAC@@@8 ; DATA XREF: .rdata:10060864o
                                        ; .rdata:MAC::`RTTI Base Class Array'o
                                        ; pTypeDescriptor
                dd 0                    ; numContainedBases
                dd 0, 0FFFFFFFFh, 0     ; PMD where
                dd 40h                  ; attributes
                dd offset ??_R3MAC@@8   ; MAC::`RTTI Class Hierarchy Descripto

; CMAC::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
??_R1A@?0A@EA@CMAC@@8 dd offset ??_R0?AVCMAC@@@8 ; DATA XREF: sub_1004C133+24?
                                        ; .rdata:CMAC::`RTTI Base Class Array'o
                                        ; pTypeDescriptor
                dd 1                    ; numContainedBases
                dd 0, 0FFFFFFFFh, 0     ; PMD where
                dd 40h                  ; attributes
                dd offset ??_R3CMAC@@8  ; CMAC::`RTTI Class Hierarchy Descriptor'

; CMAC::`RTTI Base Class Array'
??_R2CMAC@@8    dd offset ??_R1A@?0A@EA@CMAC@@8 ; DATA XREF: .rdata:1006085Co
                                        ; BaseClass[00]
                dd offset ??_R1A@?0A@EA@MAC@@8 ; BaseClass[01]
                db    0
                db    0
                db    0
                db    0

; CMAC::`RTTI Class Hierarchy Descriptor'
??_R3CMAC@@8    dd 0                    ; DATA XREF: .rdata:1006084Co
                                        ; .rdata:10060884o
                                        ; signature
                dd 0                    ; attributes
                dd 2                    ; numBaseClasses
                dd offset ??_R2CMAC@@8  ; pBaseClassArray

; const type_info::`vftable'
??_7type_info@@6B@ dd offset ??_Gtype_info@@UAEPAXI@Z
                                        ; DATA XREF: type_info::~type_info(void)+1o
                                        ; .data:type_info `RTTI Type Descriptor'o ...
                                        ; type_info::`sc

; class CMAC `RTTI Type Descriptor'
??_R0?AVCMAC@@@8 dd offset ??_7type_info@@6B@ ; DATA XREF: .rdata:10060848o
                                        ; .rdata:CMAC::`RTTI Base Class Descriptor at (0,-1,0,64)'o
                                        ; pVFTable
                dd 0                    ; spare
                db '.?AVCMAC@@',0       ; name
                align 4

; const CMAC::`RTTI Complete Object Locator'
??_R4CMAC@@6B@  dd 0                    ; DATA XREF: .rdata:1006019Co
                                        ; signature
                dd 0                    ; offset
                dd 0                    ; cdOffset
                dd offset ??_R0?AVCMAC@@@8 ; pTypeDescriptor
                dd offset ??_R3CMAC@@8  ; pClassDescriptor

; const MAC::`RTTI Complete Object Locator'
??_R4MAC@@6B@   dd 0                    ; DATA XREF: .rdata:10060180o
                                        ; signature
                dd 0                    ; offset
                dd 0                    ; cdOffset
                dd offset ??_R0?AVMAC@@@8 ; pTypeDescriptor
                dd offset ??_R3MAC@@8   ; pClassDescriptor

byte_100804EC   db 5Eh, 62h, 59h, 68h, 94h, 0ABh, 30h, 10h, 89h, 0FCh, 0B1h, 0FDh, 0C5h, 1Dh, 0E7h, 1Eh, 9, 0C9h, 12h, 0AFh
                                        ; DATA XREF: sub_10004970+32o
byte_10080500   db 2, 2 dup(0), 5Ch, 2 dup(0FFh), 2 dup(0), 27h, 0DBh, 2 dup(0), 3, 52h, 6Eh, 93h, 0CDh, 1, 0A9h, 8Dh, 92h, 0D0h, 0F8h, 0FFh
                                        ; DATA XREF: sub_10004920+1Eo
                                        ; sub_10004970+3Bo
                db 59h, 7, 67h, 0C3h, 38h, 8Dh, 20h, 2Bh, 47h, 99h, 0B0h, 9Bh, 0EFh, 67h, 0E1h, 85h, 1Eh, 45h, 0Eh, 2Dh
                db 67h, 3Ch, 52h, 0A1h, 2Ah, 29h, 9Ch, 0A7h, 77h, 0E7h, 0FAh, 9Fh, 8Ah, 0C8h, 8Fh, 4Ah, 9Bh, 0F0h, 74h, 36h
                db 0D8h, 0BBh, 4, 0, 0FBh, 86h, 0AAh, 0D6h, 0Eh, 5Eh, 0ADh, 0B5h, 0DDh, 69h, 0DDh, 0E2h, 0CBh, 9Eh, 10h, 9Ah
                db 82h, 12h, 0E0h, 6Fh, 96h, 3Ch, 4Fh, 0F9h

aEcdsa_sig      db 'ECDSA_SIG',0        ; DATA XREF: .rdata:1004D6B8o
                align 4

;aR:                                     ; DATA XREF: sub_1001EBC0+123o
                                        ; .rdata:1004D684o
                unicode aR, <r>,0

byte_1004D678   db 0Ch dup(   0)        ; DATA XREF: .rdata:1004D6A8o
                dd offset aR            ; "r"
                dd offset sub_1001FD30
                db 8 dup(   0),   4,3 dup(   0)
                dd offset aS            ; "s"
                dd offset sub_1001FD30

byte_1006089C   db 8 dup(   0),   1,3 dup(   0) ; DATA XREF: .rdata:10060898o
                                        ; .rdata:100608CCo
                dd offset off_100608AC
off_100608AC    dd offset off_100608B4  ; DATA XREF: .rdata:100608A8o
                db    0
                db    0
                db    0
                db    0
off_100608B4    dd offset off_100848B4  ; DATA XREF: .rdata:10060864o
                                        ; .rdata:off_100608ACo
                align 10h
                db 4 dup(0FFh),4 dup(   0), 40h,3 dup(   0)
                dd offset byte_1006089C

byte_10060888   db 0Ch dup(   0)        ; DATA XREF: .rdata:10060180o
                dd offset off_100848B4
                dd offset byte_1006089C

byte_1004D6A0   db    1,3 dup(   0), 10h,3 dup(   0) ; DATA XREF: sub_100178D0+Co
                                        ; sub_100178F0+8o ...
                dd offset byte_1004D678
                db    2,7 dup(   0),   8,3 dup(   0)
                dd offset aEcdsa_sig    ; "ECDSA_SIG"

byte_1004D258   db 0A0h,   1,2 dup(   0),0A0h,   1 ; DATA XREF: EVP_ecdsao
                db 2 dup(   0), 14h,7 dup(   0)
                dd offset sub_10013030
                dd offset sub_10013040
                dd offset sub_10013050
                db 8 dup(   0)
                dd offset sub_10016FA0
                dd offset sub_100173F0
                db  98h,   1,12h dup(   0), 40h,3 dup(   0)
                db  64h,3 dup(   0)

aBadAllocation  db 'bad allocation',0   ; DATA XREF: .data:off_1006C3ECo
                                        ; .data:1006D890o ...

dword_10080490  dd 84BE2329h            ; DATA XREF: sub_1000B840+9Do
                                        ; sub_1000F5E0+23r
dword_10080494  dd 0AED66CE1h           ; DATA XREF: sub_1000F5E0+29r
dword_10080498  dd 0F1499052h           ; DATA XREF: sub_1000F5E0+2Fr
dword_1008049C  dd 0EBE9BBF1h           ; DATA XREF: sub_1000F5E0+38r
dword_100804A0  dd 3CDBA6B3h            ; DATA XREF: sub_1000F5E0+42r
unk_100804A4    db  56h ; V             ; DATA XREF: sub_1000BB30+94o
                db 13h, 0E7h, 0F8h, 9Bh, 11h, 0D9h, 0CAh, 0A2h, 7Bh, 61h, 0Ah, 10h, 96h, 33h, 2Bh, 0EEh, 0D8h, 6Bh, 0C4h
byte_100804B8   db 8Ah, 60h, 0C8h, 0Bh, 0D6h, 0Ch, 23h, 60h, 5Fh, 0BEh, 90h, 0B2h, 7Bh, 0F9h, 6Bh, 2Dh, 0B3h, 81h, 95h, 0C1h
                                        ; DATA XREF: sub_1000F680+31o
                                        ; sub_10010630+34Eo
                db 80h, 1Fh, 54h, 0EBh, 29h, 0E0h, 0F6h, 0ECh, 57h, 0ACh, 2Bh, 91h, 68h, 0E8h, 8Bh, 2Dh, 56h, 97h, 75h, 8
                dd offset aBadAllocation ; "bad allocation"
                dd offset aBadAllocation ; "bad allocation"
                dd offset aBadAllocation ; "bad allocation"

aEcPartOfOpenssl0_9_8 db 'EC part of OpenSSL 0.9.8n 24 Mar 2010',0
                db    0
                db    0
a_CryptoEcEc_li db '.\crypto\ec\ec_lib.c',0 ; DATA XREF: EC_GROUP_new+Eo
                                        ; EC_GROUP_new+2Do ...
                align 10h
a0123456789abcd db '0123456789ABCDEF',0
                align 4
;a0:                                     ; DATA XREF: .rdata:10053028o
                                        ; .rdata:100530D4o ...
                unicode a0, <0>,0
;asc_1004D4A8:                           ; DATA XREF: .rdata:1005C798o
                unicode asc_1004D4A8, <->,0
a_CryptoEcEc_ke db '.\crypto\ec\ec_key.c',0 ; DATA XREF: EC_KEY_new+2o
                                        ; EC_KEY_new+19o ...
                align 8
aBigNumberPartO db 'Big Number part of OpenSSL 0.9.8n 24 Mar 2010',0
                align 4
byte_1004D4F8   db    0,   1,2 dup(   2),4 dup(   3),8 dup(   4)
                                        ; DATA XREF: sub_10016610+15r
                                        ; sub_10016610+23r ...
                db 10h dup(   5),20h dup(   6),40h dup(   7),80h dup(   8)
a_CryptoBnBn_li db '.\crypto\bn\bn_lib.c',0 ; DATA XREF: BN_new+5o
                                        ; BN_new+1Fo ...

a90081282363758 db '900812823637587646514106462588455890498729007071',0
                                        ; DATA XREF: sub_1000B3F0+1Do
                align 10h
word_10060060   dw 332Dh                ; DATA XREF: sub_1000B3F0+5Ar
byte_10060062   db 0                    ; DATA XREF: sub_1000B3F0+2Br
                align 4
a36639403464723 db '366394034647231750324370400222002566844354703832',0
                                        ; DATA XREF: sub_1000B3F0+3Bo
                align 4
a26486561395972 db '264865613959729647018113670854605162895977008838',0
                                        ; DATA XREF: sub_1000B3F0+4Co
                align 4
a51841075954883 db '51841075954883162510413392745168936296187808697',0
                                        ; DATA XREF: sub_1000B3F0+66o
a900812823637_0 db '900812823637587646514106555566573588779770753047',0
                                        ; DATA XREF: sub_1000B3F0+76o
                align 10h
a____SrcAacsAac db '..\..\src\aacs\aacs_ecdsa.cpp',0 ; DATA XREF: sub_1000B3F0:loc_1000B57Fo
                                        ; sub_1000B3F0+257o ...
                align 10h
aInvalidBlockSi db 'invalid block size',0 ; DATA XREF: sub_1000BDB0+55o
                align 4
aWrongOrderOfOp db 'wrong order of operations',0 ; DATA XREF: calculate_volume_id_mac+A1o
                                        ; sub_1000BFC0+13o ...
                dd offset ??_R4MAC@@6B@ ; const MAC::`RTTI Complete Object Locator'
; const MAC::`vftable'
??_7MAC@@6B@    dd offset MAC___MAC     ; DATA XREF: sub_1004BE20:loc_1000BD80o
                                        ; MAC___MAC+8o ...
                dd offset __purecall
                dd offset __purecall
                dd offset __purecall
                dd offset __purecall
                dd offset __purecall
                dd offset ??_R4CMAC@@6B@ ; const CMAC::`RTTI Complete Object Locator'
; const CMAC::`vftable'
??_7CMAC@@6B@   dd offset CMAC___CMAC   ; DATA XREF: CMAC::CMAC(void)+2Eo
                                        ; CMAC::~CMAC(void)+Co
                dd offset CMAC__init
                dd offset CMAC__update_0
                dd offset CMAC__update
                dd offset CMAC__finish
                dd offset CMAC__getTag
aInvalidAesKeyS db 'Invalid AES key size',0 ; DATA XREF: AES__makeKey+54o
                align 10h
                dd offset ??_R4BlockCipher@@6B@ ; const BlockCipher::`RTTI Complete Object Locator'
; const BlockCipher::`vftable'
??_7BlockCipher@@6B@ dd offset BlockCipher___BlockCipher
                                        ; DATA XREF: BlockCipher___BlockCipher+8o
                                        ; AES___AES+35o ...
                dd offset __purecall
                dd offset __purecall
                dd offset __purecall
                dd offset __purecall
                dd offset __purecall
                dd offset __purecall
                dd offset __purecall
                dd offset __purecall
                dd offset __purecall
                dd offset ??_R4AES@@6B@ ; const AES::`RTTI Complete Object Locator'
; const AES::`vftable'
??_7AES@@6B@    dd offset AES___AES     ; DATA XREF: calculate_volume_id_mac+2Ao
                dd offset AES__blockBits
                dd offset AES__blockSize
                dd offset AES__keyBits
                dd offset AES__keySize
                dd offset AES__byteInt
                dd offset AES__byteInt
                dd offset AES__makeKey
                dd offset AES__encrypt
                dd offset AES__decrypt

off_10060754    dd offset off_10084864  ; DATA XREF: .rdata:off_10060744o
                db    2,7 dup(   0),4 dup(0FFh),4 dup(   0), 40h
                db 3 dup(   0)
                dd offset byte_10060734

off_10060744    dd offset off_10060754  ; DATA XREF: .rdata:10060740o
                dd offset off_100607A0
                dd offset off_100607EC
                db    0
                db    0
                db    0
                db    0

byte_10060734   db 8 dup(   0),   3,3 dup(   0) ; DATA XREF: .rdata:10060730o
                                        ; .rdata:1006076Co
                dd offset off_10060744

byte_10060698   db 8 dup(   0),   3,3 dup(   0) ; DATA XREF: .rdata:10060694o
                                        ; .rdata:100606D0o
                dd offset off_100606A8

off_10060818    dd offset off_100607EC  ; DATA XREF: .rdata:10060814o
                align 10h

byte_10060808   db 8 dup(   0),   1,3 dup(   0) ; DATA XREF: .rdata:10060638o
                                        ; .rdata:10060804o
                dd offset off_10060818

off_10060794    dd offset off_100607A0  ; DATA XREF: .rdata:10060790o
                dd offset off_100607EC
                align 10h

byte_10060784   db 8 dup(   0),   2,3 dup(   0) ; DATA XREF: .rdata:10060780o
                                        ; .rdata:100607B8o
                dd offset off_10060794

off_100607EC    dd offset off_10084828,2 dup(   0),0FFFFFFFFh,   0, 40h
                                        ; DATA XREF: .rdata:100606B0o
                                        ; .rdata:100606FCo ...
                dd offset byte_10060808

off_100607A0    dd offset off_10084844  ; DATA XREF: .rdata:100606ACo
                                        ; .rdata:10060748o ...
                db    1,7 dup(   0),4 dup(0FFh),4 dup(   0), 40h
                db 3 dup(   0)
                dd offset byte_10060784

off_100606A8    dd offset off_100606B8  ; DATA XREF: .rdata:100606A4o
                dd offset off_100607A0
                dd offset off_100607EC
                align 8
off_100606B8    dd offset off_1006D894  ; DATA XREF: .rdata:off_100606A8o
                db    2,7 dup(   0),4 dup(0FFh),4 dup(   0), 40h
                db 3 dup(   0)
                dd offset byte_10060698

unk_10060698    db    0                 ; DATA XREF: .rdata:10060694o
                                        ; .rdata:100606D0o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    3
                db    0
                db    0
                db    0
                dd offset off_100606A8

off_1006D894    dd offset off_1005B520  ; DATA XREF: .rdata:10060690o
                                        ; .rdata:off_100606B8o ...
                db 4 dup(0), 2Eh, 3Fh, 41h, 56h, 6Fh, 75h, 74h, 5Fh, 6Fh, 66h, 5Fh, 72h, 61h, 6Eh, 67h, 65h, 40h, 73h, 74h
                db 64h, 2 dup(40h), 2 dup(0)

unk_10061354    db    0                 ; DATA XREF: .rdata:100611F4o
                                        ; .rdata:10061334o ...
                db    0
                db    0
                db    0
                dd offset off_10084828
                align 10h
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db    0
                db    0
                db    0
                db    0
                db  0Ch
                db    0
                db    0
                db    0
                dd offset ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(exception::exception const &)

unk_10061370    db    0                 ; DATA XREF: .rdata:100611F0o
                                        ; .rdata:100613B0o
                db    0
                db    0
                db    0
                dd offset off_10084844
                db    0
                db    0
                db    0
                db    0
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db    0
                db    0
                db    0
                db    0
                db  28h ; (
                db    0
                db    0
                db    0
                dd offset sub_100026A0

unk_1006138C    db    0                 ; DATA XREF: .rdata:100613ACo
                db    0
                db    0
                db    0
                dd offset off_10084864
                align 8
                db 0FFh
                db 0FFh
                db 0FFh
                db 0FFh
                db    0
                db    0
                db    0
                db    0
                db  28h ; (
                db    0
                db    0
                db    0
                dd offset sub_100042E0

off_10084844    dd offset off_1005B520  ; DATA XREF: .rdata:1006077Co
                                        ; .rdata:off_100607A0o ...
                db    0
                db    0
                db    0
                db    0
a_?avlogic_error@std@ db '.?AVlogic_error@std@@',0
                db    0
                db    0
off_10084864    dd offset off_1005B520  ; DATA XREF: .rdata:1006072Co
                                        ; .rdata:off_10060754o ...
                db    0
                db    0
                db    0
                db    0
a_?avlength_error@std db '.?AVlength_error@std@@',0
                db    0
off_10084884    dd offset off_1005B520  ; DATA XREF: .rdata:100607C8o
                                        ; .rdata:off_10060820o ...
                db    0
                db    0
                db    0
                db    0
a_?avbad_alloc@std@@ db '.?AVbad_alloc@std@@',0
off_100848A0    dd offset off_1005B520  ; DATA XREF: .rdata:10060848o
                                        ; .rdata:off_1006086Co
                align 8
a_?avcmac@@     db '.?AVCMAC@@',0
                align 4
off_100848B4    dd offset off_1005B520  ; DATA XREF: .rdata:10060894o
                                        ; .rdata:off_100608B4o
                db    0
                db    0
                db    0
                db    0
a_?avmac@@      db '.?AVMAC@@',0
                db    0
                db    0
off_100848C8    dd offset off_1005B520  ; DATA XREF: .rdata:10061404o
                align 10h
a_pad           db '.PAD',0
                align 4
off_100848D8    dd offset off_1005B520  ; DATA XREF: .rdata:10061420o
                align 10h
a_pax           db '.PAX',0
                align 4
off_100848E8    dd offset off_1005B520  ; DATA XREF: .rdata:100608DCo
                                        ; .rdata:off_10060900o
                align 10h
a_?avaes@@      db '.?AVAES@@',0
                align 4
off_100848FC    dd offset off_1005B520  ; DATA XREF: .rdata:10060928o
                                        ; .rdata:off_10060948o
                db    0
                db    0
                db    0
                db    0
a_?avblockcipher@@ db '.?AVBlockCipher@@',0
                db    0
                db    0
off_10084918    dd offset off_1005B520  ; DATA XREF: .rdata:10060970o
                                        ; .rdata:off_10060994o
                align 10h
a_?avchttpsessi db '.?AVCHttpSession@@',0
                align 4
off_10084934    dd offset off_1005B520  ; DATA XREF: .rdata:off_100609C8o
                db    0
                db    0
                db    0
                db    0
a_?avihttpsession@@ db '.?AVIHttpSession@@',0
                db 21h dup(   0)
dword_10084970  dd 0                    ; DATA XREF: sub_100180F0r
                                        ; sub_100180F0+1Ew ...
dword_10084974  dd 0                    ; DATA XREF: sub_100180F0:loc_10018137w
                                        ; sub_10018140:loc_100181A7w ...
dword_10084978  dd 0                    ; DATA XREF: CRYPTO_malloc:loc_100182BFr
                                        ; CRYPTO_malloc+44r
dword_1008497C  dd 0                    ; DATA XREF: sub_10018330:loc_10018360r
                                        ; sub_10018330+5Ar ...
dword_10084980  dd 0                    ; DATA XREF: CRYPTO_freer
                                        ; CRYPTO_free+1Dr
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
dword_1008498C  dd 0                    ; DATA XREF: sub_100184A0r
dword_10084990  dd 0                    ; DATA XREF: sub_100184C0r
                align 8
unk_10084998    db    0                 ; DATA XREF: sub_100184E0+5o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
dword_100849A0  dd 0                    ; DATA XREF: sub_100187A0+8r
                                        ; CRYPTO_add_lock:loc_100187DBr ...
dword_100849A4  dd 0                    ; DATA XREF: sub_100187A0:loc_100187B7r
                                        ; CRYPTO_add_lock+23r ...
                align 10h
dword_100849B0  dd 0                    ; DATA XREF: CRYPTO_add_lockr
dword_100849B4  dd 0                    ; DATA XREF: sub_10018780r
dword_100849B8  dd 0                    ; DATA XREF: sub_10018840+36w
                                        ; sub_10018840+46w ...
dword_100849BC  dd 0                    ; DATA XREF: sub_10018840r
                                        ; sub_10018840+Ew
                db    0
                db    0
                db    0
                db    0
byte_100849C4   db 0B4h dup(0)          ; DATA XREF: CRYPTO_malloc+67r
                                        ; OPENSSL_cleanse+5r ...
dword_10084A78  dd 0                    ; DATA XREF: sub_1001F2F0:loc_1001F321r
                                        ; sub_1001F2F0+45w
                align 10h
byte_10084A80   db 18Ch dup(   0)       ; DATA XREF: ERR_get_state+EBo
dword_10084C0C  dd 0                    ; DATA XREF: sub_1001F4C0r
                                        ; sub_1001F4C0+1Fr ...
; void *dword_10084C10
dword_10084C10  dd 0                    ; DATA XREF: sub_1001F470+13r
                                        ; sub_1001F470+28w ...
; void *dword_10084C14
dword_10084C14  dd 0                    ; DATA XREF: sub_1001FAF0+16r
                                        ; sub_1001FAF0+4Ew ...
dword_10084C18  dd 0                    ; DATA XREF: sub_1001F6A0+1Co
                                        ; sub_1001FAF0:loc_1001FB51w ...
dword_10084C1C  dd 0                    ; DATA XREF: sub_10024D00:loc_10024D3Br
                                        ; sub_10024E20+27r
byte_10084C20   db 3E0h dup(   0)       ; DATA XREF: sub_10026F40+6o
                                        ; sub_10026F90+1DDo ...
                db 34h dup(   ?)
dword_10085034  dd ?                    ; DATA XREF: sub_10026F40+14o
                                        ; sub_10026F90+97r ...
dword_10085038  dd ?                    ; DATA XREF: sub_10026F90+A6r
                                        ; sub_10026F90+2F1w ...
dword_1008503C  dd ?                    ; DATA XREF: sub_10026F90+AFr
                                        ; sub_10027310+195r
dword_10085040  dd ?                    ; DATA XREF: sub_10026F90+C4r
                                        ; sub_10027310+19Fr
dword_10085044  dd ?                    ; DATA XREF: sub_10026F90+CDr
                                        ; sub_10027310+1AFr
dword_10085048  dd ?                    ; DATA XREF: sub_10026F40+19w
                                        ; sub_10026F90+104w ...
dword_1008504C  dd ?                    ; DATA XREF: sub_10026F40+1Fw
                                        ; sub_10026F90+8Dr ...
dword_10085050  dd ?                    ; DATA XREF: sub_10026F40+35w
                                        ; sub_10026F90:loc_10027012r ...
dword_10085054  dd ?                    ; DATA XREF: sub_10026F40+3Bw
                                        ; sub_10026F90+88r ...
dbl_10085058    dq ?                    ; DATA XREF: sub_10026F40+2Fw
                                        ; sub_10026F90+305r ...
dword_10085060  dd ?                    ; DATA XREF: sub_10026F40+41w
                                        ; sub_10027310+AEr ...
dword_10085064  dd ?                    ; DATA XREF: sub_10026F90+15r
                                        ; sub_10027310+BAw ...
dword_10085068  dd ?                    ; DATA XREF: sub_10026F90+45r
                                        ; sub_10027310+A1w ...
dword_1008506C  dd ?                    ; DATA XREF: sub_10027310:loc_100273DDr
                                        ; sub_10027310+158w
unk_10085070    db    ? ;               ; DATA XREF: sub_100278A0+2o
                db    ? ;
                db    ? ;
                db    ? ;
byte_10085074   db 14h dup(?)           ; DATA XREF: sub_100278C0+A6r
dword_10085088  dd ?                    ; DATA XREF: sub_1002A260+3Bw
                                        ; sub_1002A2F0r ...
; void *dword_1008508C
dword_1008508C  dd ?                    ; DATA XREF: sub_10029FB0+1Cr
                                        ; sub_10029FB0+37w ...
unk_10085090    db    ? ;               ; DATA XREF: sub_1002B590+2o
                db    ? ;
                db    ? ;
                db    ? ;
byte_10085094   db 18h dup(?)           ; DATA XREF: sub_10033240+5o
dword_100850AC  dd ?                    ; DATA XREF: sub_100381A1+4w
                                        ; __invalid_parameter+3r
dword_100850B0  dd ?                    ; DATA XREF: operator new(uint)+2Bo
                                        ; sub_1004C1F8w ...
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
dword_100850BC  dd ?                    ; DATA XREF: operator new(uint):loc_10038428r
                                        ; operator new(uint)+32w
dword_100850C0  dd ?                    ; DATA XREF: __stbuf:loc_1003F3BDw
                                        ; __wopenfile+269w ...
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
dword_100850C8  dd ?                    ; DATA XREF: __get_printf_count_output+Ar
dword_100850CC  dd ?                    ; DATA XREF: _CRT_INIT(x,x,x)+118w
                                        ; _CRT_INIT(x,x,x)+130r ...
; void *dword_100850D0
dword_100850D0  dd ?                    ; DATA XREF: _CRT_INIT(x,x,x)+E5w
                                        ; __setenvp:loc_10042904r ...
                align 8
dword_100850D8  dd ?                    ; DATA XREF: __set_error_mode+15r
                                        ; __set_error_mode:loc_10044962r ...
dword_100850DC  dd ?                    ; DATA XREF: __NMSG_WRITE+42r
                                        ; __FF_MSGBANNER+19r ...
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
dword_100850E4  dd ?                    ; DATA XREF: __fpmath+Fw
dword_100850E8  dd ?                    ; DATA XREF: ___report_gsfailure+8Fw
                                        ; .rdata:ExceptionInfoo
dword_100850EC  dd ?                    ; DATA XREF: ___report_gsfailure+99w
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
dword_100850F4  dd 11h dup(   ?)        ; DATA XREF: ___report_gsfailure+8Aw
dword_10085138  dd ?                    ; DATA XREF: ___report_gsfailure+BFw
                                        ; ___report_gsfailure+DFr
                align 10h
dword_10085140  dd 23h dup(   ?)        ; DATA XREF: ___report_gsfailure+7Bw
                                        ; .rdata:ExceptionInfoo
word_100851CC   dw ?                    ; DATA XREF: ___report_gsfailure+4Fw
                align 10h
word_100851D0   dw ?                    ; DATA XREF: ___report_gsfailure+48w
                align 4
word_100851D4   dw ?                    ; DATA XREF: ___report_gsfailure+41w
                align 4
word_100851D8   dw ?                    ; DATA XREF: ___report_gsfailure+3Aw
                align 4
dword_100851DC  dd ?                    ; DATA XREF: ___report_gsfailure+26w
dword_100851E0  dd ?                    ; DATA XREF: ___report_gsfailure+20w
dword_100851E4  dd ?                    ; DATA XREF: ___report_gsfailure+1Aw
dword_100851E8  dd ?                    ; DATA XREF: ___report_gsfailure+14w
dword_100851EC  dd ?                    ; DATA XREF: ___report_gsfailure+Ew
dword_100851F0  dd ?                    ; DATA XREF: ___report_gsfailure+9w
dword_100851F4  dd ?                    ; DATA XREF: ___report_gsfailure+60w
dword_100851F8  dd ?                    ; DATA XREF: ___report_gsfailure+68w
                                        ; ___report_gsfailure+85r
word_100851FC   dw ?                    ; DATA XREF: ___report_gsfailure+33w
                align 10h
dword_10085200  dd ?                    ; DATA XREF: ___report_gsfailure+57w
dword_10085204  dd ?                    ; DATA XREF: ___report_gsfailure+70w
word_10085208   dw 104h dup(   ?)       ; DATA XREF: ___report_gsfailure+2Cw
byte_10085410   db 150h dup(   ?)       ; DATA XREF: __mtinitlocks+4o
dword_10085560  dd ?                    ; DATA XREF: ___sbh_heap_init+21w
                                        ; ___sbh_free_block+21Cr ...
; HANDLE hHeap
hHeap           dd ?                    ; DATA XREF: _malloc+19r _malloc+72r ...
dword_10085568  dd ?                    ; DATA XREF: __tsopen_nolock+1ABr
                                        ; __tsopen_nolock_0+1ABr
dword_1008556C  dd ?                    ; DATA XREF: _CRT_INIT(x,x,x)+87w
                                        ; sub_1003D72F:loc_1003D757r ...
dword_10085570  dd ?                    ; DATA XREF: _CRT_INIT(x,x,x)+A9w
dword_10085574  dd ?                    ; DATA XREF: _CRT_INIT(x,x,x)+98w
dword_10085578  dd ?                    ; DATA XREF: _CRT_INIT(x,x,x)+9Ew
                                        ; sub_1003D766+30r
dword_1008557C  dd ?                    ; DATA XREF: _CRT_INIT(x,x,x)+A3w
dword_10085580  dd ?                    ; DATA XREF: __setargv+A2w
dword_10085584  dd ?                    ; DATA XREF: __setargv+A7w
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
; void *dword_1008558C
dword_1008558C  dd ?                    ; DATA XREF: _getenv+8r _getenv+2Br ...
dword_10085590  dd ?                    ; DATA XREF: ___crtsetenv+5Dr
dword_10085594  dd ?                    ; DATA XREF: _getenv+1Ar
                                        ; ___wtomb_environ+Ar ...
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
dword_1008559C  dd ?                    ; DATA XREF: __setargv+37w
                db    ? ;
                db    ? ;
                db    ? ;
                db    ? ;
byte_100855A4   db ?                    ; DATA XREF: ___endstdio+5r
                                        ; _doexit+2Dw
                align 4
dword_100855A8  dd ?                    ; DATA XREF: _CRT_INIT(x,x,x)+142r
                                        ; _doexit+24w
dword_100855AC  dd ?                    ; DATA XREF: _doexit+1Cr _doexit+B4w
; char Dst[25]
Dst             db 19h dup(?)           ; DATA XREF: __NMSG_WRITE+66o
; char Filename[260]
Filename        db 104h dup(?)          ; DATA XREF: __NMSG_WRITE+8Ao
byte_100856CD   db 1F7h dup(   ?)       ; DATA XREF: __NMSG_WRITE+92w
dword_100858C4  dd ?                    ; DATA XREF: __NMSG_WRITE+E3o
                                        ; sub_1003DB5B+4w ...
dword_100858C8  dd ?                    ; DATA XREF: _malloc+80r
                                        ; __calloc_impl+CAr ...
dword_100858CC  dd ?                    ; DATA XREF: __mtinit+30w __mtinit+51r ...
; LPVOID lpTlsValue
lpTlsValue      dd ?                    ; DATA XREF: ___set_flsgetvalue+13r
                                        ; __mtinit+3Dw ...
dword_100858D4  dd ?                    ; DATA XREF: _CRT_INIT(x,x,x)+18Er
                                        ; __getptd_noexit+38r ...
dword_100858D8  dd ?                    ; DATA XREF: __mtterm+Br __mtinit+5Ew ...
unk_100858DC    db    ? ;               ; DATA XREF: sub_1003E334+27o
                db    ? ;
                db    ? ;
                db    ? ;
; void *dword_100858E0
dword_100858E0  dd ?                    ; DATA XREF: sub_1003E334+22r
dword_100858E4  dd ?                    ; DATA XREF: unknown_libname_87+14r
                                        ; unknown_libname_87+29r ...
byte_100858E8   db 10h dup(   ?)        ; DATA XREF: __stbuf+46o
dword_100858F8  dd ?                    ; DATA XREF: __purecallr
                                        ; sub_10040D25+4w
dword_100858FC  dd 9 dup(   ?)          ; DATA XREF: _isdigitr _strtol+5r ...
dword_10085920  dd ?                    ; DATA XREF: getSystemCP(int)+15w
                                        ; getSystemCP(int)+1Dw ...
word_10085924   dw ?                    ; DATA XREF: __setmbcp+E7w
                align 10h
dword_10085930  dd ?                    ; DATA XREF: __setmbcp+C3w
dword_10085934  dd ?                    ; DATA XREF: __setmbcp+CBw
dword_10085938  dd ?                    ; DATA XREF: __setmbcp+D3w
                align 10h

dword_100859EC  dd ?                    ; DATA XREF: __tzset_nolock+8Cw
                                        ; __tzset_nolock+15Dw ...
; void *dword_100859F0
dword_100859F0  dd ?                    ; DATA XREF: __tzset_nolock+B9r
                                        ; __tzset_nolock+D3r ...
dword_100859F4  dd ?                    ; DATA XREF: ___tzset+Er ___tzset+21r ...
; char byte_100859F8[260]
byte_100859F8   db 104h dup(?)          ; DATA XREF: __setargv+1Do
byte_10085AFC   db ?                    ; DATA XREF: __setargv+24w
                align 10h
dword_10085B00  dd ?                    ; DATA XREF: ___crtGetEnvironmentStringsA+2r
                                        ; ___crtGetEnvironmentStringsA+24w ...
dword_10085B04  dd ?                    ; DATA XREF: __initp_misc_winsig+4w
                                        ; _raise:loc_10043E3Fo ...
dword_10085B08  dd ?                    ; DATA XREF: __initp_misc_winsig+9w
                                        ; _raise:loc_10043E95o ...
dword_10085B0C  dd ?                    ; DATA XREF: __initp_misc_winsig+Ew
                                        ; sub_10043DE9r ...
dword_10085B10  dd ?                    ; DATA XREF: __initp_misc_winsig+13w
                                        ; _raise:loc_10043EA1o ...
                align 8
dword_10085B18  dd ?                    ; DATA XREF: sub_1003C09B:loc_1003C0C3r
dword_10085B1C  dd ?                    ; DATA XREF: sub_1004459B+4w
                                        ; ___crtInitCritSecAndSpinCount+11r ...
dword_10085B20  dd ?                    ; DATA XREF: _inconsistency(void)+Cr
                                        ; __initp_eh_hooks+Bw
dword_10085B24  dd ?                    ; DATA XREF: sub_1004470E+4w
dword_10085B28  dd ?                    ; DATA XREF: sub_10044718+10r
                                        ; sub_10044718+61w ...
dword_10085B2C  dd ?                    ; DATA XREF: sub_10044718+76w
                                        ; sub_10044718:loc_10044873r
dword_10085B30  dd ?                    ; DATA XREF: sub_10044718+83w
                                        ; sub_10044718+179r
dword_10085B34  dd ?                    ; DATA XREF: sub_10044718+D1w
                                        ; sub_10044718:loc_100447EEr
dword_10085B38  dd 10h dup(   ?)        ; DATA XREF: sub_10044718+BBw
                                        ; sub_10044718+E2r ...
dword_10085B78  dd ?                    ; DATA XREF: __wopenfile+Dr
                                        ; __openfile+6r
dword_10085B7C  dd ?                    ; DATA XREF: __crtGetStringTypeA_stat(localeinfo_struct *,ulong,char const *,int,ushort *,int,int,int)+Fr
                                        ; __crtGetStringTypeA_stat(localeinfo_struct *,ulong,char const *,int,ushort *,int,int,int)+37w ...
dword_10085B80  dd ?                    ; DATA XREF: unknown_libname_99+14r
                                        ; unknown_libname_99+3Aw ...
byte_10085B84   db ?                    ; DATA XREF: __cftoe2_l:loc_10043362r
                align 4
dword_10085B88  dd ?                    ; DATA XREF: unknown_libname_102+18r
                                        ; unknown_libname_102+41w ...
dword_10085B8C  dd ?                    ; DATA XREF: unknown_libname_104:loc_1004A371r
                                        ; unknown_libname_104+45w ...
dword_10085B90  dd ?                    ; DATA XREF: unknown_libname_106+1Ar
                                        ; unknown_libname_106+3Aw ...
                align 8
byte_10085BF8   db 24h dup(   ?)        ; DATA XREF: std::_Init_locks::_Init_locks(void)+21o
                                        ; sub_1004C20C-166Ao ...
byte_10085C1C   db 68h dup(   ?)        ; DATA XREF: sub_1004C216o
dword_10085C84  dd ?                    ; DATA XREF: _Init_atexit::~_Init_atexit(void)+13r
dword_10085C88  dd 0Ah dup(?)           ; DATA XREF: _Init_atexit::~_Init_atexit(void):loc_1004AC0Er
unk_10085CB0    db    ? ;               ; DATA XREF: sub_1004C1D6o
                                        ; sub_1004C220o
byte_10085CB1   db 7 dup(   ?)          ; DATA XREF: sub_1004C22Ao
; volatile LONG Target
Target          dd 3Eh dup(?)           ; DATA XREF: __ReleaseCPLocHash+3o
byte_10085DB0   db 68h dup(?)           ; DATA XREF: __ReleaseCPLocHash+32o
dword_10085E18  dd ?                    ; DATA XREF: BDDiscCopy(x)+55r
                                        ; new8d24Obj+23r ...
dword_10085E1C  dd ?                    ; DATA XREF: sub_10007540+27w
dword_10085E20  dd ?                    ; DATA XREF: sub_1000A080+22w
byte_10085E24   db ?                    ; DATA XREF: sub_100078E0+C9r
                                        ; sub_10012980+3r ...
                db 10Fh dup(?)
dword_10085F34  dd ?                    ; DATA XREF: __sse2_mathfcns_initw
                                        ; __sse2_mathfcns_init+Cw
dword_10085F38  dd ?                    ; DATA XREF: unknown_libname_4+28r
                                        ; _memset+1Er ...
; UINT uNumber
uNumber         dd ?                    ; DATA XREF: __setmode+6Fr
                                        ; __ioinit+3Cw ...
dword_10085F40  dd ?                    ; DATA XREF: ___initstdio+87r
                                        ; _fprintf+83o ...
                db 0FCh dup(?)
dword_10086040  dd ?                    ; DATA XREF: sub_1003DB87w
                                        ; __ioterm+41o
dword_10086044  dd ?                    ; DATA XREF: _getenvr __setenvp+B3w
dword_10086048  dd ?                    ; DATA XREF: _doexit+45r
                                        ; __onexit_nolock+10r ...
dword_1008604C  dd ?                    ; DATA XREF: _doexit+37r
                                        ; __onexit_nolock+5r ...
dword_10086050  dd ?                    ; DATA XREF: ___initmbctabler
                                        ; ___initmbctable+11w ...
dword_10086054  dd ?                    ; DATA XREF: __cinit:loc_1003D80Br
                                        ; __cinit+74o ...
dword_10086058  dd ?                    ; DATA XREF: _malloc:loc_10038119r
                                        ; _free+13r ...
dword_1008605C  dd ?                    ; DATA XREF: ___sbh_heap_init+28w
                                        ; ___sbh_find_blockr ...
; LPVOID lpMem
lpMem           dd ?                    ; DATA XREF: ___sbh_heap_init+15w
                                        ; ___sbh_find_block+6r ...
dword_10086064  dd ?                    ; DATA XREF: _V6_HeapAlloc+13r
                                        ; __calloc_impl+72r ...
dword_10086068  dd ?                    ; DATA XREF: ___sbh_heap_init+2Fw
                                        ; ___sbh_free_block+2FCw ...
dword_1008606C  dd ?                    ; DATA XREF: ___sbh_heap_init+3Cw
                                        ; ___sbh_alloc_new_regionr ...
dword_10086070  dd ?                    ; DATA XREF: ___sbh_free_block+229r
                                        ; ___sbh_free_block+249r ...
dword_10086074  dd ?                    ; DATA XREF: _CRT_INIT(x,x,x)+DBw
                                        ; __setargv+30r
; void *dword_10086078
dword_10086078  dd ?                    ; DATA XREF: ___initstdio+2Bw
                                        ; ___initstdio+44w ...
                align 10h
byte_10086080   db 1000h dup(   ?)      ; DATA XREF: .data:off_1006C3ECo
; size_t dword_10087080
dword_10087080  dd ?                    ; DATA XREF: ___initstdior
                                        ; ___initstdio:loc_10038881w ...


unk_100613A8    db    3                 ; DATA XREF: .rdata:100613C4o
                db    0
                db    0
                db    0
                dd offset unk_1006138C
                dd offset unk_10061370
                dd offset unk_10061354
unk_10060684    db    0                 ; DATA XREF: .rdata:1005D218o
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd offset off_1006D894
                dd offset unk_10060698

unk_10060720    db    0                 ; DATA XREF: .rdata:1005D20Co
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd offset off_10084864
                dd offset byte_10060734

off_1005D204    dd offset sub_10002650  ; DATA XREF: sub_10002590+36o
                                        ; sub_10002610+3o ...
                dd offset unknown_libname_1 ; Microsoft VisualC 2-9/net runtime
                dd offset unk_10060720

off_1005D210    dd offset sub_10002650  ; DATA XREF: .text:100042C8o
                                        ; sub_100042E0+Do ...
                dd offset unknown_libname_1 ; Microsoft VisualC 2-9/net runtime
                dd offset unk_10060684

unk_100613B8    db    0                 ; DATA XREF: .text:100042BEo
                                        ; sub_100128E0+6Do ...
                db    0
                db    0
                db    0
                dd offset sub_10002610
                db    0
                db    0
                db    0
                db    0
                dd offset unk_100613A8

gs_cookie_magic1  dd 0BB40E64Eh 
gs_cookie_magic2  dd 44BF19B1h
                db    3                 ; DATA XREF: _abort+1Br
                                        ; _abort:loc_1003BB40r ...
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0


unk_1005D370    db    1                 ; DATA XREF: sub_1000F0E0+4Eo
                db  23h ; #
                db  45h ; E
                db  67h ; g
                db  89h ; ?
                db 0ABh ; ?
                db 0CDh ; ?
                db 0EFh ; ?

byte_10059380   db 88h, 6Ah, 3Fh, 24h, 0D3h, 8, 0A3h, 85h, 2Eh, 8Ah, 19h, 13h, 44h, 73h, 70h, 3, 22h, 38h, 9, 0A4h
                                        ; DATA XREF: sub_10025E10+15o
                db 0D0h, 31h, 9Fh, 29h, 98h, 0FAh, 2Eh, 8, 89h, 6Ch, 4Eh, 0ECh, 0E6h, 21h, 28h, 45h, 77h, 13h, 0D0h, 38h
                db 0CFh, 66h, 54h, 0BEh, 6Ch, 0Ch, 0E9h, 34h, 0B7h, 29h, 0ACh, 0C0h, 0DDh, 50h, 7Ch, 0C9h, 0B5h, 0D5h, 84h, 3Fh
                db 17h, 9, 47h, 0B5h, 0D9h, 0D5h, 16h, 92h, 1Bh, 0FBh, 79h, 89h, 0A6h, 0Bh, 31h, 0D1h, 0ACh, 0B5h, 0DFh, 98h
                db 0DBh, 72h, 0FDh, 2Fh, 0B7h, 0DFh, 1Ah, 0D0h, 0EDh, 0AFh, 0E1h, 0B8h, 96h, 7Eh, 26h, 6Ah, 45h, 90h, 7Ch, 0BAh
                db 99h, 7Fh, 2Ch, 0F1h, 47h, 99h, 0A1h, 24h, 0F7h, 6Ch, 91h, 0B3h, 0E2h, 0F2h, 1, 8, 16h, 0FCh, 8Eh, 85h
                db 0D8h, 20h, 69h, 63h, 69h, 4Eh, 57h, 71h, 0A3h, 0FEh, 58h, 0A4h, 7Eh, 3Dh, 93h, 0F4h, 8Fh, 74h, 95h, 0Dh
                db 58h, 0B6h, 8Eh, 72h, 58h, 0CDh, 8Bh, 71h, 0EEh, 4Ah, 15h, 82h, 1Dh, 0A4h, 54h, 7Bh, 0B5h, 59h, 5Ah, 0C2h
                db 39h, 0D5h, 30h, 9Ch, 13h, 60h, 0F2h, 2Ah, 23h, 0B0h, 0D1h, 0C5h, 0F0h, 85h, 60h, 28h, 18h, 79h, 41h, 0CAh
                db 0EFh, 38h, 0DBh, 0B8h, 0B0h, 0DCh, 79h, 8Eh, 0Eh, 18h, 3Ah, 60h, 8Bh, 0Eh, 9Eh, 6Ch, 3Eh, 8Ah, 1Eh, 0B0h
                db 0C1h, 77h, 15h, 0D7h, 27h, 4Bh, 31h, 0BDh, 0DAh, 2Fh, 0AFh, 78h, 60h, 5Ch, 60h, 55h, 0F3h, 25h, 55h, 0E6h
                db 94h, 0ABh, 55h, 0AAh, 62h, 98h, 48h, 57h, 40h, 14h, 0E8h, 63h, 6Ah, 39h, 0CAh, 55h, 0B6h, 10h, 0ABh, 2Ah
                db 34h, 5Ch, 0CCh, 0B4h, 0CEh, 0E8h, 41h, 11h, 0AFh, 86h, 54h, 0A1h, 93h, 0E9h, 72h, 7Ch, 11h, 14h, 0EEh, 0B3h
                db 2Ah, 0BCh, 6Fh, 63h, 5Dh, 0C5h, 0A9h, 2Bh, 0F6h, 31h, 18h, 74h, 16h, 3Eh, 5Ch, 0CEh, 1Eh, 93h, 87h, 9Bh
                db 33h, 0BAh, 0D6h, 0AFh, 5Ch, 0CFh, 24h, 6Ch, 81h, 53h, 32h, 7Ah, 77h, 86h, 95h, 28h, 98h, 48h, 8Fh, 3Bh
                db 0AFh, 0B9h, 4Bh, 6Bh, 1Bh, 0E8h, 0BFh, 0C4h, 93h, 21h, 28h, 66h, 0CCh, 9, 0D8h, 61h, 91h, 0A9h, 21h, 0FBh
                db 60h, 0ACh, 7Ch, 48h, 32h, 80h, 0ECh, 3 dup(5Dh), 84h, 0EFh, 0B1h, 75h, 85h, 0E9h, 2, 23h, 26h, 0DCh, 88h, 1Bh
                db 65h, 0EBh, 81h, 3Eh, 89h, 23h, 0C5h, 0ACh, 96h, 0D3h, 0F3h, 6Fh, 6Dh, 0Fh, 39h, 42h, 0F4h, 83h, 82h, 44h
                db 0Bh, 2Eh, 4, 20h, 84h, 0A4h, 4Ah, 0F0h, 0C8h, 69h, 5Eh, 9Bh, 1Fh, 9Eh, 42h, 68h, 0C6h, 21h, 9Ah, 6Ch
                db 0E9h, 0F6h, 61h, 9Ch, 0Ch, 67h, 0F0h, 88h, 0D3h, 0ABh, 0D2h, 0A0h, 51h, 6Ah, 68h, 2Fh, 54h, 0D8h, 28h, 0A7h
                db 0Fh, 96h, 0A3h, 33h, 51h, 0ABh, 6Ch, 0Bh, 0EFh, 6Eh, 0E4h, 3Bh, 7Ah, 13h, 50h, 0F0h, 3Bh, 0BAh, 98h, 2Ah
                db 0FBh, 7Eh, 1Dh, 65h, 0F1h, 0A1h, 76h, 1, 0AFh, 39h, 3Eh, 59h, 0CAh, 66h, 88h, 0Eh, 43h, 82h, 19h, 86h
                db 0EEh, 8Ch, 0B4h, 9Fh, 6Fh, 45h, 0C3h, 0A5h, 84h, 7Dh, 0BEh, 5Eh, 8Bh, 3Bh, 0D8h, 75h, 6Fh, 0E0h, 73h, 20h
                db 0C1h, 85h, 9Fh, 44h, 1Ah, 40h, 0A6h, 6Ah, 0C1h, 56h, 62h, 0AAh, 0D3h, 4Eh, 6, 77h, 3Fh, 36h, 72h, 0DFh
                db 0FEh, 1Bh, 3Dh, 2, 9Bh, 42h, 24h, 0D7h, 0D0h, 37h, 48h, 12h, 0Ah, 0D0h, 0D3h, 0EAh, 0Fh, 0DBh, 9Bh, 0C0h
                db 0F1h, 49h, 0C9h, 72h, 53h, 7, 7Bh, 1Bh, 99h, 80h, 0D8h, 79h, 0D4h, 25h, 0F7h, 0DEh, 0E8h, 0F6h, 1Ah, 50h
                db 0FEh, 0E3h, 3Bh, 4Ch, 79h, 0B6h, 0BDh, 0E0h, 6Ch, 97h, 0BAh, 6, 0C0h, 4, 0B6h, 4Fh, 0A9h, 0C1h, 0C4h, 60h
                db 9Fh, 40h, 0C2h, 9Eh, 5Ch, 5Eh, 63h, 24h, 6Ah, 19h, 0AFh, 6Fh, 0FBh, 68h, 0B5h, 53h, 6Ch, 3Eh, 0EBh, 0B2h
                db 39h, 13h, 6Fh, 0ECh, 52h, 3Bh, 1Fh, 51h, 0FCh, 6Dh, 2Ch, 95h, 30h, 9Bh, 44h, 45h, 81h, 0CCh, 9, 0BDh
                db 5Eh, 0AFh, 4, 0D0h, 0E3h, 0BEh, 0FDh, 4Ah, 33h, 0DEh, 7, 28h, 0Fh, 66h, 0B3h, 4Bh, 2Eh, 19h, 57h, 0A8h
                db 0CBh, 0C0h, 0Fh, 74h, 0C8h, 45h, 39h, 5Fh, 0Bh, 0D2h, 0DBh, 0FBh, 0D3h, 0B9h, 0BDh, 0C0h, 79h, 55h, 0Ah, 32h
                db 60h, 1Ah, 0C6h, 0, 0A1h, 0D6h, 79h, 72h, 2Ch, 40h, 0FEh, 25h, 9Fh, 67h, 0CCh, 0A3h, 1Fh, 0FBh, 0F8h, 0E9h
                db 0A5h, 8Eh, 0F8h, 22h, 32h, 0DBh, 0DFh, 16h, 75h, 3Ch, 15h, 6Bh, 61h, 0FDh, 0C8h, 1Eh, 50h, 2Fh, 0ABh, 52h
                db 5, 0ADh, 0FAh, 0B5h, 3Dh, 32h, 60h, 87h, 23h, 0FDh, 48h, 7Bh, 31h, 53h, 82h, 0DFh, 0, 3Eh, 0BBh, 57h
                db 5Ch, 9Eh, 0A0h, 8Ch, 6Fh, 0CAh, 2Eh, 56h, 87h, 1Ah, 0DBh, 69h, 17h, 0DFh, 0F6h, 0A8h, 42h, 0D5h, 0C3h, 0FFh
                db 7Eh, 28h, 0C6h, 32h, 67h, 0ACh, 73h, 55h, 4Fh, 8Ch, 0B0h, 27h, 5Bh, 69h, 0C8h, 58h, 0CAh, 0BBh, 5Dh, 0A3h
                db 0FFh, 0E1h, 0A0h, 11h, 0F0h, 0B8h, 98h, 3Dh, 0FAh, 10h, 0B8h, 83h, 21h, 0FDh, 6Ch, 0B5h, 0FCh, 4Ah, 5Bh, 0D3h
                db 0D1h, 2Dh, 79h, 0E4h, 53h, 9Ah, 65h, 45h, 0F8h, 0B6h, 0BCh, 49h, 8Eh, 0D2h, 90h, 97h, 0FBh, 4Bh, 0DAh, 0F2h
                db 0DDh, 0E1h, 33h, 7Eh, 0CBh, 0A4h, 41h, 13h, 0FBh, 62h, 0E8h, 0C6h, 0E4h, 0CEh, 0DAh, 0CAh, 20h, 0EFh, 1, 4Ch
                db 77h, 36h, 0FEh, 9Eh, 7Eh, 0D0h, 0B4h, 1Fh, 0F1h, 2Bh, 4Dh, 0DAh, 0DBh, 95h, 98h, 91h, 90h, 0AEh, 71h, 8Eh
                db 0ADh, 0EAh, 0A0h, 0D5h, 93h, 6Bh, 0D0h, 0D1h, 8Eh, 0D0h, 0E0h, 25h, 0C7h, 0AFh, 2Fh, 5Bh, 3Ch, 8Eh, 0B7h, 94h
                db 75h, 8Eh, 0FBh, 0E2h, 0F6h, 8Fh, 64h, 2Bh, 12h, 0F2h, 12h, 0B8h, 2 dup(88h), 1Ch, 0F0h, 0Dh, 90h, 0A0h, 5Eh, 0ADh
                db 4Fh, 1Ch, 0C3h, 8Fh, 68h, 91h, 0F1h, 0CFh, 0D1h, 0ADh, 0C1h, 0A8h, 0B3h, 18h, 22h, 2 dup(2Fh), 77h, 17h, 0Eh, 0BEh
                db 0FEh, 2Dh, 75h, 0EAh, 0A1h, 1Fh, 2, 8Bh, 0Fh, 0CCh, 0A0h, 0E5h, 0E8h, 74h, 6Fh, 0B5h, 0D6h, 0F3h, 0ACh, 18h
                db 99h, 0E2h, 89h, 0CEh, 0E0h, 4Fh, 0A8h, 0B4h, 0B7h, 0E0h, 13h, 0FDh, 81h, 3Bh, 0C4h, 7Ch, 0D9h, 0A8h, 0ADh, 0D2h
                db 66h, 0A2h, 5Fh, 16h, 5, 77h, 95h, 80h, 14h, 73h, 0CCh, 93h, 77h, 14h, 1Ah, 21h, 65h, 20h, 0ADh, 0E6h
                db 86h, 0FAh, 0B5h, 77h, 0F5h, 42h, 54h, 0C7h, 0CFh, 35h, 9Dh, 0FBh, 0Ch, 0AFh, 0CDh, 0EBh, 0A0h, 89h, 3Eh, 7Bh
                db 0D3h, 1Bh, 41h, 0D6h, 49h, 7Eh, 1Eh, 0AEh, 2Dh, 0Eh, 25h, 0, 5Eh, 0B3h, 71h, 20h, 0BBh, 0, 68h, 22h
                db 0AFh, 0E0h, 0B8h, 57h, 9Bh, 36h, 64h, 24h, 1Eh, 0B9h, 9, 0F0h, 1Dh, 91h, 63h, 55h, 0AAh, 0A6h, 0DFh, 59h
                db 89h, 43h, 0C1h, 78h, 7Fh, 53h, 5Ah, 0D9h, 0A2h, 5Bh, 7Dh, 20h, 0C5h, 0B9h, 0E5h, 2, 76h, 3, 26h, 83h
                db 0A9h, 0CFh, 95h, 62h, 68h, 19h, 0C8h, 11h, 41h, 4Ah, 73h, 4Eh, 0CAh, 2Dh, 47h, 0B3h, 4Ah, 0A9h, 14h, 7Bh
                db 52h, 0, 51h, 1Bh, 15h, 29h, 53h, 9Ah, 3Fh, 57h, 0Fh, 0D6h, 0E4h, 0C6h, 9Bh, 0BCh, 76h, 0A4h, 60h, 2Bh
                db 0, 74h, 0E6h, 81h, 0B5h, 6Fh, 0BAh, 8, 1Fh, 0E9h, 1Bh, 57h, 6Bh, 0ECh, 96h, 0F2h, 15h, 0D9h, 0Dh, 2Ah
                db 21h, 65h, 63h, 2 dup(0B6h), 0F9h, 0B9h, 0E7h, 2Eh, 5, 34h, 0FFh, 64h, 56h, 85h, 0C5h, 5Dh, 2Dh, 0B0h, 53h, 0A1h
                db 8Fh, 9Fh, 0A9h, 99h, 47h, 0BAh, 8, 6Ah, 7, 85h, 6Eh, 0E9h, 70h, 7Ah, 4Bh, 44h, 29h, 0B3h, 0B5h, 2Eh
                db 9, 75h, 0DBh, 23h, 26h, 19h, 0C4h, 0B0h, 0A6h, 6Eh, 0ADh, 7Dh, 0DFh, 0A7h, 49h, 0B8h, 60h, 0EEh, 9Ch, 66h
                db 0B2h, 0EDh, 8Fh, 71h, 8Ch, 0AAh, 0ECh, 0FFh, 17h, 9Ah, 69h, 6Ch, 52h, 64h, 56h, 0E1h, 9Eh, 0B1h, 0C2h, 0A5h
                db 2, 36h, 19h, 29h, 4Ch, 9, 75h, 40h, 13h, 59h, 0A0h, 3Eh, 3Ah, 18h, 0E4h, 9Ah, 98h, 54h, 3Fh, 65h
                db 9Dh, 42h, 5Bh, 0D6h, 0E4h, 8Fh, 6Bh, 0D6h, 3Fh, 0F7h, 99h, 7, 9Ch, 0D2h, 0A1h, 0F5h, 30h, 0E8h, 0EFh, 0E6h
                db 38h, 2Dh, 4Dh, 0C1h, 5Dh, 25h, 0F0h, 86h, 20h, 0DDh, 4Ch, 26h, 0EBh, 70h, 84h, 0C6h, 0E9h, 82h, 63h, 5Eh
                db 0CCh, 1Eh, 2, 3Fh, 6Bh, 68h, 9, 0C9h, 0EFh, 0BAh, 3Eh, 14h, 18h, 97h, 3Ch, 0A1h, 70h, 6Ah, 6Bh, 84h
                db 35h, 7Fh, 68h, 86h, 0E2h, 0A0h, 52h, 5, 53h, 9Ch, 0B7h, 37h, 7, 50h, 0AAh, 1Ch, 84h, 7, 3Eh, 5Ch
                db 0AEh, 0DEh, 7Fh, 0ECh, 44h, 7Dh, 8Eh, 0B8h, 0F2h, 16h, 57h, 37h, 0DAh, 3Ah, 0B0h, 0Dh, 0Ch, 50h, 0F0h, 4
                db 1Fh, 1Ch, 0F0h, 0FFh, 0B3h, 0, 2, 1Ah, 0F5h, 0Ch, 0AEh, 0B2h, 74h, 0B5h, 3Ch, 58h, 7Ah, 83h, 25h, 0BDh
                db 21h, 9, 0DCh, 0F9h, 13h, 91h, 0D1h, 0F6h, 2Fh, 0A9h, 7Ch, 73h, 47h, 32h, 94h, 1, 47h, 0F5h, 22h, 81h
                db 2 dup(0E5h), 3Ah, 0DCh, 0DAh, 0C2h, 37h, 34h, 76h, 0B5h, 0C8h, 0A7h, 0DDh, 0F3h, 9Ah, 46h, 61h, 44h, 0A9h, 0Eh, 3
                db 0D0h, 0Fh, 3Eh, 0C7h, 0C8h, 0ECh, 41h, 1Eh, 75h, 0A4h, 99h, 0CDh, 38h, 0E2h, 2Fh, 0Eh, 0EAh, 3Bh, 0A1h, 0BBh
                db 80h, 32h, 31h, 0B3h, 3Eh, 18h, 38h, 8Bh, 54h, 4Eh, 8, 0B9h, 6Dh, 4Fh, 3, 0Dh, 42h, 6Fh, 0BFh, 4
                db 0Ah, 0F6h, 90h, 12h, 0B8h, 2Ch, 79h, 7Ch, 97h, 24h, 72h, 0B0h, 79h, 56h, 0AFh, 89h, 0AFh, 0BCh, 1Fh, 77h
                db 9Ah, 0DEh, 10h, 8, 93h, 0D9h, 12h, 0AEh, 8Bh, 0B3h, 2Eh, 3Fh, 0CFh, 0DCh, 1Fh, 72h, 12h, 55h, 24h, 71h
                db 6Bh, 2Eh, 0E6h, 0DDh, 1Ah, 50h, 87h, 0CDh, 84h, 9Fh, 18h, 47h, 58h, 7Ah, 17h, 0DAh, 8, 74h, 0BCh, 9Ah
                db 9Fh, 0BCh, 8Ch, 7Dh, 4Bh, 0E9h, 3Ah, 0ECh, 7Ah, 0ECh, 0FAh, 1Dh, 85h, 0DBh, 66h, 43h, 9, 63h, 0D2h, 0C3h
                db 64h, 0C4h, 47h, 18h, 1Ch, 0EFh, 8, 0D9h, 15h, 32h, 37h, 3Bh, 43h, 0DDh, 16h, 0BAh, 0C2h, 24h, 43h, 4Dh
                db 0A1h, 12h, 51h, 0C4h, 65h, 2Ah, 2, 0, 94h, 50h, 0DDh, 0E4h, 3Ah, 13h, 9Eh, 0F8h, 0DFh, 71h, 55h, 4Eh
                db 31h, 10h, 0D6h, 77h, 0ACh, 81h, 9Bh, 19h, 11h, 5Fh, 0F1h, 56h, 35h, 4, 6Bh, 0C7h, 0A3h, 0D7h, 3Bh, 18h
                db 11h, 3Ch, 9, 0A5h, 24h, 59h, 0EDh, 0E6h, 8Fh, 0F2h, 0FAh, 0FBh, 0F1h, 97h, 2Ch, 0BFh, 0BAh, 9Eh, 6Eh, 3Ch
                db 15h, 1Eh, 70h, 45h, 0E3h, 86h, 0B1h, 6Fh, 0E9h, 0EAh, 0Ah, 5Eh, 0Eh, 86h, 0B3h, 2Ah, 3Eh, 5Ah, 1Ch, 0E7h
                db 1Fh, 77h, 0FAh, 6, 3Dh, 4Eh, 0B9h, 0DCh, 65h, 29h, 0Fh, 1Dh, 0E7h, 99h, 0D6h, 89h, 3Eh, 80h, 25h, 0C8h
                db 66h, 52h, 78h, 0C9h, 4Ch, 2Eh, 6Ah, 0B3h, 10h, 9Ch, 0BAh, 0Eh, 15h, 0C6h, 78h, 0EAh, 0E2h, 94h, 53h, 3Ch
                db 0FCh, 0A5h, 0F4h, 2Dh, 0Ah, 1Eh, 0A7h, 4Eh, 0F7h, 0F2h, 3Dh, 2Bh, 1Dh, 36h, 0Fh, 26h, 39h, 19h, 60h, 79h
                db 0C2h, 19h, 8, 0A7h, 23h, 52h, 0B6h, 12h, 13h, 0F7h, 6Eh, 0FEh, 0ADh, 0EBh, 66h, 1Fh, 0C3h, 0EAh, 95h, 45h
                db 0BCh, 0E3h, 83h, 0C8h, 7Bh, 0A6h, 0D1h, 37h, 7Fh, 0B1h, 28h, 0FFh, 8Ch, 1, 0EFh, 0DDh, 32h, 0C3h, 0A5h, 5Ah
                db 6Ch, 0BEh, 85h, 21h, 58h, 65h, 2, 98h, 0ABh, 68h, 0Fh, 0A5h, 0CEh, 0EEh, 3Bh, 95h, 2Fh, 0DBh, 0ADh, 7Dh
                db 0EFh, 2Ah, 84h, 2Fh, 6Eh, 5Bh, 28h, 0B6h, 21h, 15h, 70h, 61h, 7, 29h, 75h, 47h, 0DDh, 0ECh, 10h, 15h
                db 9Fh, 61h, 30h, 0A8h, 0CCh, 13h, 96h, 0BDh, 61h, 0EBh, 1Eh, 0FEh, 34h, 3, 0CFh, 63h, 3, 0AAh, 90h, 5Ch
                db 73h, 0B5h, 39h, 0A2h, 70h, 4Ch, 0Bh, 2 dup(9Eh), 0D5h, 14h, 0DEh, 0AAh, 0CBh, 0BCh, 86h, 0CCh, 0EEh, 0A7h, 2Ch, 62h
                db 60h, 0ABh, 5Ch, 0ABh, 9Ch, 6Eh, 84h, 0F3h, 0B2h, 0AFh, 1Eh, 8Bh, 64h, 0CAh, 0F0h, 0BDh, 19h, 0B9h, 69h, 23h
                db 0A0h, 50h, 0BBh, 5Ah, 65h, 32h, 5Ah, 68h, 40h, 0B3h, 0B4h, 2Ah, 3Ch, 0D5h, 0E9h, 9Eh, 31h, 0F7h, 0B8h, 21h
                db 0C0h, 19h, 0Bh, 54h, 9Bh, 99h, 0A0h, 5Fh, 87h, 7Eh, 99h, 0F7h, 95h, 0A8h, 7Dh, 3Dh, 62h, 9Ah, 88h, 37h
                db 0F8h, 77h, 2Dh, 0E3h, 97h, 5Fh, 93h, 0EDh, 11h, 81h, 12h, 68h, 16h, 29h, 88h, 35h, 0Eh, 0D6h, 1Fh, 0E6h
                db 0C7h, 0A1h, 0DFh, 0DEh, 96h, 99h, 0BAh, 58h, 78h, 0A5h, 84h, 0F5h, 57h, 63h, 72h, 22h, 1Bh, 0FFh, 0C3h, 83h
                db 9Bh, 96h, 46h, 0C2h, 1Ah, 0EBh, 0Ah, 0B3h, 0CDh, 54h, 30h, 2Eh, 53h, 0E4h, 48h, 0D9h, 8Fh, 28h, 31h, 0BCh
                db 6Dh, 0EFh, 0F2h, 0EBh, 58h, 0EAh, 0FFh, 0C6h, 34h, 61h, 0EDh, 28h, 0FEh, 73h, 3Ch, 7Ch, 0EEh, 0D9h, 14h, 4Ah
                db 5Dh, 0E3h, 0B7h, 64h, 0E8h, 14h, 5Dh, 10h, 42h, 0E0h, 13h, 3Eh, 20h, 0B6h, 0E2h, 0EEh, 45h, 0EAh, 0ABh, 0AAh
                db 0A3h, 15h, 4Fh, 6Ch, 0DBh, 0D0h, 4Fh, 0CBh, 0FAh, 42h, 0F4h, 42h, 0C7h, 0B5h, 0BBh, 6Ah, 0EFh, 1Dh, 3Bh, 4Fh
                db 65h, 5, 21h, 0CDh, 41h, 9Eh, 79h, 1Eh, 0D8h, 0C7h, 4Dh, 85h, 86h, 6Ah, 47h, 4Bh, 0E4h, 50h, 62h, 81h
                db 3Dh, 0F2h, 0A1h, 62h, 0CFh, 46h, 26h, 8Dh, 5Bh, 0A0h, 83h, 88h, 0FCh, 0A3h, 0B6h, 0C7h, 0C1h, 0C3h, 24h, 15h
                db 7Fh, 92h, 74h, 0CBh, 69h, 0Bh, 8Ah, 84h, 47h, 85h, 0B2h, 92h, 56h, 0, 0BFh, 5Bh, 9, 9Dh, 48h, 19h
                db 0ADh, 74h, 0B1h, 62h, 14h, 0, 0Eh, 82h, 23h, 2Ah, 8Dh, 42h, 58h, 0EAh, 0F5h, 55h, 0Ch, 3Eh, 0F4h, 0ADh
                db 1Dh, 61h, 70h, 3Fh, 23h, 92h, 0F0h, 72h, 33h, 41h, 7Eh, 93h, 8Dh, 0F1h, 0ECh, 5Fh, 0D6h, 0DBh, 3Bh, 22h
                db 6Ch, 59h, 37h, 0DEh, 7Ch, 60h, 74h, 0EEh, 0CBh, 0A7h, 0F2h, 85h, 40h, 6Eh, 32h, 77h, 0CEh, 84h, 80h, 7
                db 0A6h, 9Eh, 50h, 0F8h, 19h, 55h, 0D8h, 0EFh, 0E8h, 35h, 97h, 0D9h, 61h, 0AAh, 0A7h, 69h, 0A9h, 0C2h, 6, 0Ch
                db 0C5h, 0FCh, 0ABh, 4, 5Ah, 0DCh, 0CAh, 0Bh, 80h, 2Eh, 7Ah, 44h, 9Eh, 84h, 34h, 45h, 0C3h, 5, 67h, 0D5h
                db 0FDh, 0C9h, 9Eh, 1Eh, 0Eh, 0D3h, 0DBh, 73h, 0DBh, 0CDh, 88h, 55h, 10h, 79h, 0DAh, 5Fh, 67h, 40h, 43h, 67h
                db 0E3h, 65h, 34h, 0C4h, 0C5h, 0D8h, 38h, 3Eh, 71h, 9Eh, 0F8h, 28h, 3Dh, 20h, 0FFh, 6Dh, 0F1h, 0E7h, 21h, 3Eh
                db 15h, 4Ah, 3Dh, 0B0h, 8Fh, 2Bh, 9Fh, 0E3h, 0E6h, 0F7h, 0ADh, 83h, 0DBh, 68h, 5Ah, 3Dh, 0E9h, 0F7h, 40h, 81h
                db 94h, 1Ch, 26h, 4Ch, 0F6h, 34h, 29h, 69h, 94h, 0F7h, 20h, 15h, 41h, 0F7h, 0D4h, 2, 76h, 2Eh, 6Bh, 0F4h
                db 0BCh, 68h, 0, 0A2h, 0D4h, 71h, 24h, 8, 0D4h, 6Ah, 0F4h, 20h, 33h, 0B7h, 0D4h, 0B7h, 43h, 0AFh, 61h, 0
                db 50h, 2Eh, 0F6h, 39h, 1Eh, 46h, 45h, 24h, 97h, 74h, 4Fh, 21h, 14h, 40h, 88h, 8Bh, 0BFh, 1Dh, 0FCh, 95h
                db 4Dh, 0AFh, 91h, 0B5h, 96h, 0D3h, 0DDh, 0F4h, 70h, 45h, 2Fh, 0A0h, 66h, 0ECh, 9, 0BCh, 0BFh, 85h, 97h, 0BDh
                db 3, 0D0h, 6Dh, 0ACh, 7Fh, 4, 85h, 0CBh, 31h, 0B3h, 27h, 0EBh, 96h, 41h, 39h, 0FDh, 55h, 0E6h, 47h, 25h
                db 0DAh, 9Ah, 0Ah, 0CAh, 0ABh, 25h, 78h, 50h, 28h, 0F4h, 29h, 4, 53h, 0DAh, 86h, 2Ch, 0Ah, 0FBh, 6Dh, 0B6h
                db 0E9h, 62h, 14h, 0DCh, 68h, 0, 69h, 48h, 0D7h, 0A4h, 0C0h, 0Eh, 68h, 0EEh, 8Dh, 0A1h, 27h, 0A2h, 0FEh, 3Fh
                db 4Fh, 8Ch, 0ADh, 87h, 0E8h, 6, 0E0h, 8Ch, 0B5h, 0B6h, 0D6h, 0F4h, 7Ah, 7Ch, 1Eh, 0CEh, 0AAh, 0ECh, 5Fh, 37h
                db 0D3h, 99h, 0A3h, 78h, 0CEh, 42h, 2Ah, 6Bh, 40h, 35h, 9Eh, 0FEh, 20h, 0B9h, 85h, 0F3h, 0D9h, 0ABh, 0D7h, 39h
                db 0EEh, 8Bh, 4Eh, 12h, 3Bh, 0F7h, 0FAh, 0C9h, 1Dh, 56h, 18h, 6Dh, 4Bh, 31h, 66h, 0A3h, 26h, 0B2h, 97h, 0E3h
                db 0EAh, 74h, 0FAh, 6Eh, 3Ah, 32h, 43h, 5Bh, 0DDh, 0F7h, 0E7h, 41h, 68h, 0FBh, 20h, 78h, 0CAh, 4Eh, 0F5h, 0Ah
                db 0FBh, 97h, 0B3h, 0FEh, 0D8h, 0ACh, 56h, 40h, 45h, 27h, 95h, 48h, 0BAh, 2 dup(3Ah), 53h, 55h, 87h, 8Dh, 83h, 20h
                db 0B7h, 0A9h, 6Bh, 0FEh, 4Bh, 95h, 96h, 0D0h, 0BCh, 67h, 0A8h, 55h, 58h, 9Ah, 15h, 0A1h, 63h, 29h, 0A9h, 0CCh
                db 33h, 0DBh, 0E1h, 99h, 56h, 4Ah, 2Ah, 0A6h, 0F9h, 25h, 31h, 3Fh, 1Ch, 7Eh, 0F4h, 5Eh, 7Ch, 31h, 29h, 90h
                db 2, 0E8h, 0F8h, 0FDh, 70h, 2Fh, 27h, 4, 5Ch, 15h, 0BBh, 80h, 0E3h, 2Ch, 28h, 5, 48h, 15h, 0C1h, 95h
                db 22h, 6Dh, 0C6h, 0E4h, 3Fh, 13h, 0C1h, 48h, 0DCh, 86h, 0Fh, 0C7h, 0EEh, 0C9h, 0F9h, 7, 0Fh, 1Fh, 4, 41h
                db 0A4h, 79h, 47h, 40h, 17h, 6Eh, 88h, 5Dh, 0EBh, 51h, 5Fh, 32h, 0D1h, 0C0h, 9Bh, 0D5h, 8Fh, 0C1h, 0BCh, 0F2h
                db 64h, 35h, 11h, 41h, 34h, 78h, 7Bh, 25h, 60h, 9Ch, 2Ah, 60h, 0A3h, 0E8h, 0F8h, 0DFh, 1Bh, 6Ch, 63h, 1Fh
                db 0C2h, 0B4h, 12h, 0Eh, 9Eh, 32h, 0E1h, 2, 0D1h, 4Fh, 66h, 0AFh, 15h, 81h, 0D1h, 0CAh, 0E0h, 95h, 23h, 6Bh
                db 0E1h, 92h, 3Eh, 33h, 62h, 0Bh, 24h, 3Bh, 22h, 0B9h, 0BEh, 0EEh, 0Eh, 0A2h, 0B2h, 85h, 99h, 0Dh, 0BAh, 0E6h
                db 8Ch, 0Ch, 72h, 0DEh, 28h, 0F7h, 0A2h, 2Dh, 45h, 78h, 12h, 0D0h, 0FDh, 94h, 0B7h, 95h, 62h, 8, 7Dh, 64h
                db 0F0h, 0F5h, 0CCh, 0E7h, 6Fh, 0A3h, 49h, 54h, 0FAh, 48h, 7Dh, 87h, 27h, 0FDh, 9Dh, 0C3h, 1Eh, 8Dh, 3Eh, 0F3h
                db 41h, 63h, 47h, 0Ah, 74h, 0FFh, 2Eh, 99h, 0ABh, 6Eh, 6Fh, 3Ah, 37h, 0FDh, 0F8h, 0F4h, 60h, 0DCh, 12h, 0A8h
                db 0F8h, 0DDh, 0EBh, 0A1h, 4Ch, 0E1h, 1Bh, 99h, 0Dh, 6Bh, 6Eh, 0DBh, 10h, 55h, 7Bh, 0C6h, 37h, 2Ch, 67h, 6Dh
                db 3Bh, 0D4h, 65h, 27h, 4, 0E8h, 0D0h, 0DCh, 0C7h, 0Dh, 29h, 0F1h, 0A3h, 0FFh, 0, 0CCh, 92h, 0Fh, 39h, 0B5h
                db 0Bh, 0EDh, 0Fh, 69h, 0FBh, 9Fh, 7Bh, 66h, 9Ch, 7Dh, 0DBh, 0CEh, 0Bh, 0CFh, 91h, 0A0h, 0A3h, 5Eh, 15h, 0D9h
                db 88h, 2Fh, 13h, 0BBh, 24h, 0ADh, 5Bh, 51h, 0BFh, 79h, 94h, 7Bh, 0EBh, 0D6h, 3Bh, 76h, 0B3h, 2Eh, 39h, 37h
                db 79h, 59h, 11h, 0CCh, 97h, 0E2h, 26h, 80h, 2Dh, 31h, 2Eh, 0F4h, 0A7h, 0ADh, 42h, 68h, 3Bh, 2Bh, 6Ah, 0C6h
                db 0CCh, 4Ch, 75h, 12h, 1Ch, 0F1h, 2Eh, 78h, 37h, 42h, 12h, 6Ah, 0E7h, 51h, 92h, 0B7h, 0E6h, 0BBh, 0A1h, 6
                db 50h, 63h, 0FBh, 4Bh, 18h, 10h, 6Bh, 1Ah, 0FAh, 0EDh, 0CAh, 11h, 0D8h, 0BDh, 25h, 3Dh, 0C9h, 0C3h, 0E1h, 0E2h
                db 59h, 16h, 42h, 44h, 86h, 13h, 12h, 0Ah, 6Eh, 0ECh, 0Ch, 0D9h, 2Ah, 0EAh, 0ABh, 0D5h, 4Eh, 67h, 0AFh, 64h
                db 5Fh, 0A8h, 86h, 0DAh, 88h, 0E9h, 0BFh, 0BEh, 0FEh, 0C3h, 0E4h, 64h, 57h, 80h, 0BCh, 9Dh, 86h, 0C0h, 0F7h, 0F0h
                db 0F8h, 7Bh, 78h, 60h, 4Dh, 60h, 3, 60h, 46h, 83h, 0FDh, 0D1h, 0B0h, 1Fh, 38h, 0F6h, 4, 0AEh, 45h, 77h
                db 0CCh, 0FCh, 36h, 0D7h, 33h, 6Bh, 42h, 83h, 71h, 0ABh, 1Eh, 0F0h, 87h, 41h, 80h, 0B0h, 5Fh, 5Eh, 0, 3Ch
                db 0BEh, 57h, 0A0h, 77h, 24h, 0AEh, 0E8h, 0BDh, 99h, 42h, 46h, 55h, 61h, 2Eh, 58h, 0BFh, 8Fh, 0F4h, 58h, 4Eh
                db 0A2h, 0FDh, 0DDh, 0F2h, 38h, 0EFh, 74h, 0F4h, 0C2h, 0BDh, 89h, 87h, 0C3h, 0F9h, 66h, 53h, 74h, 8Eh, 0B3h, 0C8h
                db 55h, 0F2h, 75h, 0B4h, 0B9h, 0D9h, 0FCh, 46h, 61h, 26h, 0EBh, 7Ah, 84h, 0DFh, 1Dh, 8Bh, 79h, 0Eh, 6Ah, 84h
                db 0E2h, 95h, 5Fh, 91h, 8Eh, 59h, 6Eh, 46h, 70h, 57h, 0B4h, 20h, 91h, 55h, 0D5h, 8Ch, 4Ch, 0DEh, 2, 0C9h
                db 0E1h, 0ACh, 0Bh, 0B9h, 0D0h, 5, 82h, 0BBh, 48h, 62h, 0A8h, 11h, 9Eh, 0A9h, 74h, 75h, 0B6h, 19h, 7Fh, 0B7h
                db 9, 0DCh, 0A9h, 0E0h, 0A1h, 9, 2Dh, 66h, 33h, 46h, 32h, 0C4h, 2, 1Fh, 5Ah, 0E8h, 8Ch, 0BEh, 0F0h, 9
                db 25h, 0A0h, 99h, 4Ah, 10h, 0FEh, 6Eh, 2 dup(1Dh), 3Dh, 0B9h, 1Ah, 0DFh, 0A4h, 0A5h, 0Bh, 0Fh, 0F2h, 86h, 0A1h, 69h
                db 0F1h, 68h, 28h, 83h, 0DAh, 0B7h, 0DCh, 0FEh, 6, 39h, 57h, 9Bh, 0CEh, 0E2h, 0A1h, 52h, 7Fh, 0CDh, 4Fh, 1
                db 5Eh, 11h, 50h, 0FAh, 83h, 6, 0A7h, 0C4h, 0B5h, 2, 0A0h, 27h, 0D0h, 0E6h, 0Dh, 27h, 8Ch, 0F8h, 9Ah, 41h
                db 86h, 3Fh, 77h, 6, 4Ch, 60h, 0C3h, 0B5h, 6, 0A8h, 61h, 28h, 7Ah, 17h, 0F0h, 0E0h, 86h, 0F5h, 0C0h, 0AAh
                db 58h, 60h, 0, 62h, 7Dh, 0DCh, 30h, 0D7h, 9Eh, 0E6h, 11h, 63h, 0EAh, 38h, 23h, 94h, 0DDh, 0C2h, 53h, 34h
                db 16h, 2 dup(0C2h), 56h, 0EEh, 0CBh, 0BBh, 0DEh, 0B6h, 0BCh, 90h, 0A1h, 7Dh, 0FCh, 0EBh, 76h, 1Dh, 59h, 0CEh, 9, 0E4h
                db 5, 6Fh, 88h, 1, 7Ch, 4Bh, 3Dh, 0Ah, 72h, 39h, 24h, 7Ch, 92h, 7Ch, 5Fh, 72h, 0E3h, 86h, 0B9h, 9Dh
                db 4Dh, 72h, 0B4h, 5Bh, 0C1h, 1Ah, 0FCh, 0B8h, 9Eh, 0D3h, 78h, 55h, 54h, 0EDh, 0B5h, 0A5h, 0FCh, 8, 0D3h, 7Ch
                db 3Dh, 0D8h, 0C4h, 0Fh, 0ADh, 4Dh, 5Eh, 0EFh, 50h, 1Eh, 0F8h, 0E6h, 61h, 0B1h, 0D9h, 14h, 85h, 0A2h, 3Ch, 13h
                db 51h, 6Ch, 0E7h, 0C7h, 0D5h, 6Fh, 0C4h, 4Eh, 0E1h, 56h, 0CEh, 0BFh, 2Ah, 36h, 37h, 0C8h, 0C6h, 0DDh, 34h, 32h
                db 9Ah, 0D7h, 12h, 82h, 63h, 92h, 8Eh, 0FAh, 0Eh, 67h, 0E0h, 0, 60h, 40h, 37h, 0CEh, 39h, 3Ah, 0CFh, 0F5h
                db 0FAh, 0D3h, 37h, 77h, 0C2h, 0ABh, 1Bh, 2Dh, 0C5h, 5Ah, 9Eh, 67h, 0B0h, 5Ch, 42h, 37h, 0A3h, 4Fh, 40h, 27h
                db 82h, 0D3h, 0BEh, 9Bh, 0BCh, 99h, 9Dh, 8Eh, 11h, 0D5h, 15h, 73h, 0Fh, 0BFh, 7Eh, 1Ch, 2Dh, 0D6h, 7Bh, 0C4h
                db 0, 0C7h, 6Bh, 1Bh, 8Ch, 0B7h, 45h, 90h, 0A1h, 21h, 0BEh, 0B1h, 6Eh, 0B2h, 0B4h, 6Eh, 36h, 6Ah, 2Fh, 0ABh
                db 48h, 57h, 79h, 6Eh, 94h, 0BCh, 0D2h, 76h, 0A3h, 0C6h, 0C8h, 0C2h, 49h, 65h, 0EEh, 0F8h, 0Fh, 53h, 7Dh, 0DEh
                db 8Dh, 46h, 1Dh, 0Ah, 73h, 0D5h, 0C6h, 4Dh, 0D0h, 4Ch, 0DBh, 0BBh, 39h, 29h, 50h, 46h, 0BAh, 0A9h, 0E8h, 26h
                db 95h, 0ACh, 4, 0E3h, 5Eh, 0BEh, 0F0h, 0D5h, 0FAh, 0A1h, 9Ah, 51h, 2Dh, 6Ah, 0E2h, 8Ch, 0EFh, 63h, 22h, 0EEh
                db 86h, 9Ah, 0B8h, 0C2h, 89h, 0C0h, 0F6h, 2Eh, 24h, 43h, 0AAh, 3, 1Eh, 0A5h, 0A4h, 0D0h, 0F2h, 9Ch, 0BAh, 61h
                db 0C0h, 83h, 4Dh, 6Ah, 0E9h, 9Bh, 50h, 15h, 0E5h, 8Fh, 0D6h, 5Bh, 64h, 0BAh, 0F9h, 0A2h, 26h, 28h, 0E1h, 2 dup(3Ah)
                db 0A7h, 86h, 95h, 0A9h, 4Bh, 0E9h, 62h, 55h, 0EFh, 0D3h, 0EFh, 2Fh, 0C7h, 0DAh, 0F7h, 52h, 0F7h, 69h, 6Fh, 4
                db 3Fh, 59h, 0Ah, 0FAh, 77h, 15h, 0A9h, 0E4h, 80h, 1, 86h, 0B0h, 87h, 0ADh, 0E6h, 9, 9Bh, 93h, 0E5h, 3Eh
                db 3Bh, 5Ah, 0FDh, 90h, 0E9h, 97h, 0D7h, 34h, 9Eh, 0D9h, 0B7h, 0F0h, 2Ch, 51h, 8Bh, 2Bh, 2, 3Ah, 0ACh, 0D5h
                db 96h, 7Dh, 0A6h, 7Dh, 1, 0D6h, 3Eh, 0CFh, 0D1h, 28h, 2Dh, 7Dh, 7Ch, 0CFh, 25h, 9Fh, 1Fh, 9Bh, 0B8h, 0F2h
                db 0ADh, 72h, 0B4h, 0D6h, 5Ah, 4Ch, 0F5h, 88h, 5Ah, 71h, 0ACh, 29h, 0E0h, 0E6h, 0A5h, 19h, 0E0h, 0FDh, 0ACh, 0B0h
                db 47h, 9Bh, 0FAh, 93h, 0EDh, 8Dh, 0C4h, 0D3h, 0E8h, 0CCh, 57h, 3Bh, 28h, 29h, 66h, 0D5h, 0F8h, 28h, 2Eh, 13h
                db 79h, 91h, 1, 5Fh, 78h, 55h, 60h, 75h, 0EDh, 44h, 0Eh, 96h, 0F7h, 8Ch, 5Eh, 0D3h, 0E3h, 0D4h, 6Dh, 5
                db 15h, 0BAh, 6Dh, 0F4h, 88h, 25h, 61h, 0A1h, 3, 0BDh, 0F0h, 64h, 5, 15h, 9Eh, 0EBh, 0C3h, 0A2h, 57h, 90h
                db 3Ch, 0ECh, 1Ah, 27h, 97h, 2Ah, 7, 3Ah, 0A9h, 9Bh, 6Dh, 3Fh, 1Bh, 0F5h, 21h, 63h, 1Eh, 0FBh, 66h, 9Ch
                db 0F5h, 19h, 0F3h, 0DCh, 26h, 28h, 0D9h, 33h, 75h, 0F5h, 0FDh, 55h, 0B1h, 82h, 34h, 56h, 3, 0BBh, 3Ch, 0BAh
                db 8Ah, 11h, 77h, 51h, 28h, 0F8h, 0D9h, 0Ah, 0C2h, 67h, 51h, 0CCh, 0ABh, 5Fh, 92h, 0ADh, 0CCh, 51h, 17h, 0E8h
                db 4Dh, 8Eh, 0DCh, 30h, 38h, 62h, 58h, 9Dh, 37h, 91h, 0F9h, 20h, 93h, 0C2h, 90h, 7Ah, 0EAh, 0CEh, 7Bh, 3Eh
                db 0FBh, 64h, 0CEh, 21h, 51h, 32h, 0BEh, 4Fh, 77h, 7Eh, 0E3h, 0B6h, 0A8h, 46h, 3Dh, 29h, 0C3h, 69h, 53h, 0DEh
                db 48h, 80h, 0E6h, 13h, 64h, 10h, 8, 0AEh, 0A2h, 24h, 0B2h, 6Dh, 0DDh, 0FDh, 2Dh, 85h, 69h, 66h, 21h, 7
                db 9, 0Ah, 46h, 9Ah, 0B3h, 0DDh, 0C0h, 45h, 64h, 0CFh, 0DEh, 6Ch, 58h, 0AEh, 0C8h, 20h, 1Ch, 0DDh, 0F7h, 0BEh
                db 5Bh, 40h, 8Dh, 58h, 1Bh, 7Fh, 1, 0D2h, 0CCh, 0BBh, 0E3h, 0B4h, 6Bh, 7Eh, 6Ah, 0A2h, 0DDh, 45h, 0FFh, 59h
                db 3Ah, 44h, 0Ah, 35h, 3Eh, 0D5h, 0CDh, 0B4h, 0BCh, 0A8h, 0CEh, 0EAh, 72h, 0BBh, 84h, 64h, 0FAh, 0AEh, 12h, 66h
                db 8Dh, 47h, 6Fh, 3Ch, 0BFh, 63h, 0E4h, 9Bh, 0D2h, 9Eh, 5Dh, 2Fh, 54h, 1Bh, 77h, 0C2h, 0AEh, 70h, 63h, 4Eh
                db 0F6h, 8Dh, 0Dh, 0Eh, 74h, 57h, 13h, 5Bh, 0E7h, 71h, 16h, 72h, 0F8h, 5Dh, 7Dh, 53h, 0AFh, 8, 0CBh, 2 dup(40h)
                db 0CCh, 0E2h, 0B4h, 4Eh, 6Ah, 46h, 0D2h, 34h, 84h, 0AFh, 15h, 1, 28h, 4, 0B0h, 0E1h, 1Dh, 3Ah, 98h, 95h
                db 0B4h, 9Fh, 0B8h, 6, 48h, 0A0h, 6Eh, 0CEh, 82h, 3Bh, 3Fh, 6Fh, 82h, 0ABh, 20h, 35h, 4Bh, 1Dh, 1Ah, 1
                db 0F8h, 27h, 72h, 27h, 0B1h, 60h, 15h, 61h, 0DCh, 3Fh, 93h, 0E7h, 2Bh, 79h, 3Ah, 0BBh, 0BDh, 25h, 45h, 34h
                db 0E1h, 39h, 88h, 0A0h, 4Bh, 79h, 0CEh, 51h, 0B7h, 0C9h, 32h, 2Fh, 0C9h, 0BAh, 1Fh, 0A0h, 7Eh, 0C8h, 1Ch, 0E0h
                db 0F6h, 0D1h, 0C7h, 0BCh, 0C3h, 11h, 1, 0CFh, 0C7h, 0AAh, 0E8h, 0A1h, 49h, 87h, 90h, 1Ah, 9Ah, 0BDh, 4Fh, 0D4h
                db 0CBh, 0DEh, 0DAh, 0D0h, 38h, 0DAh, 0Ah, 0D5h, 2Ah, 0C3h, 39h, 3, 67h, 36h, 91h, 0C6h, 7Ch, 31h, 0F9h, 8Dh
                db 4Fh, 2Bh, 0B1h, 0E0h, 0B7h, 59h, 9Eh, 0F7h, 3Ah, 0BBh, 0F5h, 43h, 0FFh, 19h, 0D5h, 0F2h, 9Ch, 45h, 0D9h, 27h
                db 2Ch, 22h, 97h, 0BFh, 2Ah, 0FCh, 0E6h, 15h, 71h, 0FCh, 91h, 0Fh, 25h, 15h, 94h, 9Bh, 61h, 93h, 0E5h, 0FAh
                db 0EBh, 9Ch, 0B6h, 0CEh, 59h, 64h, 0A8h, 0C2h, 0D1h, 0A8h, 0BAh, 12h, 5Eh, 7, 0C1h, 0B6h, 0Ch, 6Ah, 5, 0E3h
                db 65h, 50h, 0D2h, 10h, 42h, 0A4h, 3, 0CBh, 0Eh, 6Eh, 0ECh, 0E0h, 3Bh, 0DBh, 98h, 16h, 0BEh, 0A0h, 98h, 4Ch
                db 64h, 0E9h, 78h, 2 dup(32h), 95h, 1Fh, 9Fh, 0DFh, 92h, 0D3h, 0E0h, 2Bh, 34h, 0A0h, 0D3h, 1Eh, 0F2h, 71h, 89h, 41h
                db 74h, 0Ah, 1Bh, 8Ch, 34h, 0A3h, 4Bh, 20h, 71h, 0BEh, 0C5h, 0D8h, 32h, 76h, 0C3h, 8Dh, 9Fh, 35h, 0DFh, 2Eh
                db 2Fh, 99h, 9Bh, 47h, 6Fh, 0Bh, 0E6h, 1Dh, 0F1h, 0E3h, 0Fh, 54h, 0DAh, 4Ch, 0E5h, 91h, 0D8h, 0DAh, 1Eh, 0CFh
                db 79h, 62h, 0CEh, 6Fh, 7Eh, 3Eh, 0CDh, 66h, 0B1h, 18h, 16h, 5, 1Dh, 2Ch, 0FDh, 0C5h, 0D2h, 8Fh, 84h, 99h
                db 22h, 0FBh, 0F6h, 57h, 0F3h, 23h, 0F5h, 23h, 76h, 32h, 0A6h, 31h, 35h, 0A8h, 93h, 2, 0CDh, 0CCh, 56h, 62h
                db 81h, 0F0h, 0ACh, 0B5h, 0EBh, 75h, 5Ah, 97h, 36h, 16h, 6Eh, 0CCh, 73h, 0D2h, 88h, 92h, 62h, 96h, 0DEh, 0D0h
                db 49h, 0B9h, 81h, 1Bh, 90h, 50h, 4Ch, 14h, 56h, 0C6h, 71h, 0BDh, 0C7h, 0C6h, 0E6h, 0Ah, 14h, 7Ah, 32h, 6
                db 0D0h, 0E1h, 45h, 9Ah, 7Bh, 0F2h, 0C3h, 0FDh, 53h, 0AAh, 0C9h, 0, 0Fh, 0A8h, 62h, 0E2h, 0BFh, 25h, 0BBh, 0F6h
                db 0D2h, 0BDh, 35h, 5, 69h, 12h, 71h, 22h, 2, 4, 0B2h, 7Ch, 0CFh, 0CBh, 0B6h, 2Bh, 9Ch, 76h, 0CDh, 0C0h
                db 3Eh, 11h, 53h, 0D3h, 0E3h, 40h, 16h, 60h, 0BDh, 0ABh, 38h, 0F0h, 0ADh, 47h, 25h, 9Ch, 20h, 38h, 0BAh, 76h
                db 0CEh, 46h, 0F7h, 0C5h, 0A1h, 0AFh, 77h, 2 dup(60h), 75h, 20h, 4Eh, 0FEh, 0CBh, 85h, 0D8h, 8Dh, 0E8h, 8Ah, 0B0h, 0F9h
                db 0AAh, 7Ah, 7Eh, 0AAh, 0F9h, 4Ch, 5Ch, 0C2h, 48h, 19h, 8Ch, 8Ah, 0FBh, 2, 0E4h, 6Ah, 0C3h, 1, 0F9h, 0E1h
                db 0EBh, 0D6h, 69h, 0F8h, 0D4h, 90h, 0A0h, 0DEh, 5Ch, 0A6h, 2Dh, 25h, 9, 3Fh, 9Fh, 0E6h, 8, 0C2h, 32h, 61h
                db 4Eh, 0B7h, 5Bh, 0E2h, 77h, 0CEh, 0E3h, 0DFh, 8Fh, 57h, 0E6h, 72h, 0C3h, 3Ah, 52h, 41h, 4Eh, 44h, 20h, 70h
                db 61h, 72h, 74h, 20h, 6Fh, 66h, 20h, 4Fh, 70h, 65h, 6Eh, 2 dup(53h), 4Ch, 20h, 30h, 2Eh, 39h, 2Eh, 38h, 6Eh
                db 20h, 32h, 34h, 20h, 4Dh, 61h, 72h, 20h, 32h, 30h, 31h, 30h, 0


byte_1004D80C   db 5Ch, 3 dup(0), 8, 3 dup(0), 10h, 7 dup(0), 9, 3 dup(0)
                                        ; DATA XREF: EVP_bf_ecbo
                dd offset sub_10017E50
                dd offset sub_10017DB0
                db    0
                db    0
                db    0
                db    0
                db  48h ; H
                db  10h
                db    0
                db    0
                dd offset sub_10017A60
                dd offset sub_100179F0
                align 10h
aSha1PartOfOpen db 'SHA1 part of OpenSSL 0.9.8n 24 Mar 2010',0
a_CryptoEngineT db '.\crypto\engine\tb_digest.c',0 ; DATA XREF: sub_10018500+28o
a_CryptoEngineE db '.\crypto\engine\eng_init.c',0 ; DATA XREF: sub_10018580+22o

a_CryptoBnBn_gf db '.\crypto\bn\bn_gf2m.c',0 ; DATA XREF: sub_10032C70+1Eo
                                        ; sub_10032C70+71o ...
                align 4
a_CryptoEngin_2 db '.\crypto\engine\tb_cipher.c',0 ; DATA XREF: sub_10033260+28o
                align 8

a_CryptoEcEc2_s db '.\crypto\ec\ec2_smpl.c',0 ; DATA XREF: sub_100233C0+41o
                                        ; sub_10023570+21o ...
                align 4
aDCfilesProject db 'd:\cfiles\projects\winssl\openssl-0.9.8n\crypto\ec\ec2_smpt.c',0
                                        ; DATA XREF: sub_10023830+2o
                align 4
a_CryptoAsn1Evp db '.\crypto\asn1\evp_asn1.c',0 ; DATA XREF: sub_100246F0+37o
                align 4
a_CryptoEvpEnc_ db '.\crypto\evp\enc_min.c',0 ; DATA XREF: sub_10024770:loc_10024789o
                                        ; sub_10024860+Fo ...
                align 4
aEvp_cipher_ctx db 'EVP_CIPHER_CTX_iv_length(ctx) <= (int)sizeof(ctx->iv)',0
                                        ; DATA XREF: sub_10024900+17Fo
                align 8
aCtxCipherBlock db 'ctx->cipher->block_size == 1 || ctx->cipher->block_size == 8 || c'
                                        ; DATA XREF: sub_10024900+13Fo
                db 'tx->cipher->block_size == 16',0
                align 4
a_CryptoAsn1A_o db '.\crypto\asn1\a_object.c',0 ; DATA XREF: sub_10024B90+51o
                                        ; sub_10024B90+69o ...
                align 4
aNull_1         db 'NULL',0             ; DATA XREF: .data:off_10066C38o
                                        ; .data:10066C3Co ...
                align 4
aDmdname        db 'dmdName',0          ; DATA XREF: .data:off_10069B00o
                                        ; .data:10069B04o
aDeltarevocatio db 'deltaRevocationList',0 ; DATA XREF: .data:off_10069AE8o
                                        ; .data:10069AECo
aSupportedalgor db 'supportedAlgorithms',0 ; DATA XREF: .data:off_10069AD0o
                                        ; .data:10069AD4o
aHouseidentifie db 'houseIdentifier',0  ; DATA XREF: .data:off_10069AB8o
                                        ; .data:10069ABCo
aUniquemember   db 'uniqueMember',0     ; DATA XREF: .data:off_10069AA0o
                                        ; .data:10069AA4o
                align 4
aDistinguishedn db 'distinguishedName',0 ; DATA XREF: .data:off_10069A88o
                                        ; .data:10069A8Co
                align 10h
aProtocolinform db 'protocolInformation',0 ; DATA XREF: .data:off_10069A70o
                                        ; .data:10069A74o
aEnhancedsearch db 'enhancedSearchGuide',0 ; DATA XREF: .data:off_10069A58o
                                        ; .data:10069A5Co
aCrosscertifica db 'crossCertificatePair',0 ; DATA XREF: .data:off_10069A40o
                                        ; .data:10069A44o
                align 10h
aCertificaterev db 'certificateRevocationList',0 ; DATA XREF: .data:off_10069A28o
                                        ; .data:10069A2Co
                align 4
aAuthorityrevoc db 'authorityRevocationList',0 ; DATA XREF: .data:off_10069A10o
                                        ; .data:10069A14o
aCacertificate  db 'cACertificate',0    ; DATA XREF: .data:off_100699F8o
                                        ; .data:100699FCo
                align 4
aUsercertificat db 'userCertificate',0  ; DATA XREF: .data:off_100699E0o
                                        ; .data:100699E4o
aUserpassword   db 'userPassword',0     ; DATA XREF: .data:off_100699C8o
                                        ; .data:100699CCo
                align 4
aSeealso        db 'seeAlso',0          ; DATA XREF: .data:off_100699B0o
                                        ; .data:100699B4o
aRoleoccupant   db 'roleOccupant',0     ; DATA XREF: .data:off_10069998o
                                        ; .data:1006999Co
                align 4
aOwner          db 'owner',0            ; DATA XREF: .data:off_10069980o
                                        ; .data:10069984o
                align 4
aMember         db 'member',0           ; DATA XREF: .data:off_10069968o
                                        ; .data:1006996Co
                align 4
aSupportedappli db 'supportedApplicationContext',0 ; DATA XREF: .data:off_10069950o
                                        ; .data:10069954o
aPresentationad db 'presentationAddress',0 ; DATA XREF: .data:off_10069938o
                                        ; .data:1006993Co
aPreferreddeliv db 'preferredDeliveryMethod',0 ; DATA XREF: .data:off_10069920o
                                        ; .data:10069924o
aDestinationind db 'destinationIndicator',0 ; DATA XREF: .data:off_10069908o
                                        ; .data:1006990Co
                align 4
aRegisteredaddr db 'registeredAddress',0 ; DATA XREF: .data:off_100698F0o
                                        ; .data:100698F4o
                align 10h
aInternationali db 'internationaliSDNNumber',0 ; DATA XREF: .data:off_100698D8o
                                        ; .data:100698DCo
aX121address    db 'x121Address',0      ; DATA XREF: .data:off_100698C0o
                                        ; .data:100698C4o
aFacsimiletelep db 'facsimileTelephoneNumber',0 ; DATA XREF: .data:off_100698A8o
                                        ; .data:100698ACo
                align 10h
aTeletextermina db 'teletexTerminalIdentifier',0 ; DATA XREF: .data:off_10069890o
                                        ; .data:10069894o
                align 4
aTelexnumber    db 'telexNumber',0      ; DATA XREF: .data:off_10069878o
                                        ; .data:1006987Co
aTelephonenumbe db 'telephoneNumber',0  ; DATA XREF: .data:off_10069860o
                                        ; .data:10069864o
aPhysicaldelive db 'physicalDeliveryOfficeName',0 ; DATA XREF: .data:off_10069848o
                                        ; .data:1006984Co
                align 4
aPostofficebox  db 'postOfficeBox',0    ; DATA XREF: .data:off_10069830o
                                        ; .data:10069834o
                align 4
aPostaladdress  db 'postalAddress',0    ; DATA XREF: .data:off_10069818o
                                        ; .data:1006981Co
                align 4
aBusinesscatego db 'businessCategory',0 ; DATA XREF: .data:off_10069800o
                                        ; .data:10069804o
                align 4
aSearchguide    db 'searchGuide',0      ; DATA XREF: .data:off_100697E8o
                                        ; .data:100697ECo
aPermanentIdent db 'Permanent Identifier',0 ; DATA XREF: .data:100697D4o
                align 4
aIdOnPermanenti db 'id-on-permanentIdentifier',0 ; DATA XREF: .data:off_100697D0o
                align 4
aX509v3Freshest db 'X509v3 Freshest CRL',0 ; DATA XREF: .data:100697BCo
aFreshestcrl    db 'freshestCRL',0      ; DATA XREF: .data:off_100697B8o
aMicrosoftLocal db 'Microsoft Local Key set',0 ; DATA XREF: .data:100697A4o
aLocalkeyset    db 'LocalKeySet',0      ; DATA XREF: .data:off_100697A0o
aHmac           db 'hmac',0             ; DATA XREF: .data:1006978Co
                align 4
aHmac_0         db 'HMAC',0             ; DATA XREF: .data:off_10069788o
                align 4
aGostR34102001P db 'GOST R 3410-2001 Parameter Set Cryptocom',0 ; DATA XREF: .data:10069774o
                align 4
aIdGostr3410200 db 'id-GostR3410-2001-ParamSet-cc',0 ; DATA XREF: .data:off_10069770o
                align 4
aGostR34_1194Wi db 'GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom',0
                                        ; DATA XREF: .data:1006975Co
                align 4
aIdGostr341194W db 'id-GostR3411-94-with-GostR3410-2001-cc',0
                                        ; DATA XREF: .data:off_10069758o
                align 4
aGostR34_1194_0 db 'GOST R 34.11-94 with GOST R 34.10-94 Cryptocom',0
                                        ; DATA XREF: .data:10069744o
                align 4
aIdGostr34119_0 db 'id-GostR3411-94-with-GostR3410-94-cc',0 ; DATA XREF: .data:off_10069740o
                align 4
aGost34_102001C db 'GOST 34.10-2001 Cryptocom',0 ; DATA XREF: .data:1006972Co
                align 4
aGost2001cc     db 'gost2001cc',0       ; DATA XREF: .data:off_10069728o
                align 4
aGost34_1094Cry db 'GOST 34.10-94 Cryptocom',0 ; DATA XREF: .data:10069714o
aGost94cc       db 'gost94cc',0         ; DATA XREF: .data:off_10069710o
                align 4
aGost2814789Cry db 'GOST 28147-89 Cryptocom ParamSet',0 ; DATA XREF: .data:100696FCo
                align 4
aIdGost2814789C db 'id-Gost28147-89-cc',0 ; DATA XREF: .data:off_100696F8o
                align 10h
aIdGostr341094B db 'id-GostR3410-94-bBis',0 ; DATA XREF: .data:off_100696E0o
                                        ; .data:100696E4o
                align 4
aIdGostr34109_0 db 'id-GostR3410-94-b',0 ; DATA XREF: .data:off_100696C8o
                                        ; .data:100696CCo
                align 4
aIdGostr341094A db 'id-GostR3410-94-aBis',0 ; DATA XREF: .data:off_100696B0o
                                        ; .data:100696B4o
                align 4
aIdGostr34109_1 db 'id-GostR3410-94-a',0 ; DATA XREF: .data:off_10069698o
                                        ; .data:1006969Co
                align 4
aIdGostr34102_0 db 'id-GostR3410-2001-CryptoPro-XchB-ParamSet',0
                                        ; DATA XREF: .data:off_10069680o
                                        ; .data:10069684o
                align 4
aIdGostr34102_1 db 'id-GostR3410-2001-CryptoPro-XchA-ParamSet',0
                                        ; DATA XREF: .data:off_10069668o
                                        ; .data:1006966Co
                align 10h
aIdGostr34102_2 db 'id-GostR3410-2001-CryptoPro-C-ParamSet',0
                                        ; DATA XREF: .data:off_10069650o
                                        ; .data:10069654o
                align 4
aIdGostr34102_3 db 'id-GostR3410-2001-CryptoPro-B-ParamSet',0
                                        ; DATA XREF: .data:off_10069638o
                                        ; .data:1006963Co
                align 10h
aIdGostr34102_4 db 'id-GostR3410-2001-CryptoPro-A-ParamSet',0
                                        ; DATA XREF: .data:off_10069620o
                                        ; .data:10069624o
                align 4
aIdGostr34102_5 db 'id-GostR3410-2001-TestParamSet',0 ; DATA XREF: .data:off_10069608o
                                        ; .data:1006960Co
                align 4
aIdGostr341094C db 'id-GostR3410-94-CryptoPro-XchC-ParamSet',0
                                        ; DATA XREF: .data:off_100695F0o
                                        ; .data:100695F4o
aIdGostr34109_2 db 'id-GostR3410-94-CryptoPro-XchB-ParamSet',0
                                        ; DATA XREF: .data:off_100695D8o
                                        ; .data:100695DCo
aIdGostr34109_3 db 'id-GostR3410-94-CryptoPro-XchA-ParamSet',0
                                        ; DATA XREF: .data:off_100695C0o
                                        ; .data:100695C4o
aIdGostr34109_4 db 'id-GostR3410-94-CryptoPro-D-ParamSet',0 ; DATA XREF: .data:off_100695A8o
                                        ; .data:100695ACo
                align 4
aIdGostr34109_5 db 'id-GostR3410-94-CryptoPro-C-ParamSet',0 ; DATA XREF: .data:off_10069590o
                                        ; .data:10069594o
                align 10h
aIdGostr34109_6 db 'id-GostR3410-94-CryptoPro-B-ParamSet',0 ; DATA XREF: .data:off_10069578o
                                        ; .data:1006957Co
                align 4
aIdGostr34109_7 db 'id-GostR3410-94-CryptoPro-A-ParamSet',0 ; DATA XREF: .data:off_10069560o
                                        ; .data:10069564o
                align 10h
aIdGostr341094T db 'id-GostR3410-94-TestParamSet',0 ; DATA XREF: .data:off_10069548o
                                        ; .data:1006954Co
                align 10h
aIdGost281478_0 db 'id-Gost28147-89-CryptoPro-RIC-1-ParamSet',0
                                        ; DATA XREF: .data:off_10069530o
                                        ; .data:10069534o
                align 4
aIdGost281478_1 db 'id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet',0
                                        ; DATA XREF: .data:off_10069518o
                                        ; .data:1006951Co
                align 4
aIdGost281478_2 db 'id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet',0
                                        ; DATA XREF: .data:off_10069500o
                                        ; .data:10069504o
                align 4
aIdGost281478_3 db 'id-Gost28147-89-CryptoPro-D-ParamSet',0 ; DATA XREF: .data:off_100694E8o
                                        ; .data:100694ECo
                align 4
aIdGost281478_4 db 'id-Gost28147-89-CryptoPro-C-ParamSet',0 ; DATA XREF: .data:off_100694D0o
                                        ; .data:100694D4o
                align 4
aIdGost281478_5 db 'id-Gost28147-89-CryptoPro-B-ParamSet',0 ; DATA XREF: .data:off_100694B8o
                                        ; .data:100694BCo
                align 4
aIdGost281478_6 db 'id-Gost28147-89-CryptoPro-A-ParamSet',0 ; DATA XREF: .data:off_100694A0o
                                        ; .data:100694A4o
                align 4
aIdGost2814789T db 'id-Gost28147-89-TestParamSet',0 ; DATA XREF: .data:off_10069488o
                                        ; .data:1006948Co
                align 4
aIdGostr341194C db 'id-GostR3411-94-CryptoProParamSet',0 ; DATA XREF: .data:off_10069470o
                                        ; .data:10069474o
                align 10h
aIdGostr341194T db 'id-GostR3411-94-TestParamSet',0 ; DATA XREF: .data:off_10069458o
                                        ; .data:1006945Co
                align 10h
aIdGost2814789N db 'id-Gost28147-89-None-KeyMeshing',0 ; DATA XREF: .data:off_10069440o
                                        ; .data:10069444o
aIdGost281478_7 db 'id-Gost28147-89-CryptoPro-KeyMeshing',0 ; DATA XREF: .data:off_10069428o
                                        ; .data:1006942Co
                align 4
aGostR34_1094Dh db 'GOST R 34.10-94 DH',0 ; DATA XREF: .data:10069414o
                align 4
aIdGostr341094d db 'id-GostR3410-94DH',0 ; DATA XREF: .data:off_10069410o
                align 10h
aGostR34_102001 db 'GOST R 34.10-2001 DH',0 ; DATA XREF: .data:100693FCo
                align 4
aIdGostr34102_6 db 'id-GostR3410-2001DH',0 ; DATA XREF: .data:off_100693F8o
aGostR34_1194Pr db 'GOST R 34.11-94 PRF',0 ; DATA XREF: .data:100693E4o
aPrfGostr341194 db 'prf-gostr3411-94',0 ; DATA XREF: .data:off_100693E0o
                align 4
aGost2814789Mac db 'GOST 28147-89 MAC',0 ; DATA XREF: .data:100693CCo
                align 4
aGostMac        db 'gost-mac',0         ; DATA XREF: .data:off_100693C8o
                align 4
aGost89Cnt      db 'gost89-cnt',0       ; DATA XREF: .data:off_100693B0o
                                        ; .data:100693B4o
                align 10h
aGost2814789    db 'GOST 28147-89',0    ; DATA XREF: .data:1006939Co
                align 10h
aGost89         db 'gost89',0           ; DATA XREF: .data:off_10069398o
                align 4
aGostR34_1094   db 'GOST R 34.10-94',0  ; DATA XREF: .data:10069384o
aGost94         db 'gost94',0           ; DATA XREF: .data:off_10069380o
                align 10h
aGostR34_1020_0 db 'GOST R 34.10-2001',0 ; DATA XREF: .data:1006936Co
                align 4
aGost2001       db 'gost2001',0         ; DATA XREF: .data:off_10069368o
                align 10h
aHmacGost34_119 db 'HMAC GOST 34.11-94',0 ; DATA XREF: .data:10069354o
                align 4
aIdHmacgostr341 db 'id-HMACGostR3411-94',0 ; DATA XREF: .data:off_10069350o
aGostR34_1194   db 'GOST R 34.11-94',0  ; DATA XREF: .data:1006933Co
aMd_gost94      db 'md_gost94',0        ; DATA XREF: .data:off_10069338o
                align 4
aGostR34_1194_1 db 'GOST R 34.11-94 with GOST R 34.10-94',0 ; DATA XREF: .data:10069324o
                align 4
aIdGostr34119_1 db 'id-GostR3411-94-with-GostR3410-94',0 ; DATA XREF: .data:off_10069320o
                align 10h
aGostR34_1194_2 db 'GOST R 34.11-94 with GOST R 34.10-2001',0 ; DATA XREF: .data:1006930Co
                align 4
aIdGostr34119_2 db 'id-GostR3411-94-with-GostR3410-2001',0 ; DATA XREF: .data:off_10069308o
aCryptocom      db 'cryptocom',0        ; DATA XREF: .data:off_100692F0o
                                        ; .data:100692F4o
                align 4
aCryptopro      db 'cryptopro',0        ; DATA XREF: .data:off_100692D8o
                                        ; .data:100692DCo
                align 4
aWhirlpool      db 'whirlpool',0        ; DATA XREF: .data:off_100692C0o
                                        ; .data:100692C4o
                align 10h
aDsa_with_sha25 db 'dsa_with_SHA256',0  ; DATA XREF: .data:off_100692A8o
                                        ; .data:100692ACo
aDsa_with_sha22 db 'dsa_with_SHA224',0  ; DATA XREF: .data:off_10069290o
                                        ; .data:10069294o
aHmacwithsha512 db 'hmacWithSHA512',0   ; DATA XREF: .data:off_10069278o
                                        ; .data:1006927Co
                align 10h
aHmacwithsha384 db 'hmacWithSHA384',0   ; DATA XREF: .data:off_10069260o
                                        ; .data:10069264o
                align 10h
aHmacwithsha256 db 'hmacWithSHA256',0   ; DATA XREF: .data:off_10069248o
                                        ; .data:1006924Co
                align 10h
aHmacwithsha224 db 'hmacWithSHA224',0   ; DATA XREF: .data:off_10069230o
                                        ; .data:10069234o
                align 10h
aHmacwithmd5    db 'hmacWithMD5',0      ; DATA XREF: .data:off_10069218o
                                        ; .data:1006921Co
aEcdsaWithSha51 db 'ecdsa-with-SHA512',0 ; DATA XREF: .data:off_10069200o
                                        ; .data:10069204o
                align 10h
aEcdsaWithSha38 db 'ecdsa-with-SHA384',0 ; DATA XREF: .data:off_100691E8o
                                        ; .data:100691ECo
                align 4
aEcdsaWithSha25 db 'ecdsa-with-SHA256',0 ; DATA XREF: .data:off_100691D0o
                                        ; .data:100691D4o
                align 4
aEcdsaWithSha22 db 'ecdsa-with-SHA224',0 ; DATA XREF: .data:off_100691B8o
                                        ; .data:100691BCo
                align 4
aEcdsaWithSpeci db 'ecdsa-with-Specified',0 ; DATA XREF: .data:off_100691A0o
                                        ; .data:100691A4o
                align 4
aEcdsaWithRecom db 'ecdsa-with-Recommended',0 ; DATA XREF: .data:off_10069188o
                                        ; .data:1006918Co
                align 4
aIdAes256Wrap   db 'id-aes256-wrap',0   ; DATA XREF: .data:off_10069170o
                                        ; .data:10069174o
                align 4
aIdAes192Wrap   db 'id-aes192-wrap',0   ; DATA XREF: .data:off_10069158o
                                        ; .data:1006915Co
                align 4
aIdAes128Wrap   db 'id-aes128-wrap',0   ; DATA XREF: .data:off_10069140o
                                        ; .data:10069144o
                align 4
aIdCtAsciitextw db 'id-ct-asciiTextWithCRLF',0 ; DATA XREF: .data:off_10069128o
                                        ; .data:1006912Co
aIdSmimeCtCompr db 'id-smime-ct-compressedData',0 ; DATA XREF: .data:off_10069110o
                                        ; .data:10069114o
                align 10h
aCaRepository   db 'CA Repository',0    ; DATA XREF: .data:100690FCo
                align 10h
aCarepository   db 'caRepository',0     ; DATA XREF: .data:off_100690F8o
                align 10h
aIdItSupplangta db 'id-it-suppLangTags',0 ; DATA XREF: .data:off_100690E0o
                                        ; .data:100690E4o
                align 4
aDiffieHellmanB db 'Diffie-Hellman based MAC',0 ; DATA XREF: .data:100690CCo
                align 10h
aIdDhbasedmac   db 'id-DHBasedMac',0    ; DATA XREF: .data:off_100690C8o
                align 10h
aPasswordBasedM db 'password based MAC',0 ; DATA XREF: .data:100690B4o
                align 4
aIdPasswordbase db 'id-PasswordBasedMAC',0 ; DATA XREF: .data:off_100690B0o
aHmacSha1       db 'hmac-sha1',0        ; DATA XREF: .data:1006909Co
                align 4
aHmacSha1_0     db 'HMAC-SHA1',0        ; DATA XREF: .data:off_10069098o
                align 10h
aHmacMd5        db 'hmac-md5',0         ; DATA XREF: .data:10069084o
                align 4
aHmacMd5_0      db 'HMAC-MD5',0         ; DATA XREF: .data:off_10069080o
                align 4
aSeedCfb        db 'seed-cfb',0         ; DATA XREF: .data:1006906Co
                align 4
aSeedCfb_0      db 'SEED-CFB',0         ; DATA XREF: .data:off_10069068o
                align 10h
aSeedOfb        db 'seed-ofb',0         ; DATA XREF: .data:10069054o
                align 4
aSeedOfb_0      db 'SEED-OFB',0         ; DATA XREF: .data:off_10069050o
                align 4
aSeedCbc        db 'seed-cbc',0         ; DATA XREF: .data:1006903Co
                align 4
aSeedCbc_0      db 'SEED-CBC',0         ; DATA XREF: .data:off_10069038o
                align 10h
aSeedEcb        db 'seed-ecb',0         ; DATA XREF: .data:10069024o
                align 4
aSeedEcb_0      db 'SEED-ECB',0         ; DATA XREF: .data:off_10069020o
                align 4
aKisa           db 'kisa',0             ; DATA XREF: .data:10068FDCo
                align 10h
aKisa_0         db 'KISA',0             ; DATA XREF: .data:off_10068FD8o
                align 4
aX509v3Certific db 'X509v3 Certificate Issuer',0 ; DATA XREF: .data:10068FACo
                align 4
aCertificateiss db 'certificateIssuer',0 ; DATA XREF: .data:off_10068FA8o
                align 4
aX509v3IssuingD db 'X509v3 Issuing Distrubution Point',0 ; DATA XREF: .data:10068F94o
                align 4
aIssuingdistrib db 'issuingDistributionPoint',0 ; DATA XREF: .data:off_10068F90o
                align 4
aX509v3SubjectD db 'X509v3 Subject Directory Attributes',0 ; DATA XREF: .data:10068F7Co
aSubjectdirecto db 'subjectDirectoryAttributes',0 ; DATA XREF: .data:off_10068F78o
                align 4
aCamellia256Ofb db 'camellia-256-ofb',0 ; DATA XREF: .data:10068F64o
                align 4
aCamellia256O_0 db 'CAMELLIA-256-OFB',0 ; DATA XREF: .data:off_10068F60o
                align 10h
aCamellia192Ofb db 'camellia-192-ofb',0 ; DATA XREF: .data:10068F4Co
                align 4
aCamellia192O_0 db 'CAMELLIA-192-OFB',0 ; DATA XREF: .data:off_10068F48o
                align 4
aCamellia128Ofb db 'camellia-128-ofb',0 ; DATA XREF: .data:10068F34o
                align 4
aCamellia128O_0 db 'CAMELLIA-128-OFB',0 ; DATA XREF: .data:off_10068F30o
                align 10h
aCamellia256Cfb db 'camellia-256-cfb8',0 ; DATA XREF: .data:10068F1Co
                align 4
aCamellia256C_0 db 'CAMELLIA-256-CFB8',0 ; DATA XREF: .data:off_10068F18o
                align 4
aCamellia192Cfb db 'camellia-192-cfb8',0 ; DATA XREF: .data:10068F04o
                align 4
aCamellia192C_0 db 'CAMELLIA-192-CFB8',0 ; DATA XREF: .data:off_10068F00o
                align 10h
aCamellia128Cfb db 'camellia-128-cfb8',0 ; DATA XREF: .data:10068EECo
                align 4
aCamellia128C_0 db 'CAMELLIA-128-CFB8',0 ; DATA XREF: .data:off_10068EE8o
                align 4
aCamellia256C_1 db 'camellia-256-cfb1',0 ; DATA XREF: .data:10068ED4o
                align 4
aCamellia256C_2 db 'CAMELLIA-256-CFB1',0 ; DATA XREF: .data:off_10068ED0o
                align 10h
aCamellia192C_1 db 'camellia-192-cfb1',0 ; DATA XREF: .data:10068EBCo
                align 4
aCamellia192C_2 db 'CAMELLIA-192-CFB1',0 ; DATA XREF: .data:off_10068EB8o
                align 4
aCamellia128C_1 db 'camellia-128-cfb1',0 ; DATA XREF: .data:10068EA4o
                align 4
aCamellia128C_2 db 'CAMELLIA-128-CFB1',0 ; DATA XREF: .data:off_10068EA0o
                align 10h
aCamellia256C_3 db 'camellia-256-cfb',0 ; DATA XREF: .data:10068E8Co
                align 4
aCamellia256C_4 db 'CAMELLIA-256-CFB',0 ; DATA XREF: .data:off_10068E88o
                align 4
aCamellia192C_3 db 'camellia-192-cfb',0 ; DATA XREF: .data:10068E74o
                align 4
aCamellia192C_4 db 'CAMELLIA-192-CFB',0 ; DATA XREF: .data:off_10068E70o
                align 10h
aCamellia128C_3 db 'camellia-128-cfb',0 ; DATA XREF: .data:10068E5Co
                align 4
aCamellia128C_4 db 'CAMELLIA-128-CFB',0 ; DATA XREF: .data:off_10068E58o
                align 4
aCamellia256Ecb db 'camellia-256-ecb',0 ; DATA XREF: .data:10068E44o
                align 4
aCamellia256E_0 db 'CAMELLIA-256-ECB',0 ; DATA XREF: .data:off_10068E40o
                align 10h
aCamellia192Ecb db 'camellia-192-ecb',0 ; DATA XREF: .data:10068E2Co
                align 4
aCamellia192E_0 db 'CAMELLIA-192-ECB',0 ; DATA XREF: .data:off_10068E28o
                align 4
aCamellia128Ecb db 'camellia-128-ecb',0 ; DATA XREF: .data:10068E14o
                align 4
aCamellia128E_0 db 'CAMELLIA-128-ECB',0 ; DATA XREF: .data:off_10068E10o
                align 10h
aCamellia256Cbc db 'camellia-256-cbc',0 ; DATA XREF: .data:10068DFCo
                align 4
aCamellia256C_5 db 'CAMELLIA-256-CBC',0 ; DATA XREF: .data:off_10068DF8o
                align 4
aCamellia192Cbc db 'camellia-192-cbc',0 ; DATA XREF: .data:10068DE4o
                align 4
aCamellia192C_5 db 'CAMELLIA-192-CBC',0 ; DATA XREF: .data:off_10068DE0o
                align 10h
aCamellia128Cbc db 'camellia-128-cbc',0 ; DATA XREF: .data:10068DCCo
                align 4
aCamellia128C_5 db 'CAMELLIA-128-CBC',0 ; DATA XREF: .data:off_10068DC8o
                align 4
aIpsec4         db 'ipsec4',0           ; DATA XREF: .data:10068DB4o
                align 10h
aOakleyEc2n4    db 'Oakley-EC2N-4',0    ; DATA XREF: .data:off_10068DB0o
                align 10h
aIpsec3         db 'ipsec3',0           ; DATA XREF: .data:10068D9Co
                align 4
aOakleyEc2n3    db 'Oakley-EC2N-3',0    ; DATA XREF: .data:off_10068D98o
                align 4
aX509v3InhibitA db 'X509v3 Inhibit Any Policy',0 ; DATA XREF: .data:10068D84o
                align 4
aInhibitanypoli db 'inhibitAnyPolicy',0 ; DATA XREF: .data:off_10068D80o
                align 4
aX509v3PolicyMa db 'X509v3 Policy Mappings',0 ; DATA XREF: .data:10068D6Co
                align 10h
aPolicymappings db 'policyMappings',0   ; DATA XREF: .data:off_10068D68o
                align 10h
aX509v3AnyPolic db 'X509v3 Any Policy',0 ; DATA XREF: .data:10068D54o
                align 4
aAnypolicy      db 'anyPolicy',0        ; DATA XREF: .data:off_10068D50o
                align 10h
aWapWsgIdmEcidW db 'wap-wsg-idm-ecid-wtls12',0 ; DATA XREF: .data:off_10068D38o
                                        ; .data:10068D3Co
aWapWsgIdmEci_0 db 'wap-wsg-idm-ecid-wtls11',0 ; DATA XREF: .data:off_10068D20o
                                        ; .data:10068D24o
aWapWsgIdmEci_1 db 'wap-wsg-idm-ecid-wtls10',0 ; DATA XREF: .data:off_10068D08o
                                        ; .data:10068D0Co
aWapWsgIdmEci_2 db 'wap-wsg-idm-ecid-wtls9',0 ; DATA XREF: .data:off_10068CF0o
                                        ; .data:10068CF4o
                align 10h
aWapWsgIdmEci_3 db 'wap-wsg-idm-ecid-wtls8',0 ; DATA XREF: .data:off_10068CD8o
                                        ; .data:10068CDCo
                align 4
aWapWsgIdmEci_4 db 'wap-wsg-idm-ecid-wtls7',0 ; DATA XREF: .data:off_10068CC0o
                                        ; .data:10068CC4o
                align 10h
aWapWsgIdmEci_5 db 'wap-wsg-idm-ecid-wtls6',0 ; DATA XREF: .data:off_10068CA8o
                                        ; .data:10068CACo
                align 4
aWapWsgIdmEci_6 db 'wap-wsg-idm-ecid-wtls5',0 ; DATA XREF: .data:off_10068C90o
                                        ; .data:10068C94o
                align 10h
aWapWsgIdmEci_7 db 'wap-wsg-idm-ecid-wtls4',0 ; DATA XREF: .data:off_10068C78o
                                        ; .data:10068C7Co
                align 4
aWapWsgIdmEci_8 db 'wap-wsg-idm-ecid-wtls3',0 ; DATA XREF: .data:off_10068C60o
                                        ; .data:10068C64o
                align 10h
aWapWsgIdmEci_9 db 'wap-wsg-idm-ecid-wtls1',0 ; DATA XREF: .data:off_10068C48o
                                        ; .data:10068C4Co
                align 4
aSect571r1      db 'sect571r1',0        ; DATA XREF: .data:off_10068C30o
                                        ; .data:10068C34o
                align 4
aSect571k1      db 'sect571k1',0        ; DATA XREF: .data:off_10068C18o
                                        ; .data:10068C1Co
                align 10h
aSect409r1      db 'sect409r1',0        ; DATA XREF: .data:off_10068C00o
                                        ; .data:10068C04o
                align 4
aSect409k1      db 'sect409k1',0        ; DATA XREF: .data:off_10068BE8o
                                        ; .data:10068BECo
                align 4
aSect283r1      db 'sect283r1',0        ; DATA XREF: .data:off_10068BD0o
                                        ; .data:10068BD4o
                align 4
aSect283k1      db 'sect283k1',0        ; DATA XREF: .data:off_10068BB8o
                                        ; .data:10068BBCo
                align 10h
aSect239k1      db 'sect239k1',0        ; DATA XREF: .data:off_10068BA0o
                                        ; .data:10068BA4o
                align 4
aSect233r1      db 'sect233r1',0        ; DATA XREF: .data:off_10068B88o
                                        ; .data:10068B8Co
                align 4
aSect233k1      db 'sect233k1',0        ; DATA XREF: .data:off_10068B70o
                                        ; .data:10068B74o
                align 4
aSect193r2      db 'sect193r2',0        ; DATA XREF: .data:off_10068B58o
                                        ; .data:10068B5Co
                align 10h
aSect193r1      db 'sect193r1',0        ; DATA XREF: .data:off_10068B40o
                                        ; .data:10068B44o
                align 4
aSect163r2      db 'sect163r2',0        ; DATA XREF: .data:off_10068B28o
                                        ; .data:10068B2Co
                align 4
aSect163r1      db 'sect163r1',0        ; DATA XREF: .data:off_10068B10o
                                        ; .data:10068B14o
                align 4
aSect163k1      db 'sect163k1',0        ; DATA XREF: .data:off_10068AF8o
                                        ; .data:10068AFCo
                align 10h
aSect131r2      db 'sect131r2',0        ; DATA XREF: .data:off_10068AE0o
                                        ; .data:10068AE4o
                align 4
aSect131r1      db 'sect131r1',0        ; DATA XREF: .data:off_10068AC8o
                                        ; .data:10068ACCo
                align 4
aSect113r2      db 'sect113r2',0        ; DATA XREF: .data:off_10068AB0o
                                        ; .data:10068AB4o
                align 4
aSect113r1      db 'sect113r1',0        ; DATA XREF: .data:off_10068A98o
                                        ; .data:10068A9Co
                align 10h
aSecp521r1      db 'secp521r1',0        ; DATA XREF: .data:off_10068A80o
                                        ; .data:10068A84o
                align 4
aSecp384r1      db 'secp384r1',0        ; DATA XREF: .data:off_10068A68o
                                        ; .data:10068A6Co
                align 4
aSecp256k1      db 'secp256k1',0        ; DATA XREF: .data:off_10068A50o
                                        ; .data:10068A54o
                align 4
aSecp224r1      db 'secp224r1',0        ; DATA XREF: .data:off_10068A38o
                                        ; .data:10068A3Co
                align 10h
aSecp224k1      db 'secp224k1',0        ; DATA XREF: .data:off_10068A20o
                                        ; .data:10068A24o
                align 4
aSecp192k1      db 'secp192k1',0        ; DATA XREF: .data:off_10068A08o
                                        ; .data:10068A0Co
                align 4
aSecp160r2      db 'secp160r2',0        ; DATA XREF: .data:off_100689F0o
                                        ; .data:100689F4o
                align 4
aSecp160r1      db 'secp160r1',0        ; DATA XREF: .data:off_100689D8o
                                        ; .data:100689DCo
                align 10h
aSecp160k1      db 'secp160k1',0        ; DATA XREF: .data:off_100689C0o
                                        ; .data:100689C4o
                align 4
aSecp128r2      db 'secp128r2',0        ; DATA XREF: .data:off_100689A8o
                                        ; .data:100689ACo
                align 4
aSecp128r1      db 'secp128r1',0        ; DATA XREF: .data:off_10068990o
                                        ; .data:10068994o
                align 4
aSecp112r2      db 'secp112r2',0        ; DATA XREF: .data:off_10068978o
                                        ; .data:1006897Co
                align 10h
aSecp112r1      db 'secp112r1',0        ; DATA XREF: .data:off_10068960o
                                        ; .data:10068964o
                align 4
aC2tnb431r1     db 'c2tnb431r1',0       ; DATA XREF: .data:off_10068948o
                                        ; .data:1006894Co
                align 4
aC2pnb368w1     db 'c2pnb368w1',0       ; DATA XREF: .data:off_10068930o
                                        ; .data:10068934o
                align 4
aC2tnb359v1     db 'c2tnb359v1',0       ; DATA XREF: .data:off_10068918o
                                        ; .data:1006891Co
                align 10h
aC2pnb304w1     db 'c2pnb304w1',0       ; DATA XREF: .data:off_10068900o
                                        ; .data:10068904o
                align 4
aC2pnb272w1     db 'c2pnb272w1',0       ; DATA XREF: .data:off_100688E8o
                                        ; .data:100688ECo
                align 4
aC2onb239v5     db 'c2onb239v5',0       ; DATA XREF: .data:off_100688D0o
                                        ; .data:100688D4o
                align 4
aC2onb239v4     db 'c2onb239v4',0       ; DATA XREF: .data:off_100688B8o
                                        ; .data:100688BCo
                align 10h
aC2tnb239v3     db 'c2tnb239v3',0       ; DATA XREF: .data:off_100688A0o
                                        ; .data:100688A4o
                align 4
aC2tnb239v2     db 'c2tnb239v2',0       ; DATA XREF: .data:off_10068888o
                                        ; .data:1006888Co
                align 4
aC2tnb239v1     db 'c2tnb239v1',0       ; DATA XREF: .data:off_10068870o
                                        ; .data:10068874o
                align 4
aC2pnb208w1     db 'c2pnb208w1',0       ; DATA XREF: .data:off_10068858o
                                        ; .data:1006885Co
                align 10h
aC2onb191v5     db 'c2onb191v5',0       ; DATA XREF: .data:off_10068840o
                                        ; .data:10068844o
                align 4
aC2onb191v4     db 'c2onb191v4',0       ; DATA XREF: .data:off_10068828o
                                        ; .data:1006882Co
                align 4
aC2tnb191v3     db 'c2tnb191v3',0       ; DATA XREF: .data:off_10068810o
                                        ; .data:10068814o
                align 4
aC2tnb191v2     db 'c2tnb191v2',0       ; DATA XREF: .data:off_100687F8o
                                        ; .data:100687FCo
                align 10h
aC2tnb191v1     db 'c2tnb191v1',0       ; DATA XREF: .data:off_100687E0o
                                        ; .data:100687E4o
                align 4
aC2pnb176v1     db 'c2pnb176v1',0       ; DATA XREF: .data:off_100687C8o
                                        ; .data:100687CCo
                align 4
aC2pnb163v3     db 'c2pnb163v3',0       ; DATA XREF: .data:off_100687B0o
                                        ; .data:100687B4o
                align 4
aC2pnb163v2     db 'c2pnb163v2',0       ; DATA XREF: .data:off_10068798o
                                        ; .data:1006879Co
                align 10h
aC2pnb163v1     db 'c2pnb163v1',0       ; DATA XREF: .data:off_10068780o
                                        ; .data:10068784o
                align 4
aPpbasis        db 'ppBasis',0          ; DATA XREF: .data:off_10068768o
                                        ; .data:1006876Co
aTpbasis        db 'tpBasis',0          ; DATA XREF: .data:off_10068750o
                                        ; .data:10068754o
aOnbasis        db 'onBasis',0          ; DATA XREF: .data:off_10068738o
                                        ; .data:1006873Co
aIdCharacterist db 'id-characteristic-two-basis',0 ; DATA XREF: .data:off_10068720o
                                        ; .data:10068724o
aWapWsg         db 'wap-wsg',0          ; DATA XREF: .data:off_10068708o
                                        ; .data:1006870Co
aWap            db 'wap',0              ; DATA XREF: .data:off_100686F0o
                                        ; .data:100686F4o
aCerticomArc    db 'certicom-arc',0     ; DATA XREF: .data:off_100686D8o
                                        ; .data:100686DCo
                align 4
aIdentifiedOrga db 'identified-organization',0 ; DATA XREF: .data:off_100686C0o
                                        ; .data:100686C4o
aSha224         db 'sha224',0           ; DATA XREF: .data:100686ACo
                align 4
aSha224_0       db 'SHA224',0           ; DATA XREF: .data:off_100686A8o
                align 4
aSha512         db 'sha512',0           ; DATA XREF: .data:10068694o
                align 4
aSha512_0       db 'SHA512',0           ; DATA XREF: .data:off_10068690o
                align 4
aSha384         db 'sha384',0           ; DATA XREF: .data:1006867Co
                align 4
aSha384_0       db 'SHA384',0           ; DATA XREF: .data:off_10068678o
                align 4
aSha256         db 'sha256',0           ; DATA XREF: .data:10068664o
                align 4
aSha256_0       db 'SHA256',0           ; DATA XREF: .data:off_10068660o
                align 4
aSha224withrsae db 'sha224WithRSAEncryption',0 ; DATA XREF: .data:1006864Co
aRsaSha224      db 'RSA-SHA224',0       ; DATA XREF: .data:off_10068648o
                align 4
aSha512withrsae db 'sha512WithRSAEncryption',0 ; DATA XREF: .data:10068634o
aRsaSha512      db 'RSA-SHA512',0       ; DATA XREF: .data:off_10068630o
                align 4
aSha384withrsae db 'sha384WithRSAEncryption',0 ; DATA XREF: .data:1006861Co
aRsaSha384      db 'RSA-SHA384',0       ; DATA XREF: .data:off_10068618o
                align 10h
aSha256withrsae db 'sha256WithRSAEncryption',0 ; DATA XREF: .data:10068604o
aRsaSha256      db 'RSA-SHA256',0       ; DATA XREF: .data:off_10068600o
                align 4
aIndependent    db 'Independent',0      ; DATA XREF: .data:100685ECo
aIdPplIndepende db 'id-ppl-independent',0 ; DATA XREF: .data:off_100685E8o
                align 4
aX509v3NameCons db 'X509v3 Name Constraints',0 ; DATA XREF: .data:100685D4o
aNameconstraint db 'nameConstraints',0  ; DATA XREF: .data:off_100685D0o
aInheritAll     db 'Inherit all',0      ; DATA XREF: .data:100685BCo
aIdPplInherital db 'id-ppl-inheritAll',0 ; DATA XREF: .data:off_100685B8o
                align 4
aAnyLanguage    db 'Any language',0     ; DATA XREF: .data:100685A4o
                align 4
aIdPplAnylangua db 'id-ppl-anyLanguage',0 ; DATA XREF: .data:off_100685A0o
                align 10h
aProxyCertifica db 'Proxy Certificate Information',0 ; DATA XREF: .data:1006858Co
                align 10h
aProxycertinfo  db 'proxyCertInfo',0    ; DATA XREF: .data:off_10068588o
                align 10h
aIdPpl          db 'id-ppl',0           ; DATA XREF: .data:off_10068570o
                                        ; .data:10068574o
                align 4
aPostalcode     db 'postalCode',0       ; DATA XREF: .data:off_10068558o
                                        ; .data:1006855Co
                align 4
aStreetaddress  db 'streetAddress',0    ; DATA XREF: .data:10068544o
                align 4
aStreet         db 'street',0           ; DATA XREF: .data:off_10068540o
                align 4
aDesEde3Cfb8    db 'des-ede3-cfb8',0    ; DATA XREF: .data:1006852Co
                align 4
aDesEde3Cfb8_0  db 'DES-EDE3-CFB8',0    ; DATA XREF: .data:off_10068528o
                align 4
aDesEde3Cfb1    db 'des-ede3-cfb1',0    ; DATA XREF: .data:10068514o
                align 4
aDesEde3Cfb1_0  db 'DES-EDE3-CFB1',0    ; DATA XREF: .data:off_10068510o
                align 4
aDesCfb8        db 'des-cfb8',0         ; DATA XREF: .data:100684FCo
                align 4
aDesCfb8_0      db 'DES-CFB8',0         ; DATA XREF: .data:off_100684F8o
                align 4
aDesCfb1        db 'des-cfb1',0         ; DATA XREF: .data:100684E4o
                align 10h
aDesCfb1_0      db 'DES-CFB1',0         ; DATA XREF: .data:off_100684E0o
                align 4
aAes256Cfb8     db 'aes-256-cfb8',0     ; DATA XREF: .data:100684CCo
                align 4
aAes256Cfb8_0   db 'AES-256-CFB8',0     ; DATA XREF: .data:off_100684C8o
                align 4
aAes192Cfb8     db 'aes-192-cfb8',0     ; DATA XREF: .data:100684B4o
                align 4
aAes192Cfb8_0   db 'AES-192-CFB8',0     ; DATA XREF: .data:off_100684B0o
                align 4
aAes128Cfb8     db 'aes-128-cfb8',0     ; DATA XREF: .data:1006849Co
                align 4
aAes128Cfb8_0   db 'AES-128-CFB8',0     ; DATA XREF: .data:off_10068498o
                align 4
aAes256Cfb1     db 'aes-256-cfb1',0     ; DATA XREF: .data:10068484o
                align 4
aAes256Cfb1_0   db 'AES-256-CFB1',0     ; DATA XREF: .data:off_10068480o
                align 4
aAes192Cfb1     db 'aes-192-cfb1',0     ; DATA XREF: .data:1006846Co
                align 4
aAes192Cfb1_0   db 'AES-192-CFB1',0     ; DATA XREF: .data:off_10068468o
                align 4
aAes128Cfb1     db 'aes-128-cfb1',0     ; DATA XREF: .data:10068454o
                align 4
aAes128Cfb1_0   db 'AES-128-CFB1',0     ; DATA XREF: .data:off_10068450o
                align 4
aMicrosoftUnive db 'Microsoft Universal Principal Name',0 ; DATA XREF: .data:1006843Co
                align 10h
aMsupn          db 'msUPN',0            ; DATA XREF: .data:off_10068438o
                align 4
aMicrosoftSmart db 'Microsoft Smartcardlogin',0 ; DATA XREF: .data:10068424o
                align 4
aMssmartcardlog db 'msSmartcardLogin',0 ; DATA XREF: .data:off_10068420o
                align 4
aInternationalO db 'International Organizations',0 ; DATA XREF: .data:1006840Co
aInternationa_0 db 'international-organizations',0 ; DATA XREF: .data:off_10068408o
aJointIsoItuT   db 'joint-iso-itu-t',0  ; DATA XREF: .data:100683F4o
aJointIsoItuT_0 db 'JOINT-ISO-ITU-T',0  ; DATA XREF: .data:off_100683F0o
aItuT           db 'itu-t',0            ; DATA XREF: .data:100683DCo
                align 4
aItuT_0         db 'ITU-T',0            ; DATA XREF: .data:off_100683D8o
                align 10h
aRsaoaepencrypt db 'rsaOAEPEncryptionSET',0 ; DATA XREF: .data:off_100683C0o
                                        ; .data:100683C4o
                align 4
aDesCdmf        db 'des-cdmf',0         ; DATA XREF: .data:100683ACo
                align 4
aDesCdmf_0      db 'DES-CDMF',0         ; DATA XREF: .data:off_100683A8o
                align 10h
aSetBrandNovus  db 'set-brand-Novus',0  ; DATA XREF: .data:off_10068390o
                                        ; .data:10068394o
aSetBrandMaster db 'set-brand-MasterCard',0 ; DATA XREF: .data:off_10068378o
                                        ; .data:1006837Co
                align 4
aSetBrandVisa   db 'set-brand-Visa',0   ; DATA XREF: .data:off_10068360o
                                        ; .data:10068364o
                align 4
aSetBrandJcb    db 'set-brand-JCB',0    ; DATA XREF: .data:off_10068348o
                                        ; .data:1006834Co
                align 4
aSetBrandAmeric db 'set-brand-AmericanExpress',0 ; DATA XREF: .data:off_10068330o
                                        ; .data:10068334o
                align 4
aSetBrandDiners db 'set-brand-Diners',0 ; DATA XREF: .data:off_10068318o
                                        ; .data:1006831Co
                align 4
aSetBrandIataAt db 'set-brand-IATA-ATA',0 ; DATA XREF: .data:off_10068300o
                                        ; .data:10068304o
                align 4
aSecureDeviceSi db 'secure device signature',0 ; DATA XREF: .data:100682ECo
aSetattrSecdevs db 'setAttr-SecDevSig',0 ; DATA XREF: .data:off_100682E8o
                align 4
aIccOrTokenSign db 'ICC or token signature',0 ; DATA XREF: .data:100682D4o
                align 10h
aSetattrTokiccs db 'setAttr-TokICCsig',0 ; DATA XREF: .data:off_100682D0o
                align 4
aCleartextTrack db 'cleartext track 2',0 ; DATA XREF: .data:100682BCo
                align 4
aSetattrT2clear db 'setAttr-T2cleartxt',0 ; DATA XREF: .data:off_100682B8o
                align 4
aEncryptedTrack db 'encrypted track 2',0 ; DATA XREF: .data:100682A4o
                align 10h
aSetattrT2enc   db 'setAttr-T2Enc',0    ; DATA XREF: .data:off_100682A0o
                align 10h
aGenerateCrypto db 'generate cryptogram',0 ; DATA XREF: .data:1006828Co
aSetattrGencryp db 'setAttr-GenCryptgrm',0 ; DATA XREF: .data:off_10068288o
aSetattrIsscapS db 'setAttr-IssCap-Sig',0 ; DATA XREF: .data:off_10068270o
                                        ; .data:10068274o
                align 4
aSetattrIsscapT db 'setAttr-IssCap-T2',0 ; DATA XREF: .data:off_10068258o
                                        ; .data:1006825Co
                align 10h
aSetattrIsscapC db 'setAttr-IssCap-CVM',0 ; DATA XREF: .data:off_10068240o
                                        ; .data:10068244o
                align 4
aSetattrTokenB0 db 'setAttr-Token-B0Prime',0 ; DATA XREF: .data:off_10068228o
                                        ; .data:1006822Co
                align 4
aSetattrTokenEm db 'setAttr-Token-EMV',0 ; DATA XREF: .data:off_10068210o
                                        ; .data:10068214o
                align 10h
aSetAddpolicy   db 'set-addPolicy',0    ; DATA XREF: .data:off_100681F8o
                                        ; .data:100681FCo
                align 10h
aSetRootkeythum db 'set-rootKeyThumb',0 ; DATA XREF: .data:off_100681E0o
                                        ; .data:100681E4o
                align 4
aIssuerCapabili db 'issuer capabilities',0 ; DATA XREF: .data:100681CCo
aSetattrIsscap  db 'setAttr-IssCap',0   ; DATA XREF: .data:off_100681C8o
                align 4
aSetattrTokenty db 'setAttr-TokenType',0 ; DATA XREF: .data:off_100681B0o
                                        ; .data:100681B4o
                align 4
aPaymentGateway db 'payment gateway capabilities',0 ; DATA XREF: .data:1006819Co
                align 4
aSetattrPgwycap db 'setAttr-PGWYcap',0  ; DATA XREF: .data:off_10068198o
aSetattrCert    db 'setAttr-Cert',0     ; DATA XREF: .data:off_10068180o
                                        ; .data:10068184o
                align 4
aSetcextIssuerc db 'setCext-IssuerCapabilities',0 ; DATA XREF: .data:off_10068168o
                                        ; .data:1006816Co
                align 4
aSetcextTokenty db 'setCext-TokenType',0 ; DATA XREF: .data:off_10068150o
                                        ; .data:10068154o
                align 4
aSetcextTrack2d db 'setCext-Track2Data',0 ; DATA XREF: .data:off_10068138o
                                        ; .data:1006813Co
                align 10h
aSetcextTokenid db 'setCext-TokenIdentifier',0 ; DATA XREF: .data:off_10068120o
                                        ; .data:10068124o
aSetcextPgwycap db 'setCext-PGWYcapabilities',0 ; DATA XREF: .data:off_10068108o
                                        ; .data:1006810Co
                align 4
aSetcextSetqual db 'setCext-setQualf',0 ; DATA XREF: .data:off_100680F0o
                                        ; .data:100680F4o
                align 4
aSetcextSetext  db 'setCext-setExt',0   ; DATA XREF: .data:off_100680D8o
                                        ; .data:100680DCo
                align 4
aSetcextTunneli db 'setCext-tunneling',0 ; DATA XREF: .data:off_100680C0o
                                        ; .data:100680C4o
                align 4
aSetcextCcertre db 'setCext-cCertRequired',0 ; DATA XREF: .data:off_100680A8o
                                        ; .data:100680ACo
                align 4
aSetcextMerchda db 'setCext-merchData',0 ; DATA XREF: .data:off_10068090o
                                        ; .data:10068094o
                align 4
aSetcextCerttyp db 'setCext-certType',0 ; DATA XREF: .data:off_10068078o
                                        ; .data:1006807Co
                align 4
aSetcextHashedr db 'setCext-hashedRoot',0 ; DATA XREF: .data:off_10068060o
                                        ; .data:10068064o
                align 10h
aSetPolicyRoot  db 'set-policy-root',0  ; DATA XREF: .data:off_10068048o
                                        ; .data:1006804Co
aAdditionalVeri db 'additional verification',0 ; DATA XREF: .data:10068034o
aSetextCv       db 'setext-cv',0        ; DATA XREF: .data:off_10068030o
                align 4
aSetextTrack2   db 'setext-track2',0    ; DATA XREF: .data:off_10068018o
                                        ; .data:1006801Co
                align 4
aSetextPinany   db 'setext-pinAny',0    ; DATA XREF: .data:off_10068000o
                                        ; .data:10068004o
                align 4
aSetextPinsecur db 'setext-pinSecure',0 ; DATA XREF: .data:off_10067FE8o
                                        ; .data:10067FECo
                align 4
aMerchantInitia db 'merchant initiated auth',0 ; DATA XREF: .data:10067FD4o
aSetextMiauth   db 'setext-miAuth',0    ; DATA XREF: .data:off_10067FD0o
                align 10h
aGenericCryptog db 'generic cryptogram',0 ; DATA XREF: .data:10067FBCo
                align 4
aSetextGencrypt db 'setext-genCrypt',0  ; DATA XREF: .data:off_10067FB8o
aSetctBcidistri db 'setct-BCIDistributionTBS',0 ; DATA XREF: .data:off_10067FA0o
                                        ; .data:10067FA4o
                align 10h
aSetctCrlnotifi db 'setct-CRLNotificationResTBS',0 ; DATA XREF: .data:off_10067F88o
                                        ; .data:10067F8Co
aSetctCrlnoti_0 db 'setct-CRLNotificationTBS',0 ; DATA XREF: .data:off_10067F70o
                                        ; .data:10067F74o
                align 4
aSetctCertrestb db 'setct-CertResTBE',0 ; DATA XREF: .data:off_10067F58o
                                        ; .data:10067F5Co
                align 4
aSetctCertreqtb db 'setct-CertReqTBEX',0 ; DATA XREF: .data:off_10067F40o
                                        ; .data:10067F44o
                align 10h
aSetctCertreq_0 db 'setct-CertReqTBE',0 ; DATA XREF: .data:off_10067F28o
                                        ; .data:10067F2Co
                align 4
aSetctRegformre db 'setct-RegFormReqTBE',0 ; DATA XREF: .data:off_10067F10o
                                        ; .data:10067F14o
aSetctBatchadmi db 'setct-BatchAdminResTBE',0 ; DATA XREF: .data:off_10067EF8o
                                        ; .data:10067EFCo
                align 10h
aSetctBatchad_0 db 'setct-BatchAdminReqTBE',0 ; DATA XREF: .data:off_10067EE0o
                                        ; .data:10067EE4o
                align 4
aSetctCredrevre db 'setct-CredRevResTBE',0 ; DATA XREF: .data:off_10067EC8o
                                        ; .data:10067ECCo
aSetctCredrev_0 db 'setct-CredRevReqTBEX',0 ; DATA XREF: .data:off_10067EB0o
                                        ; .data:10067EB4o
                align 4
aSetctCredrev_1 db 'setct-CredRevReqTBE',0 ; DATA XREF: .data:off_10067E98o
                                        ; .data:10067E9Co
aSetctCredrestb db 'setct-CredResTBE',0 ; DATA XREF: .data:off_10067E80o
                                        ; .data:10067E84o
                align 4
aSetctCredreqtb db 'setct-CredReqTBEX',0 ; DATA XREF: .data:off_10067E68o
                                        ; .data:10067E6Co
                align 10h
aSetctCredreq_0 db 'setct-CredReqTBE',0 ; DATA XREF: .data:off_10067E50o
                                        ; .data:10067E54o
                align 4
aSetctCaprevres db 'setct-CapRevResTBE',0 ; DATA XREF: .data:off_10067E38o
                                        ; .data:10067E3Co
                align 4
aSetctCaprevreq db 'setct-CapRevReqTBEX',0 ; DATA XREF: .data:off_10067E20o
                                        ; .data:10067E24o
aSetctCaprevr_0 db 'setct-CapRevReqTBE',0 ; DATA XREF: .data:off_10067E08o
                                        ; .data:10067E0Co
                align 10h
aSetctCaprestbe db 'setct-CapResTBE',0  ; DATA XREF: .data:off_10067DF0o
                                        ; .data:10067DF4o
aSetctCapreqtbe db 'setct-CapReqTBEX',0 ; DATA XREF: .data:off_10067DD8o
                                        ; .data:10067DDCo
                align 4
aSetctCapreqt_0 db 'setct-CapReqTBE',0  ; DATA XREF: .data:off_10067DC0o
                                        ; .data:10067DC4o
aSetctAuthrevre db 'setct-AuthRevResTBEB',0 ; DATA XREF: .data:off_10067DA8o
                                        ; .data:10067DACo
                align 4
aSetctAuthrev_0 db 'setct-AuthRevResTBE',0 ; DATA XREF: .data:off_10067D90o
                                        ; .data:10067D94o
aSetctAuthrev_1 db 'setct-AuthRevReqTBE',0 ; DATA XREF: .data:off_10067D78o
                                        ; .data:10067D7Co
aSetctAcqcardco db 'setct-AcqCardCodeMsgTBE',0 ; DATA XREF: .data:off_10067D60o
                                        ; .data:10067D64o
aSetctCaptokent db 'setct-CapTokenTBEX',0 ; DATA XREF: .data:off_10067D48o
                                        ; .data:10067D4Co
                align 10h
aSetctCaptoke_0 db 'setct-CapTokenTBE',0 ; DATA XREF: .data:off_10067D30o
                                        ; .data:10067D34o
                align 4
aSetctAuthtoken db 'setct-AuthTokenTBE',0 ; DATA XREF: .data:off_10067D18o
                                        ; .data:10067D1Co
                align 4
aSetctAuthrestb db 'setct-AuthResTBEX',0 ; DATA XREF: .data:off_10067D00o
                                        ; .data:10067D04o
                align 4
aSetctAuthres_0 db 'setct-AuthResTBE',0 ; DATA XREF: .data:off_10067CE8o
                                        ; .data:10067CECo
                align 10h
aSetctAuthreqtb db 'setct-AuthReqTBE',0 ; DATA XREF: .data:off_10067CD0o
                                        ; .data:10067CD4o
                align 4
aSetctPiunsigne db 'setct-PIUnsignedTBE',0 ; DATA XREF: .data:off_10067CB8o
                                        ; .data:10067CBCo
aSetctPidualsig db 'setct-PIDualSignedTBE',0 ; DATA XREF: .data:off_10067CA0o
                                        ; .data:10067CA4o
                align 10h
aSetctErrortbs  db 'setct-ErrorTBS',0   ; DATA XREF: .data:off_10067C88o
                                        ; .data:10067C8Co
                align 10h
aSetctCertinqre db 'setct-CertInqReqTBS',0 ; DATA XREF: .data:off_10067C70o
                                        ; .data:10067C74o
aSetctCertresda db 'setct-CertResData',0 ; DATA XREF: .data:off_10067C58o
                                        ; .data:10067C5Co
                align 4
aSetctCertreq_1 db 'setct-CertReqTBS',0 ; DATA XREF: .data:off_10067C40o
                                        ; .data:10067C44o
                align 4
aSetctCertreqda db 'setct-CertReqData',0 ; DATA XREF: .data:off_10067C28o
                                        ; .data:10067C2Co
                align 10h
aSetctRegform_0 db 'setct-RegFormResTBS',0 ; DATA XREF: .data:off_10067C10o
                                        ; .data:10067C14o
aSetctMeaqcinit db 'setct-MeAqCInitResTBS',0 ; DATA XREF: .data:off_10067BF8o
                                        ; .data:10067BFCo
                align 4
aSetctCardcinit db 'setct-CardCInitResTBS',0 ; DATA XREF: .data:off_10067BE0o
                                        ; .data:10067BE4o
                align 4
aSetctBatchad_1 db 'setct-BatchAdminResData',0 ; DATA XREF: .data:off_10067BC8o
                                        ; .data:10067BCCo
aSetctBatchad_2 db 'setct-BatchAdminReqData',0 ; DATA XREF: .data:off_10067BB0o
                                        ; .data:10067BB4o
aSetctPcertrest db 'setct-PCertResTBS',0 ; DATA XREF: .data:off_10067B98o
                                        ; .data:10067B9Co
                align 4
aSetctPcertreqd db 'setct-PCertReqData',0 ; DATA XREF: .data:off_10067B80o
                                        ; .data:10067B84o
                align 4
aSetctCredrev_2 db 'setct-CredRevResData',0 ; DATA XREF: .data:off_10067B68o
                                        ; .data:10067B6Co
                align 4
aSetctCredrev_3 db 'setct-CredRevReqTBSX',0 ; DATA XREF: .data:off_10067B50o
                                        ; .data:10067B54o
                align 4
aSetctCredrev_4 db 'setct-CredRevReqTBS',0 ; DATA XREF: .data:off_10067B38o
                                        ; .data:10067B3Co
aSetctCredresda db 'setct-CredResData',0 ; DATA XREF: .data:off_10067B20o
                                        ; .data:10067B24o
                align 4
aSetctCredreq_1 db 'setct-CredReqTBSX',0 ; DATA XREF: .data:off_10067B08o
                                        ; .data:10067B0Co
                align 4
aSetctCredreq_2 db 'setct-CredReqTBS',0 ; DATA XREF: .data:off_10067AF0o
                                        ; .data:10067AF4o
                align 4
aSetctCaprevr_1 db 'setct-CapRevResData',0 ; DATA XREF: .data:off_10067AD8o
                                        ; .data:10067ADCo
aSetctCaprevr_2 db 'setct-CapRevReqTBSX',0 ; DATA XREF: .data:off_10067AC0o
                                        ; .data:10067AC4o
aSetctCaprevr_3 db 'setct-CapRevReqTBS',0 ; DATA XREF: .data:off_10067AA8o
                                        ; .data:10067AACo
                align 4
aSetctCapresdat db 'setct-CapResData',0 ; DATA XREF: .data:off_10067A90o
                                        ; .data:10067A94o
                align 4
aSetctCapreqtbs db 'setct-CapReqTBSX',0 ; DATA XREF: .data:off_10067A78o
                                        ; .data:10067A7Co
                align 10h
aSetctCapreqt_1 db 'setct-CapReqTBS',0  ; DATA XREF: .data:off_10067A60o
                                        ; .data:10067A64o
aSetctAuthrev_2 db 'setct-AuthRevResTBS',0 ; DATA XREF: .data:off_10067A48o
                                        ; .data:10067A4Co
aSetctAuthrev_3 db 'setct-AuthRevResData',0 ; DATA XREF: .data:off_10067A30o
                                        ; .data:10067A34o
                align 4
aSetctAuthrev_4 db 'setct-AuthRevReqTBS',0 ; DATA XREF: .data:off_10067A18o
                                        ; .data:10067A1Co
aSetctAcqcard_0 db 'setct-AcqCardCodeMsg',0 ; DATA XREF: .data:off_10067A00o
                                        ; .data:10067A04o
                align 4
aSetctCaptoke_1 db 'setct-CapTokenTBS',0 ; DATA XREF: .data:off_100679E8o
                                        ; .data:100679ECo
                align 4
aSetctCaptokend db 'setct-CapTokenData',0 ; DATA XREF: .data:off_100679D0o
                                        ; .data:100679D4o
                align 10h
aSetctAuthtok_0 db 'setct-AuthTokenTBS',0 ; DATA XREF: .data:off_100679B8o
                                        ; .data:100679BCo
                align 4
aSetctAuthres_1 db 'setct-AuthResTBSX',0 ; DATA XREF: .data:off_100679A0o
                                        ; .data:100679A4o
                align 4
aSetctAuthres_2 db 'setct-AuthResTBS',0 ; DATA XREF: .data:off_10067988o
                                        ; .data:1006798Co
                align 4
aSetctAuthreq_0 db 'setct-AuthReqTBS',0 ; DATA XREF: .data:off_10067970o
                                        ; .data:10067974o
                align 10h
aSetctPresdata  db 'setct-PResData',0   ; DATA XREF: .data:off_10067958o
                                        ; .data:1006795Co
                align 10h
aSetctPiTbs     db 'setct-PI-TBS',0     ; DATA XREF: .data:off_10067940o
                                        ; .data:10067944o
                align 10h
aSetctPinitresd db 'setct-PInitResData',0 ; DATA XREF: .data:off_10067928o
                                        ; .data:1006792Co
                align 4
aSetctCaptokens db 'setct-CapTokenSeq',0 ; DATA XREF: .data:off_10067910o
                                        ; .data:10067914o
                align 4
aSetctAuthrev_5 db 'setct-AuthRevResBaggage',0 ; DATA XREF: .data:off_100678F8o
                                        ; .data:100678FCo
aSetctAuthrev_6 db 'setct-AuthRevReqBaggage',0 ; DATA XREF: .data:off_100678E0o
                                        ; .data:100678E4o
aSetctAuthresba db 'setct-AuthResBaggage',0 ; DATA XREF: .data:off_100678C8o
                                        ; .data:100678CCo
                align 10h
aSetctHodinput  db 'setct-HODInput',0   ; DATA XREF: .data:off_100678B0o
                                        ; .data:100678B4o
                align 10h
aSetctPidatauns db 'setct-PIDataUnsigned',0 ; DATA XREF: .data:off_10067898o
                                        ; .data:1006789Co
                align 4
aSetctPidata    db 'setct-PIData',0     ; DATA XREF: .data:off_10067880o
                                        ; .data:10067884o
                align 4
aSetctPi        db 'setct-PI',0         ; DATA XREF: .data:off_10067868o
                                        ; .data:1006786Co
                align 4
aSetctOidata    db 'setct-OIData',0     ; DATA XREF: .data:off_10067850o
                                        ; .data:10067854o
                align 4
aSetctPanonly   db 'setct-PANOnly',0    ; DATA XREF: .data:off_10067838o
                                        ; .data:1006783Co
                align 4
aSetctPantoken  db 'setct-PANToken',0   ; DATA XREF: .data:off_10067820o
                                        ; .data:10067824o
                align 4
aSetctPandata   db 'setct-PANData',0    ; DATA XREF: .data:off_10067808o
                                        ; .data:1006780Co
                align 4
aSetBrand       db 'set-brand',0        ; DATA XREF: .data:off_100677F0o
                                        ; .data:100677F4o
                align 10h
aCertificateExt db 'certificate extensions',0 ; DATA XREF: .data:100677DCo
                align 4
aSetCertext     db 'set-certExt',0      ; DATA XREF: .data:off_100677D8o
aSetPolicy      db 'set-policy',0       ; DATA XREF: .data:off_100677C0o
                                        ; .data:100677C4o
                align 10h
aSetAttr        db 'set-attr',0         ; DATA XREF: .data:off_100677A8o
                                        ; .data:100677ACo
                align 4
aMessageExtensi db 'message extensions',0 ; DATA XREF: .data:10067794o
                align 10h
aSetMsgext      db 'set-msgExt',0       ; DATA XREF: .data:off_10067790o
                align 4
aContentTypes   db 'content types',0    ; DATA XREF: .data:1006777Co
                align 4
aSetCtype       db 'set-ctype',0        ; DATA XREF: .data:off_10067778o
                align 4
aSecureElectron db 'Secure Electronic Transactions',0 ; DATA XREF: .data:10067764o
                align 4
aIdSet          db 'id-set',0           ; DATA XREF: .data:off_10067760o
                align 10h
aPseudonym      db 'pseudonym',0        ; DATA XREF: .data:off_10067730o
                                        ; .data:10067734o
                align 4
aGenerationqual db 'generationQualifier',0 ; DATA XREF: .data:off_10067718o
                                        ; .data:1006771Co
aIdHexMultipart db 'id-hex-multipart-message',0 ; DATA XREF: .data:off_10067700o
                                        ; .data:10067704o
                align 4
aIdHexPartialMe db 'id-hex-partial-message',0 ; DATA XREF: .data:off_100676E8o
                                        ; .data:100676ECo
                align 4
aMimeMhsBodies  db 'mime-mhs-bodies',0  ; DATA XREF: .data:off_100676D0o
                                        ; .data:100676D4o
aMimeMhsHeading db 'mime-mhs-headings',0 ; DATA XREF: .data:off_100676B8o
                                        ; .data:100676BCo
                align 4
aMimeMhs        db 'MIME MHS',0         ; DATA XREF: .data:100676A4o
                align 4
aMimeMhs_0      db 'mime-mhs',0         ; DATA XREF: .data:off_100676A0o
                align 10h
aX500uniqueiden db 'x500UniqueIdentifier',0 ; DATA XREF: .data:off_10067688o
                                        ; .data:1006768Co
                align 4
aDocumentpublis db 'documentPublisher',0 ; DATA XREF: .data:off_10067670o
                                        ; .data:10067674o
                align 4
aAudio          db 'audio',0            ; DATA XREF: .data:off_10067658o
                                        ; .data:1006765Co
                align 4
aDitredirect    db 'dITRedirect',0      ; DATA XREF: .data:off_10067640o
                                        ; .data:10067644o
aPersonalsignat db 'personalSignature',0 ; DATA XREF: .data:off_10067628o
                                        ; .data:1006762Co
                align 4
aSubtreemaximum db 'subtreeMaximumQuality',0 ; DATA XREF: .data:off_10067610o
                                        ; .data:10067614o
                align 4
aSubtreeminimum db 'subtreeMinimumQuality',0 ; DATA XREF: .data:off_100675F8o
                                        ; .data:100675FCo
                align 4
aSinglelevelqua db 'singleLevelQuality',0 ; DATA XREF: .data:off_100675E0o
                                        ; .data:100675E4o
                align 4
aDsaquality     db 'dSAQuality',0       ; DATA XREF: .data:off_100675C8o
                                        ; .data:100675CCo
                align 4
aBuildingname   db 'buildingName',0     ; DATA XREF: .data:off_100675B0o
                                        ; .data:100675B4o
                align 4
aMailpreference db 'mailPreferenceOption',0 ; DATA XREF: .data:off_10067598o
                                        ; .data:1006759Co
                align 4
aJanetmailbox   db 'janetMailbox',0     ; DATA XREF: .data:off_10067580o
                                        ; .data:10067584o
                align 4
aOrganizational db 'organizationalStatus',0 ; DATA XREF: .data:off_10067568o
                                        ; .data:1006756Co
                align 4
aFriendlycountr db 'friendlyCountryName',0 ; DATA XREF: .data:off_10067550o
                                        ; .data:10067554o
aPagertelephone db 'pagerTelephoneNumber',0 ; DATA XREF: .data:off_10067538o
                                        ; .data:1006753Co
                align 10h
aMobiletelephon db 'mobileTelephoneNumber',0 ; DATA XREF: .data:off_10067520o
                                        ; .data:10067524o
                align 4
aPersonaltitle  db 'personalTitle',0    ; DATA XREF: .data:off_10067508o
                                        ; .data:1006750Co
                align 4
aHomepostaladdr db 'homePostalAddress',0 ; DATA XREF: .data:off_100674F0o
                                        ; .data:100674F4o
                align 4
aAssociatedname db 'associatedName',0   ; DATA XREF: .data:off_100674D8o
                                        ; .data:100674DCo
                align 4
aAssociateddoma db 'associatedDomain',0 ; DATA XREF: .data:off_100674C0o
                                        ; .data:100674C4o
                align 10h
aCnamerecord    db 'cNAMERecord',0      ; DATA XREF: .data:off_100674A8o
                                        ; .data:100674ACo
aSoarecord      db 'sOARecord',0        ; DATA XREF: .data:off_10067490o
                                        ; .data:10067494o
                align 4
aNsrecord       db 'nSRecord',0         ; DATA XREF: .data:off_10067478o
                                        ; .data:1006747Co
                align 4
aMxrecord       db 'mXRecord',0         ; DATA XREF: .data:off_10067460o
                                        ; .data:10067464o
                align 10h
aPilotattribute db 'pilotAttributeType27',0 ; DATA XREF: .data:off_10067448o
                                        ; .data:1006744Co
                align 4
aArecord        db 'aRecord',0          ; DATA XREF: .data:off_10067430o
                                        ; .data:10067434o
aLastmodifiedby db 'lastModifiedBy',0   ; DATA XREF: .data:off_10067418o
                                        ; .data:1006741Co
                align 10h
aLastmodifiedti db 'lastModifiedTime',0 ; DATA XREF: .data:off_10067400o
                                        ; .data:10067404o
                align 4
aOthermailbox   db 'otherMailbox',0     ; DATA XREF: .data:off_100673E8o
                                        ; .data:100673ECo
                align 4
aSecretary      db 'secretary',0        ; DATA XREF: .data:off_100673D0o
                                        ; .data:100673D4o
                align 10h
aHometelephonen db 'homeTelephoneNumber',0 ; DATA XREF: .data:off_100673B8o
                                        ; .data:100673BCo
aDocumentlocati db 'documentLocation',0 ; DATA XREF: .data:off_100673A0o
                                        ; .data:100673A4o
                align 4
aDocumentauthor db 'documentAuthor',0   ; DATA XREF: .data:off_10067388o
                                        ; .data:1006738Co
                align 4
aDocumentversio db 'documentVersion',0  ; DATA XREF: .data:off_10067370o
                                        ; .data:10067374o
aDocumenttitle  db 'documentTitle',0    ; DATA XREF: .data:off_10067358o
                                        ; .data:1006735Co
                align 4
aDocumentidenti db 'documentIdentifier',0 ; DATA XREF: .data:off_10067340o
                                        ; .data:10067344o
                align 4
aManager        db 'manager',0          ; DATA XREF: .data:off_10067328o
                                        ; .data:1006732Co
aHost           db 'host',0             ; DATA XREF: .data:off_10067310o
                                        ; .data:10067314o
                align 4
aUserclass      db 'userClass',0        ; DATA XREF: .data:off_100672F8o
                                        ; .data:100672FCo
                align 4
aPhoto          db 'photo',0            ; DATA XREF: .data:off_100672E0o
                                        ; .data:100672E4o
                align 10h
aRoomnumber     db 'roomNumber',0       ; DATA XREF: .data:off_100672C8o
                                        ; .data:100672CCo
                align 4
aFavouritedrink db 'favouriteDrink',0   ; DATA XREF: .data:off_100672B0o
                                        ; .data:100672B4o
                align 4
aInfo           db 'info',0             ; DATA XREF: .data:off_10067298o
                                        ; .data:1006729Co
                align 4
aRfc822mailbox  db 'rfc822Mailbox',0    ; DATA XREF: .data:10067284o
                align 4
aMail           db 'mail',0             ; DATA XREF: .data:off_10067280o
                align 4
aTextencodedora db 'textEncodedORAddress',0 ; DATA XREF: .data:off_10067268o
                                        ; .data:1006726Co
                align 4
aUserid         db 'userId',0           ; DATA XREF: .data:10067254o
                align 4
aUid            db 'UID',0              ; DATA XREF: .data:off_10067250o
aQualitylabelle db 'qualityLabelledData',0 ; DATA XREF: .data:off_10067238o
                                        ; .data:1006723Co
aPilotdsa       db 'pilotDSA',0         ; DATA XREF: .data:off_10067220o
                                        ; .data:10067224o
                align 10h
aPilotorganizat db 'pilotOrganization',0 ; DATA XREF: .data:off_10067208o
                                        ; .data:1006720Co
                align 4
aSimplesecurity db 'simpleSecurityObject',0 ; DATA XREF: .data:off_100671F0o
                                        ; .data:100671F4o
                align 4
aFriendlycoun_0 db 'friendlyCountry',0  ; DATA XREF: .data:off_100671D8o
                                        ; .data:100671DCo
aDomainrelatedo db 'domainRelatedObject',0 ; DATA XREF: .data:off_100671C0o
                                        ; .data:100671C4o
aDnsdomain      db 'dNSDomain',0        ; DATA XREF: .data:off_100671A8o
                                        ; .data:100671ACo
                align 4
aRfc822localpar db 'rFC822localPart',0  ; DATA XREF: .data:off_10067190o
                                        ; .data:10067194o
aDocumentseries db 'documentSeries',0   ; DATA XREF: .data:off_10067178o
                                        ; .data:1006717Co
                align 4
aRoom           db 'room',0             ; DATA XREF: .data:off_10067160o
                                        ; .data:10067164o
                align 4
aDocument       db 'document',0         ; DATA XREF: .data:off_10067148o
                                        ; .data:1006714Co
                align 10h
aAccount        db 'account',0          ; DATA XREF: .data:off_10067130o
                                        ; .data:10067134o
aPilotperson    db 'pilotPerson',0      ; DATA XREF: .data:off_10067118o
                                        ; .data:1006711Co
aPilotobject    db 'pilotObject',0      ; DATA XREF: .data:off_10067100o
                                        ; .data:10067104o
aCaseignoreia5s db 'caseIgnoreIA5StringSyntax',0 ; DATA XREF: .data:off_100670E8o
                                        ; .data:100670ECo
                align 4
aIa5stringsynta db 'iA5StringSyntax',0  ; DATA XREF: .data:off_100670D0o
                                        ; .data:100670D4o
aPilotgroups    db 'pilotGroups',0      ; DATA XREF: .data:off_100670B8o
                                        ; .data:100670BCo
aPilotobjectcla db 'pilotObjectClass',0 ; DATA XREF: .data:off_100670A0o
                                        ; .data:100670A4o
                align 4
aPilotattribu_0 db 'pilotAttributeSyntax',0 ; DATA XREF: .data:off_10067088o
                                        ; .data:1006708Co
                align 4
aPilotattribu_1 db 'pilotAttributeType',0 ; DATA XREF: .data:off_10067070o
                                        ; .data:10067074o
                align 4
aPilot          db 'pilot',0            ; DATA XREF: .data:off_10067058o
                                        ; .data:1006705Co
                align 10h
aUcl            db 'ucl',0              ; DATA XREF: .data:off_10067040o
                                        ; .data:10067044o
aPss            db 'pss',0              ; DATA XREF: .data:off_10067028o
                                        ; .data:1006702Co
aData           db 'data',0             ; DATA XREF: .data:off_10067010o
                                        ; .data:10067014o
                align 10h
aHoldInstructio db 'Hold Instruction Reject',0 ; DATA XREF: .data:10066FFCo
aHoldinstructio db 'holdInstructionReject',0 ; DATA XREF: .data:off_10066FF8o
                align 10h
aHoldInstruct_0 db 'Hold Instruction Call Issuer',0 ; DATA XREF: .data:10066FE4o
                align 10h
aHoldinstruct_0 db 'holdInstructionCallIssuer',0 ; DATA XREF: .data:off_10066FE0o
                align 4
aHoldInstruct_1 db 'Hold Instruction None',0 ; DATA XREF: .data:10066FCCo
                align 4
aHoldinstruct_1 db 'holdInstructionNone',0 ; DATA XREF: .data:off_10066FC8o
aHoldInstruct_2 db 'Hold Instruction Code',0 ; DATA XREF: .data:10066FB4o
                align 10h
aHoldinstruct_2 db 'holdInstructionCode',0 ; DATA XREF: .data:off_10066FB0o
aAes256Cfb      db 'aes-256-cfb',0      ; DATA XREF: .data:10066F9Co
aAes256Cfb_0    db 'AES-256-CFB',0      ; DATA XREF: .data:off_10066F98o
aAes256Ofb      db 'aes-256-ofb',0      ; DATA XREF: .data:10066F84o
aAes256Ofb_0    db 'AES-256-OFB',0      ; DATA XREF: .data:off_10066F80o
aAes256Cbc      db 'aes-256-cbc',0      ; DATA XREF: .data:10066F6Co
aAes256Cbc_0    db 'AES-256-CBC',0      ; DATA XREF: .data:off_10066F68o
aAes256Ecb      db 'aes-256-ecb',0      ; DATA XREF: .data:10066F54o
aAes256Ecb_0    db 'AES-256-ECB',0      ; DATA XREF: .data:off_10066F50o
aAes192Cfb      db 'aes-192-cfb',0      ; DATA XREF: .data:10066F3Co
aAes192Cfb_0    db 'AES-192-CFB',0      ; DATA XREF: .data:off_10066F38o
aAes192Ofb      db 'aes-192-ofb',0      ; DATA XREF: .data:10066F24o
aAes192Ofb_0    db 'AES-192-OFB',0      ; DATA XREF: .data:off_10066F20o
aAes192Cbc      db 'aes-192-cbc',0      ; DATA XREF: .data:10066F0Co
aAes192Cbc_0    db 'AES-192-CBC',0      ; DATA XREF: .data:off_10066F08o
aAes192Ecb      db 'aes-192-ecb',0      ; DATA XREF: .data:10066EF4o
aAes192Ecb_0    db 'AES-192-ECB',0      ; DATA XREF: .data:off_10066EF0o
aAes128Cfb      db 'aes-128-cfb',0      ; DATA XREF: .data:10066EDCo
aAes128Cfb_0    db 'AES-128-CFB',0      ; DATA XREF: .data:off_10066ED8o
aAes128Ofb      db 'aes-128-ofb',0      ; DATA XREF: .data:10066EC4o
aAes128Ofb_0    db 'AES-128-OFB',0      ; DATA XREF: .data:off_10066EC0o
aAes128Cbc      db 'aes-128-cbc',0      ; DATA XREF: .data:10066EACo
aAes128Cbc_0    db 'AES-128-CBC',0      ; DATA XREF: .data:off_10066EA8o
aAes128Ecb      db 'aes-128-ecb',0      ; DATA XREF: .data:10066E94o
aAes128Ecb_0    db 'AES-128-ECB',0      ; DATA XREF: .data:off_10066E90o
aMicrosoftCspNa db 'Microsoft CSP Name',0 ; DATA XREF: .data:10066E7Co
                align 4
aCspname        db 'CSPName',0          ; DATA XREF: .data:off_10066E78o
aEcdsaWithSha1  db 'ecdsa-with-SHA1',0  ; DATA XREF: .data:off_10066E60o
                                        ; .data:10066E64o
aPrime256v1     db 'prime256v1',0       ; DATA XREF: .data:off_10066E48o
                                        ; .data:10066E4Co
                align 4
aPrime239v3     db 'prime239v3',0       ; DATA XREF: .data:off_10066E30o
                                        ; .data:10066E34o
                align 4
aPrime239v2     db 'prime239v2',0       ; DATA XREF: .data:off_10066E18o
                                        ; .data:10066E1Co
                align 4
aPrime239v1     db 'prime239v1',0       ; DATA XREF: .data:off_10066E00o
                                        ; .data:10066E04o
                align 10h
aPrime192v3     db 'prime192v3',0       ; DATA XREF: .data:off_10066DE8o
                                        ; .data:10066DECo
                align 4
aPrime192v2     db 'prime192v2',0       ; DATA XREF: .data:off_10066DD0o
                                        ; .data:10066DD4o
                align 4
aPrime192v1     db 'prime192v1',0       ; DATA XREF: .data:off_10066DB8o
                                        ; .data:10066DBCo
                align 4
aIdEcpublickey  db 'id-ecPublicKey',0   ; DATA XREF: .data:off_10066DA0o
                                        ; .data:10066DA4o
                align 4
aCharacteristic db 'characteristic-two-field',0 ; DATA XREF: .data:off_10066D88o
                                        ; .data:10066D8Co
                align 10h
aPrimeField     db 'prime-field',0      ; DATA XREF: .data:off_10066D70o
                                        ; .data:10066D74o
aAnsiX9_62      db 'ANSI X9.62',0       ; DATA XREF: .data:10066D5Co
                align 4
aAnsiX962       db 'ansi-X9-62',0       ; DATA XREF: .data:off_10066D58o
                align 4
aX509v3NoRevoca db 'X509v3 No Revocation Available',0 ; DATA XREF: .data:10066D2Co
                align 4
aNorevavail     db 'noRevAvail',0       ; DATA XREF: .data:off_10066D28o
                align 10h
aX509v3AcTarget db 'X509v3 AC Targeting',0 ; DATA XREF: .data:10066D14o
aTargetinformat db 'targetInformation',0 ; DATA XREF: .data:off_10066D10o
                align 4
aX509v3PolicyCo db 'X509v3 Policy Constraints',0 ; DATA XREF: .data:10066CFCo
                align 4
aPolicyconstrai db 'policyConstraints',0 ; DATA XREF: .data:off_10066CF8o
                align 4
aRole           db 'role',0             ; DATA XREF: .data:off_10066CE0o
                                        ; .data:10066CE4o
                align 10h
aIdAcaEncattrs  db 'id-aca-encAttrs',0  ; DATA XREF: .data:off_10066CC8o
                                        ; .data:10066CCCo
aSubjectInforma db 'Subject Information Access',0 ; DATA XREF: .data:10066CB4o
                align 4
aSubjectinfoacc db 'subjectInfoAccess',0 ; DATA XREF: .data:off_10066CB0o
                align 10h
aAcProxying     db 'ac-proxying',0      ; DATA XREF: .data:off_10066C98o
                                        ; .data:10066C9Co
aMd4withrsaencr db 'md4WithRSAEncryption',0 ; DATA XREF: .data:10066C84o
                align 4
aRsaMd4         db 'RSA-MD4',0          ; DATA XREF: .data:off_10066C80o
aClearance      db 'clearance',0        ; DATA XREF: .data:off_10066C68o
                                        ; .data:10066C6Co
                align 4
aSelectedAttrib db 'Selected Attribute Types',0 ; DATA XREF: .data:10066C54o
                align 4
aSelectedAttr_0 db 'selected-attribute-types',0 ; DATA XREF: .data:off_10066C50o
                align 10h
aDomain         db 'Domain',0           ; DATA XREF: .data:10066C24o
                align 4
aDomain_0       db 'domain',0           ; DATA XREF: .data:off_10066C20o
                align 10h
aDomaincomponen db 'domainComponent',0  ; DATA XREF: .data:10066C0Co


                align 4
aDcobject       db 'dcObject',0         ; DATA XREF: .data:10066BF4o
                align 10h
aDcobject_0     db 'dcobject',0         ; DATA XREF: .data:off_10066BF0o
                align 4
aEnterprises    db 'Enterprises',0      ; DATA XREF: .data:10066BDCo
aEnterprises_0  db 'enterprises',0      ; DATA XREF: .data:off_10066BD8o
aMail_0         db 'Mail',0             ; DATA XREF: .data:off_10066BC0o
                                        ; .data:10066BC4o
                align 4
aSnmpv2         db 'SNMPv2',0           ; DATA XREF: .data:10066BACo
                align 4
aSnmpv2_0       db 'snmpv2',0           ; DATA XREF: .data:off_10066BA8o
                align 4
aSecurity       db 'Security',0         ; DATA XREF: .data:10066B94o
                align 4
aSecurity_0     db 'security',0         ; DATA XREF: .data:off_10066B90o
                align 4
aPrivate        db 'Private',0          ; DATA XREF: .data:10066B7Co
aPrivate_0      db 'private',0          ; DATA XREF: .data:off_10066B78o
aExperimental   db 'Experimental',0     ; DATA XREF: .data:10066B64o
                align 4
aExperimental_0 db 'experimental',0     ; DATA XREF: .data:off_10066B60o
                align 4
aManagement     db 'Management',0       ; DATA XREF: .data:10066B4Co
                align 10h
aMgmt           db 'mgmt',0             ; DATA XREF: .data:off_10066B48o
                align 4
aDirectory      db 'Directory',0        ; DATA XREF: .data:10066B34o
                align 4
aDirectory_0    db 'directory',0        ; DATA XREF: .data:off_10066B30o
                align 10h
aIana           db 'iana',0             ; DATA XREF: .data:10066B1Co
                align 4
aIana_0         db 'IANA',0             ; DATA XREF: .data:off_10066B18o
                align 10h
aDod            db 'dod',0              ; DATA XREF: .data:10066B04o
aDod_0          db 'DOD',0              ; DATA XREF: .data:off_10066B00o
aOrg            db 'org',0              ; DATA XREF: .data:10066AECo
aOrg_0          db 'ORG',0              ; DATA XREF: .data:off_10066AE8o
aDirectoryServi db 'directory services - algorithms',0 ; DATA XREF: .data:10066AD4o
aX500algorithms db 'X500algorithms',0   ; DATA XREF: .data:off_10066AD0o
                align 10h
aRsasignature   db 'rsaSignature',0     ; DATA XREF: .data:off_10066AB8o
                                        ; .data:10066ABCo
                align 10h
aAlgorithm      db 'algorithm',0        ; DATA XREF: .rdata:1005B3F0o
                                        ; .data:off_10066AA0o ...
                align 4
aTrustRoot      db 'Trust Root',0       ; DATA XREF: .data:10066A8Co
                align 4
aTrustroot      db 'trustRoot',0        ; DATA XREF: .data:off_10066A88o
                align 4
aPath           db 'path',0             ; DATA XREF: .data:off_10066A70o
                                        ; .data:10066A74o
                align 4
aValid          db 'valid',0            ; DATA XREF: .data:off_10066A58o
                                        ; .data:10066A5Co
                align 4
aExtendedOcspSt db 'Extended OCSP Status',0 ; DATA XREF: .data:10066A44o
                align 4
aExtendedstatus db 'extendedStatus',0   ; DATA XREF: .data:off_10066A40o
                align 4
aOcspServiceLoc db 'OCSP Service Locator',0 ; DATA XREF: .data:10066A2Co
                align 4
aServicelocator db 'serviceLocator',0   ; DATA XREF: .data:off_10066A28o
                align 4
aOcspArchiveCut db 'OCSP Archive Cutoff',0 ; DATA XREF: .data:10066A14o
aArchivecutoff  db 'archiveCutoff',0    ; DATA XREF: .data:off_10066A10o
                align 4
aOcspNoCheck    db 'OCSP No Check',0    ; DATA XREF: .data:100669FCo
                align 4
aNocheck        db 'noCheck',0          ; DATA XREF: .data:off_100669F8o
aAcceptableOcsp db 'Acceptable OCSP Responses',0 ; DATA XREF: .data:100669E4o
                align 4
aAcceptableresp db 'acceptableResponses',0 ; DATA XREF: .data:off_100669E0o
aOcspCrlId      db 'OCSP CRL ID',0      ; DATA XREF: .data:100669CCo
aCrlid          db 'CrlID',0            ; DATA XREF: .data:off_100669C8o
                align 4
aOcspNonce      db 'OCSP Nonce',0       ; DATA XREF: .data:100669B4o
                align 10h
aNonce          db 'Nonce',0            ; DATA XREF: .data:off_100669B0o
                align 4
aBasicOcspRespo db 'Basic OCSP Response',0 ; DATA XREF: .data:1006699Co
aBasicocsprespo db 'basicOCSPResponse',0 ; DATA XREF: .data:off_10066998o
                align 10h
aAdDvcs         db 'ad dvcs',0          ; DATA XREF: .data:10066984o
aAd_dvcs        db 'AD_DVCS',0          ; DATA XREF: .data:off_10066980o
aAdTimeStamping db 'AD Time Stamping',0 ; DATA XREF: .data:1006696Co
                align 4
aAd_timestampin db 'ad_timestamping',0  ; DATA XREF: .data:off_10066968o
aIdCctPkirespon db 'id-cct-PKIResponse',0 ; DATA XREF: .data:off_10066950o
                                        ; .data:10066954o
                align 4
aIdCctPkidata   db 'id-cct-PKIData',0   ; DATA XREF: .data:off_10066938o
                                        ; .data:1006693Co
                align 4
aIdCctCrs       db 'id-cct-crs',0       ; DATA XREF: .data:off_10066920o
                                        ; .data:10066924o
                align 4
aIdQcsPkixqcsyn db 'id-qcs-pkixQCSyntax-v1',0 ; DATA XREF: .data:off_10066908o
                                        ; .data:1006690Co
                align 4
aIdAcaRole      db 'id-aca-role',0      ; DATA XREF: .data:off_100668F0o
                                        ; .data:100668F4o
aIdAcaGroup     db 'id-aca-group',0     ; DATA XREF: .data:off_100668D8o
                                        ; .data:100668DCo
                align 4
aIdAcaChargingi db 'id-aca-chargingIdentity',0 ; DATA XREF: .data:off_100668C0o
                                        ; .data:100668C4o
aIdAcaAccesside db 'id-aca-accessIdentity',0 ; DATA XREF: .data:off_100668A8o
                                        ; .data:100668ACo
                align 4
aIdAcaAuthentic db 'id-aca-authenticationInfo',0 ; DATA XREF: .data:off_10066890o
                                        ; .data:10066894o
                align 4
aIdPdaCountryof db 'id-pda-countryOfResidence',0 ; DATA XREF: .data:off_10066878o
                                        ; .data:1006687Co
                align 10h
aIdPdaCountry_0 db 'id-pda-countryOfCitizenship',0 ; DATA XREF: .data:off_10066860o
                                        ; .data:10066864o
aIdPdaGender    db 'id-pda-gender',0    ; DATA XREF: .data:off_10066848o
                                        ; .data:1006684Co
                align 4
aIdPdaPlaceofbi db 'id-pda-placeOfBirth',0 ; DATA XREF: .data:off_10066818o
                                        ; .data:1006681Co
aIdPdaDateofbir db 'id-pda-dateOfBirth',0 ; DATA XREF: .data:off_10066800o
                                        ; .data:10066804o
                align 4
aIdOnPersonalda db 'id-on-personalData',0 ; DATA XREF: .data:off_100667E8o
                                        ; .data:100667ECo
                align 4
aIdCmcConfirmce db 'id-cmc-confirmCertAcceptance',0 ; DATA XREF: .data:off_100667D0o
                                        ; .data:100667D4o
                align 4
aIdCmcPoplinkwi db 'id-cmc-popLinkWitness',0 ; DATA XREF: .data:off_100667B8o
                                        ; .data:100667BCo
                align 10h
aIdCmcPoplinkra db 'id-cmc-popLinkRandom',0 ; DATA XREF: .data:off_100667A0o
                                        ; .data:100667A4o
                align 4
aIdCmcQuerypend db 'id-cmc-queryPending',0 ; DATA XREF: .data:off_10066788o
                                        ; .data:1006678Co
aIdCmcResponsei db 'id-cmc-responseInfo',0 ; DATA XREF: .data:off_10066770o
                                        ; .data:10066774o
aIdCmcReginfo   db 'id-cmc-regInfo',0   ; DATA XREF: .data:off_10066758o
                                        ; .data:1006675Co
                align 10h
aIdCmcRevokereq db 'id-cmc-revokeRequest',0 ; DATA XREF: .data:off_10066740o
                                        ; .data:10066744o
                align 4
aIdCmcGetcrl    db 'id-cmc-getCRL',0    ; DATA XREF: .data:off_10066728o
                                        ; .data:1006672Co
                align 4
aIdCmcGetcert   db 'id-cmc-getCert',0   ; DATA XREF: .data:off_10066710o
                                        ; .data:10066714o
                align 4
aIdCmcLrapopwit db 'id-cmc-lraPOPWitness',0 ; DATA XREF: .data:off_100666F8o
                                        ; .data:100666FCo
                align 10h
aIdCmcDecrypted db 'id-cmc-decryptedPOP',0 ; DATA XREF: .data:off_100666E0o
                                        ; .data:100666E4o
aIdCmcEncrypted db 'id-cmc-encryptedPOP',0 ; DATA XREF: .data:off_100666C8o
                                        ; .data:100666CCo
aIdCmcAddextens db 'id-cmc-addExtensions',0 ; DATA XREF: .data:off_100666B0o
                                        ; .data:100666B4o
                align 10h
aIdCmcRecipient db 'id-cmc-recipientNonce',0 ; DATA XREF: .data:off_10066698o
                                        ; .data:1006669Co
                align 4
aIdCmcSendernon db 'id-cmc-senderNonce',0 ; DATA XREF: .data:off_10066680o
                                        ; .data:10066684o
                align 4
aIdCmcTransacti db 'id-cmc-transactionId',0 ; DATA XREF: .data:off_10066668o
                                        ; .data:1006666Co
                align 4
aIdCmcDataretur db 'id-cmc-dataReturn',0 ; DATA XREF: .data:off_10066650o
                                        ; .data:10066654o
                align 4
aIdCmcIdentityp db 'id-cmc-identityProof',0 ; DATA XREF: .data:off_10066638o
                                        ; .data:1006663Co
                align 10h
aIdCmcIdentific db 'id-cmc-identification',0 ; DATA XREF: .data:off_10066620o
                                        ; .data:10066624o
                align 4
aIdCmcStatusinf db 'id-cmc-statusInfo',0 ; DATA XREF: .data:off_10066608o
                                        ; .data:1006660Co
                align 4
aIdAlgDhPop     db 'id-alg-dh-pop',0    ; DATA XREF: .data:off_100665F0o
                                        ; .data:100665F4o
                align 4
aIdAlgDhSigHmac db 'id-alg-dh-sig-hmac-sha1',0 ; DATA XREF: .data:off_100665D8o
                                        ; .data:100665DCo
aIdAlgNosignatu db 'id-alg-noSignature',0 ; DATA XREF: .data:off_100665C0o
                                        ; .data:100665C4o
                align 4
aIdAlgDes40     db 'id-alg-des40',0     ; DATA XREF: .data:off_100665A8o
                                        ; .data:100665ACo
                align 4
aIdReginfoCertr db 'id-regInfo-certReq',0 ; DATA XREF: .data:off_10066590o
                                        ; .data:10066594o
                align 4
aIdReginfoUtf8p db 'id-regInfo-utf8Pairs',0 ; DATA XREF: .data:off_10066578o
                                        ; .data:1006657Co
                align 4
aIdRegctrlProto db 'id-regCtrl-protocolEncrKey',0 ; DATA XREF: .data:off_10066560o
                                        ; .data:10066564o
                align 10h
aIdRegctrlOldce db 'id-regCtrl-oldCertID',0 ; DATA XREF: .data:off_10066548o
                                        ; .data:1006654Co
                align 4
aIdRegctrlPkiar db 'id-regCtrl-pkiArchiveOptions',0 ; DATA XREF: .data:off_10066530o
                                        ; .data:10066534o
                align 4
aIdRegctrlPkipu db 'id-regCtrl-pkiPublicationInfo',0 ; DATA XREF: .data:off_10066518o
                                        ; .data:1006651Co
                align 4
aIdRegctrlAuthe db 'id-regCtrl-authenticator',0 ; DATA XREF: .data:off_10066500o
                                        ; .data:10066504o
                align 4
aIdRegctrlRegto db 'id-regCtrl-regToken',0 ; DATA XREF: .data:off_100664E8o
                                        ; .data:100664ECo
aIdReginfo      db 'id-regInfo',0       ; DATA XREF: .data:off_100664D0o
                                        ; .data:100664D4o
                align 4
aIdRegctrl      db 'id-regCtrl',0       ; DATA XREF: .data:off_100664B8o
                                        ; .data:100664BCo
                align 10h
aIdItOrigpkimes db 'id-it-origPKIMessage',0 ; DATA XREF: .data:off_100664A0o
                                        ; .data:100664A4o
                align 4
aIdItConfirmwai db 'id-it-confirmWaitTime',0 ; DATA XREF: .data:off_10066488o
                                        ; .data:1006648Co
                align 10h
aIdItImplicitco db 'id-it-implicitConfirm',0 ; DATA XREF: .data:off_10066470o
                                        ; .data:10066474o
                align 4
aIdItRevpassphr db 'id-it-revPassphrase',0 ; DATA XREF: .data:off_10066458o
                                        ; .data:1006645Co
aIdItKeypairpar db 'id-it-keyPairParamRep',0 ; DATA XREF: .data:off_10066440o
                                        ; .data:10066444o
                align 4
aIdItKeypairp_0 db 'id-it-keyPairParamReq',0 ; DATA XREF: .data:off_10066428o
                                        ; .data:1006642Co
                align 4
aIdItSubscripti db 'id-it-subscriptionResponse',0 ; DATA XREF: .data:off_10066410o
                                        ; .data:10066414o
                align 4
aIdItSubscrip_0 db 'id-it-subscriptionRequest',0 ; DATA XREF: .data:off_100663F8o
                                        ; .data:100663FCo
                align 4
aIdItUnsupporte db 'id-it-unsupportedOIDs',0 ; DATA XREF: .data:off_100663E0o
                                        ; .data:100663E4o
                align 4
aIdItCurrentcrl db 'id-it-currentCRL',0 ; DATA XREF: .data:off_100663C8o
                                        ; .data:100663CCo
                align 10h
aIdItCakeyupdat db 'id-it-caKeyUpdateInfo',0 ; DATA XREF: .data:off_100663B0o
                                        ; .data:100663B4o
                align 4
aIdItPreferreds db 'id-it-preferredSymmAlg',0 ; DATA XREF: .data:off_10066398o
                                        ; .data:1006639Co
                align 10h
aIdItEnckeypair db 'id-it-encKeyPairTypes',0 ; DATA XREF: .data:off_10066380o
                                        ; .data:10066384o
                align 4
aIdItSignkeypai db 'id-it-signKeyPairTypes',0 ; DATA XREF: .data:off_10066368o
                                        ; .data:1006636Co
                align 10h
aIdItCaprotencc db 'id-it-caProtEncCert',0 ; DATA XREF: .data:off_10066350o
                                        ; .data:10066354o
aDvcs           db 'dvcs',0             ; DATA XREF: .data:1006633Co
                align 4
aDvcs_0         db 'DVCS',0             ; DATA XREF: .data:off_10066338o
                align 4
aIpsecUser      db 'IPSec User',0       ; DATA XREF: .data:10066324o
                align 10h
aIpsecuser      db 'ipsecUser',0        ; DATA XREF: .data:off_10066320o
                align 4
aIpsecTunnel    db 'IPSec Tunnel',0     ; DATA XREF: .data:1006630Co
                align 4
aIpsectunnel    db 'ipsecTunnel',0      ; DATA XREF: .data:off_10066308o
aIpsecEndSystem db 'IPSec End System',0 ; DATA XREF: .data:100662F4o
                align 4
aIpsecendsystem db 'ipsecEndSystem',0   ; DATA XREF: .data:off_100662F0o
                align 4
aTextnotice     db 'textNotice',0       ; DATA XREF: .data:off_100662D8o
                                        ; .data:100662DCo
                align 4
aSbgpRouteriden db 'sbgp-routerIdentifier',0 ; DATA XREF: .data:off_100662C0o
                                        ; .data:100662C4o
                align 10h
aSbgpAutonomous db 'sbgp-autonomousSysNum',0 ; DATA XREF: .data:off_100662A8o
                                        ; .data:100662ACo
                align 4
aSbgpIpaddrbloc db 'sbgp-ipAddrBlock',0 ; DATA XREF: .data:off_10066290o
                                        ; .data:10066294o
                align 4
aAacontrols     db 'aaControls',0       ; DATA XREF: .data:off_10066278o
                                        ; .data:1006627Co
                align 4
aAcTargeting    db 'ac-targeting',0     ; DATA XREF: .data:off_10066260o
                                        ; .data:10066264o
                align 4
aAcAuditentity  db 'ac-auditEntity',0   ; DATA XREF: .data:off_10066248o
                                        ; .data:1006624Co
                align 4
aQcstatements   db 'qcStatements',0     ; DATA XREF: .data:off_10066230o
                                        ; .data:10066234o
                align 4
aBiometricInfo  db 'Biometric Info',0   ; DATA XREF: .data:1006621Co
                align 4
aBiometricinfo  db 'biometricInfo',0    ; DATA XREF: .data:off_10066218o
                align 4
aIdModCmp2000   db 'id-mod-cmp2000',0   ; DATA XREF: .data:off_10066200o
                                        ; .data:10066204o
                align 4
aIdModDvcs      db 'id-mod-dvcs',0      ; DATA XREF: .data:off_100661E8o
                                        ; .data:100661ECo
aIdModOcsp      db 'id-mod-ocsp',0      ; DATA XREF: .data:off_100661D0o
                                        ; .data:100661D4o
aIdModTimestamp db 'id-mod-timestamp-protocol',0 ; DATA XREF: .data:off_100661B8o
                                        ; .data:100661BCo
                align 4
aIdModAttribute db 'id-mod-attribute-cert',0 ; DATA XREF: .data:off_100661A0o
                                        ; .data:100661A4o
                align 4
aIdModQualified db 'id-mod-qualified-cert-93',0 ; DATA XREF: .data:off_10066188o
                                        ; .data:1006618Co
                align 10h
aIdModQualifi_0 db 'id-mod-qualified-cert-88',0 ; DATA XREF: .data:off_10066170o
                                        ; .data:10066174o
                align 4
aIdModCmp       db 'id-mod-cmp',0       ; DATA XREF: .data:off_10066158o
                                        ; .data:1006615Co
                align 4
aIdModKeaProfil db 'id-mod-kea-profile-93',0 ; DATA XREF: .data:off_10066140o
                                        ; .data:10066144o
                align 10h
aIdModKeaProf_0 db 'id-mod-kea-profile-88',0 ; DATA XREF: .data:off_10066128o
                                        ; .data:1006612Co
                align 4
aIdModCmc       db 'id-mod-cmc',0       ; DATA XREF: .data:off_10066110o
                                        ; .data:10066114o
                align 4
aIdModCrmf      db 'id-mod-crmf',0      ; DATA XREF: .data:off_100660F8o
                                        ; .data:100660FCo
aIdPkix1Implici db 'id-pkix1-implicit-93',0 ; DATA XREF: .data:off_100660E0o
                                        ; .data:100660E4o
                align 4
aIdPkix1Explici db 'id-pkix1-explicit-93',0 ; DATA XREF: .data:off_100660C8o
                                        ; .data:100660CCo
                align 10h
aIdPkix1Impli_0 db 'id-pkix1-implicit-88',0 ; DATA XREF: .data:off_100660B0o
                                        ; .data:100660B4o
                align 4
aIdPkix1Expli_0 db 'id-pkix1-explicit-88',0 ; DATA XREF: .data:off_10066098o
                                        ; .data:1006609Co
                align 10h
aIdCct          db 'id-cct',0           ; DATA XREF: .data:off_10066080o
                                        ; .data:10066084o
                align 4
aIdQcs          db 'id-qcs',0           ; DATA XREF: .data:off_10066068o
                                        ; .data:1006606Co
                align 10h
aIdAca          db 'id-aca',0           ; DATA XREF: .data:off_10066050o
                                        ; .data:10066054o
                align 4
aIdPda          db 'id-pda',0           ; DATA XREF: .data:off_10066038o
                                        ; .data:1006603Co
                align 10h
aIdOn           db 'id-on',0            ; DATA XREF: .data:off_10066020o
                                        ; .data:10066024o
                align 4
aIdCmc          db 'id-cmc',0           ; DATA XREF: .data:off_10066008o
                                        ; .data:1006600Co
                align 10h
aIdAlg          db 'id-alg',0           ; DATA XREF: .data:off_10065FF0o
                                        ; .data:10065FF4o
                align 4
aIdPkip         db 'id-pkip',0          ; DATA XREF: .data:off_10065FD8o
                                        ; .data:10065FDCo
aIdIt           db 'id-it',0            ; DATA XREF: .data:off_10065FC0o
                                        ; .data:10065FC4o
                align 4
aIdQt           db 'id-qt',0            ; DATA XREF: .data:off_10065FA8o
                                        ; .data:10065FACo
                align 10h
aIdPkixMod      db 'id-pkix-mod',0      ; DATA XREF: .data:off_10065F90o
                                        ; .data:10065F94o
aMd4            db 'md4',0              ; DATA XREF: .data:10065F7Co
aMd4_0          db 'MD4',0              ; DATA XREF: .data:off_10065F78o
aIdSmimeCtiEtsP db 'id-smime-cti-ets-proofOfCreation',0 ; DATA XREF: .data:off_10065F60o
                                        ; .data:10065F64o
                align 4
aIdSmimeCtiEt_0 db 'id-smime-cti-ets-proofOfApproval',0 ; DATA XREF: .data:off_10065F48o
                                        ; .data:10065F4Co
                align 4
aIdSmimeCtiEt_1 db 'id-smime-cti-ets-proofOfSender',0 ; DATA XREF: .data:off_10065F30o
                                        ; .data:10065F34o
                align 4
aIdSmimeCtiEt_2 db 'id-smime-cti-ets-proofOfDelivery',0 ; DATA XREF: .data:off_10065F18o
                                        ; .data:10065F1Co
                align 10h
aIdSmimeCtiEt_3 db 'id-smime-cti-ets-proofOfReceipt',0 ; DATA XREF: .data:off_10065F00o
                                        ; .data:10065F04o
aIdSmimeCtiEt_4 db 'id-smime-cti-ets-proofOfOrigin',0 ; DATA XREF: .data:off_10065EE8o
                                        ; .data:10065EECo
                align 10h
aIdSmimeSpqEtsS db 'id-smime-spq-ets-sqt-unotice',0 ; DATA XREF: .data:off_10065ED0o
                                        ; .data:10065ED4o
                align 10h
aIdSmimeSpqEt_0 db 'id-smime-spq-ets-sqt-uri',0 ; DATA XREF: .data:off_10065EB8o
                                        ; .data:10065EBCo
                align 4
aIdSmimeCdLdap  db 'id-smime-cd-ldap',0 ; DATA XREF: .data:off_10065EA0o
                                        ; .data:10065EA4o
                align 10h
aIdSmimeAlgCmsr db 'id-smime-alg-CMSRC2wrap',0 ; DATA XREF: .data:off_10065E88o
                                        ; .data:10065E8Co
aIdSmimeAlgCms3 db 'id-smime-alg-CMS3DESwrap',0 ; DATA XREF: .data:off_10065E70o
                                        ; .data:10065E74o
                align 4
aIdSmimeAlgEsdh db 'id-smime-alg-ESDH',0 ; DATA XREF: .data:off_10065E58o
                                        ; .data:10065E5Co
                align 4
aIdSmimeAlgRc2w db 'id-smime-alg-RC2wrap',0 ; DATA XREF: .data:off_10065E40o
                                        ; .data:10065E44o
                align 10h
aIdSmimeAlg3des db 'id-smime-alg-3DESwrap',0 ; DATA XREF: .data:off_10065E28o
                                        ; .data:10065E2Co
                align 4
aIdSmimeAlgEs_0 db 'id-smime-alg-ESDHwithRC2',0 ; DATA XREF: .data:off_10065E10o
                                        ; .data:10065E14o
                align 4
aIdSmimeAlgEs_1 db 'id-smime-alg-ESDHwith3DES',0 ; DATA XREF: .data:off_10065DF8o
                                        ; .data:10065DFCo
                align 10h
aIdSmimeAaDvcsD db 'id-smime-aa-dvcs-dvc',0 ; DATA XREF: .data:off_10065DE0o
                                        ; .data:10065DE4o
                align 4
aIdSmimeAaSigna db 'id-smime-aa-signatureType',0 ; DATA XREF: .data:off_10065DC8o
                                        ; .data:10065DCCo
                align 4
aIdSmimeAaEtsAr db 'id-smime-aa-ets-archiveTimeStamp',0 ; DATA XREF: .data:off_10065DB0o
                                        ; .data:10065DB4o
                align 4
aIdSmimeAaEtsCe db 'id-smime-aa-ets-certCRLTimestamp',0 ; DATA XREF: .data:off_10065D98o
                                        ; .data:10065D9Co
                align 4
aIdSmimeAaEtsEs db 'id-smime-aa-ets-escTimeStamp',0 ; DATA XREF: .data:off_10065D80o
                                        ; .data:10065D84o
                align 4
aIdSmimeAaEtsRe db 'id-smime-aa-ets-revocationValues',0 ; DATA XREF: .data:off_10065D68o
                                        ; .data:10065D6Co
                align 10h
aIdSmimeAaEts_0 db 'id-smime-aa-ets-certValues',0 ; DATA XREF: .data:off_10065D50o
                                        ; .data:10065D54o
                align 4
aIdSmimeAaEts_1 db 'id-smime-aa-ets-RevocationRefs',0 ; DATA XREF: .data:off_10065D38o
                                        ; .data:10065D3Co
                align 4
aIdSmimeAaEts_2 db 'id-smime-aa-ets-CertificateRefs',0 ; DATA XREF: .data:off_10065D20o
                                        ; .data:10065D24o
aIdSmimeAaEtsCo db 'id-smime-aa-ets-contentTimestamp',0 ; DATA XREF: .data:off_10065D08o
                                        ; .data:10065D0Co
                align 10h
aIdSmimeAaEtsOt db 'id-smime-aa-ets-otherSigCert',0 ; DATA XREF: .data:off_10065CF0o
                                        ; .data:10065CF4o
                align 10h
aIdSmimeAaEtsSi db 'id-smime-aa-ets-signerAttr',0 ; DATA XREF: .data:off_10065CD8o
                                        ; .data:10065CDCo
                align 4
aIdSmimeAaEts_3 db 'id-smime-aa-ets-signerLocation',0 ; DATA XREF: .data:off_10065CC0o
                                        ; .data:10065CC4o
                align 4
aIdSmimeAaEts_4 db 'id-smime-aa-ets-commitmentType',0 ; DATA XREF: .data:off_10065CA8o
                                        ; .data:10065CACo
                align 4
aIdSmimeAaEts_5 db 'id-smime-aa-ets-sigPolicyId',0 ; DATA XREF: .data:off_10065C90o
                                        ; .data:10065C94o
aIdSmimeAaTimes db 'id-smime-aa-timeStampToken',0 ; DATA XREF: .data:off_10065C78o
                                        ; .data:10065C7Co
                align 4
aIdSmimeAaSmime db 'id-smime-aa-smimeEncryptCerts',0 ; DATA XREF: .data:off_10065C60o
                                        ; .data:10065C64o
                align 4
aIdSmimeAaSigni db 'id-smime-aa-signingCertificate',0 ; DATA XREF: .data:off_10065C48o
                                        ; .data:10065C4Co
                align 4
aIdSmimeAaEncry db 'id-smime-aa-encrypKeyPref',0 ; DATA XREF: .data:off_10065C30o
                                        ; .data:10065C34o
                align 10h
aIdSmimeAaConte db 'id-smime-aa-contentReference',0 ; DATA XREF: .data:off_10065C18o
                                        ; .data:10065C1Co
                align 10h
aIdSmimeAaEquiv db 'id-smime-aa-equivalentLabels',0 ; DATA XREF: .data:off_10065C00o
                                        ; .data:10065C04o
                align 10h
aIdSmimeAaMacva db 'id-smime-aa-macValue',0 ; DATA XREF: .data:off_10065BE8o
                                        ; .data:10065BECo
                align 4
aIdSmimeAaCon_0 db 'id-smime-aa-contentIdentifier',0 ; DATA XREF: .data:off_10065BD0o
                                        ; .data:10065BD4o
                align 4
aIdSmimeAaEncap db 'id-smime-aa-encapContentType',0 ; DATA XREF: .data:off_10065BB8o
                                        ; .data:10065BBCo
                align 4
aIdSmimeAaMsgsi db 'id-smime-aa-msgSigDigest',0 ; DATA XREF: .data:off_10065BA0o
                                        ; .data:10065BA4o
                align 4
aIdSmimeAaCon_1 db 'id-smime-aa-contentHint',0 ; DATA XREF: .data:off_10065B88o
                                        ; .data:10065B8Co
aIdSmimeAaMlexp db 'id-smime-aa-mlExpandHistory',0 ; DATA XREF: .data:off_10065B70o
                                        ; .data:10065B74o
aIdSmimeAaSecur db 'id-smime-aa-securityLabel',0 ; DATA XREF: .data:off_10065B58o
                                        ; .data:10065B5Co
                align 4
aIdSmimeAaRecei db 'id-smime-aa-receiptRequest',0 ; DATA XREF: .data:off_10065B40o
                                        ; .data:10065B44o
                align 10h
aIdSmimeCtDvcsr db 'id-smime-ct-DVCSResponseData',0 ; DATA XREF: .data:off_10065B28o
                                        ; .data:10065B2Co
                align 10h
aIdSmimeCtDvc_0 db 'id-smime-ct-DVCSRequestData',0 ; DATA XREF: .data:off_10065B10o
                                        ; .data:10065B14o
aIdSmimeCtConte db 'id-smime-ct-contentInfo',0 ; DATA XREF: .data:off_10065AF8o
                                        ; .data:10065AFCo
aIdSmimeCtTdtin db 'id-smime-ct-TDTInfo',0 ; DATA XREF: .data:off_10065AE0o
                                        ; .data:10065AE4o
aIdSmimeCtTstin db 'id-smime-ct-TSTInfo',0 ; DATA XREF: .data:off_10065AC8o
                                        ; .data:10065ACCo
aIdSmimeCtPubli db 'id-smime-ct-publishCert',0 ; DATA XREF: .data:off_10065AB0o
                                        ; .data:10065AB4o
aIdSmimeCtAuthd db 'id-smime-ct-authData',0 ; DATA XREF: .data:off_10065A98o
                                        ; .data:10065A9Co
                align 4
aIdSmimeCtRecei db 'id-smime-ct-receipt',0 ; DATA XREF: .data:off_10065A80o
                                        ; .data:10065A84o
aIdSmimeModEtsE db 'id-smime-mod-ets-eSigPolicy-97',0 ; DATA XREF: .data:off_10065A68o
                                        ; .data:10065A6Co
                align 10h
aIdSmimeModEt_0 db 'id-smime-mod-ets-eSigPolicy-88',0 ; DATA XREF: .data:off_10065A50o
                                        ; .data:10065A54o
                align 10h
aIdSmimeModEt_1 db 'id-smime-mod-ets-eSignature-97',0 ; DATA XREF: .data:off_10065A38o
                                        ; .data:10065A3Co
                align 10h
aIdSmimeModEt_2 db 'id-smime-mod-ets-eSignature-88',0 ; DATA XREF: .data:off_10065A20o
                                        ; .data:10065A24o
                align 10h
aIdSmimeModMsgV db 'id-smime-mod-msg-v3',0 ; DATA XREF: .data:off_10065A08o
                                        ; .data:10065A0Co
aIdSmimeModOid  db 'id-smime-mod-oid',0 ; DATA XREF: .data:off_100659F0o
                                        ; .data:100659F4o
                align 4
aIdSmimeModEss  db 'id-smime-mod-ess',0 ; DATA XREF: .data:off_100659D8o
                                        ; .data:100659DCo
                align 4
aIdSmimeModCms  db 'id-smime-mod-cms',0 ; DATA XREF: .data:off_100659C0o
                                        ; .data:100659C4o
                align 10h
aIdSmimeCti     db 'id-smime-cti',0     ; DATA XREF: .data:off_100659A8o
                                        ; .data:100659ACo
                align 10h
aIdSmimeSpq     db 'id-smime-spq',0     ; DATA XREF: .data:off_10065990o
                                        ; .data:10065994o
                align 10h
aIdSmimeCd      db 'id-smime-cd',0      ; DATA XREF: .data:off_10065978o
                                        ; .data:1006597Co
aIdSmimeAlg     db 'id-smime-alg',0     ; DATA XREF: .data:off_10065960o
                                        ; .data:10065964o
                align 4
aIdSmimeAa      db 'id-smime-aa',0      ; DATA XREF: .data:off_10065948o
                                        ; .data:1006594Co
aIdSmimeCt      db 'id-smime-ct',0      ; DATA XREF: .data:off_10065930o
                                        ; .data:10065934o
aIdSmimeMod     db 'id-smime-mod',0     ; DATA XREF: .data:off_10065918o
                                        ; .data:1006591Co
                align 4
aSMime          db 'S/MIME',0           ; DATA XREF: .data:10065904o
                align 4
aSmime          db 'SMIME',0            ; DATA XREF: .data:off_10065900o
                align 4
aPkcs5          db 'pkcs5',0            ; DATA XREF: .data:off_100658E8o
                                        ; .data:100658ECo
                align 4
aPkcs1          db 'pkcs1',0            ; DATA XREF: .data:off_100658D0o
                                        ; .data:100658D4o
                align 4
aX9_57Cm?       db 'X9.57 CM ?',0       ; DATA XREF: .data:100658BCo
                align 10h
aX9cm           db 'X9cm',0             ; DATA XREF: .data:off_100658B8o
                align 4
aX9_57          db 'X9.57',0            ; DATA XREF: .data:100658A4o
                align 10h
aX957           db 'X9-57',0            ; DATA XREF: .data:off_100658A0o
                align 4
aIsoUsMemberBod db 'ISO US Member Body',0 ; DATA XREF: .data:1006588Co
                align 4
aIsoUs          db 'ISO-US',0           ; DATA XREF: .data:off_10065888o
                align 4
aIsoMemberBody  db 'ISO Member Body',0  ; DATA XREF: .data:10065874o
aMemberBody     db 'member-body',0      ; DATA XREF: .data:off_10065870o
aIso            db 'iso',0              ; DATA XREF: .data:1006585Co
aIso_0          db 'ISO',0              ; DATA XREF: .data:off_10065858o
aOcspSigning    db 'OCSP Signing',0     ; DATA XREF: .data:10065844o
                align 4
aOcspsigning    db 'OCSPSigning',0      ; DATA XREF: .data:off_10065840o
aCaIssuers      db 'CA Issuers',0       ; DATA XREF: .data:1006582Co
                align 10h
aCaissuers      db 'caIssuers',0        ; DATA XREF: .data:off_10065828o
                align 4
aOcsp           db 'OCSP',0             ; DATA XREF: .data:off_10065810o
                                        ; .data:10065814o
                align 4
aAuthorityInfor db 'Authority Information Access',0 ; DATA XREF: .data:100657FCo
                align 4
aAuthorityinfoa db 'authorityInfoAccess',0 ; DATA XREF: .data:off_100657F8o
aIdAd           db 'id-ad',0            ; DATA XREF: .data:off_100657E0o
                                        ; .data:100657E4o
                align 10h
aIdPe           db 'id-pe',0            ; DATA XREF: .data:off_100657C8o
                                        ; .data:100657CCo
                align 4
aDnqualifier    db 'dnQualifier',0      ; DATA XREF: .data:off_100657B0o
                                        ; .data:100657B4o
aName           db 'name',0             ; DATA XREF: .data:off_10065798o
                                        ; .data:1006579Co
                align 4
aExtensionReque db 'Extension Request',0 ; DATA XREF: .data:10065784o
                align 10h
aExtreq         db 'extReq',0           ; DATA XREF: .data:off_10065780o
                align 4
aMicrosoftExten db 'Microsoft Extension Request',0 ; DATA XREF: .data:1006576Co
aMsextreq       db 'msExtReq',0         ; DATA XREF: .data:off_10065768o
                align 10h
aPbewithsha1and db 'pbeWithSHA1AndDES-CBC',0 ; DATA XREF: .data:10065754o
                align 4
aPbeSha1Des     db 'PBE-SHA1-DES',0     ; DATA XREF: .data:off_10065750o
                align 4
aPbewithmd5andr db 'pbeWithMD5AndRC2-CBC',0 ; DATA XREF: .data:1006573Co
                align 10h
aPbeMd5Rc264    db 'PBE-MD5-RC2-64',0   ; DATA XREF: .data:off_10065738o
                align 10h
aPbewithmd2andr db 'pbeWithMD2AndRC2-CBC',0 ; DATA XREF: .data:10065724o
                align 4
aPbeMd2Rc264    db 'PBE-MD2-RC2-64',0   ; DATA XREF: .data:off_10065720o
                align 4
aSMimeCapabilit db 'S/MIME Capabilities',0 ; DATA XREF: .data:1006570Co
aSmimeCaps      db 'SMIME-CAPS',0       ; DATA XREF: .data:off_10065708o
                align 4
aRc264Cbc       db 'rc2-64-cbc',0       ; DATA XREF: .data:100656F4o
                align 4
aRc264Cbc_0     db 'RC2-64-CBC',0       ; DATA XREF: .data:off_100656F0o
                align 10h
aPolicyQualifie db 'Policy Qualifier User Notice',0 ; DATA XREF: .data:100656DCo
                align 10h
aIdQtUnotice    db 'id-qt-unotice',0    ; DATA XREF: .data:off_100656D8o
                align 10h
aPolicyQualif_0 db 'Policy Qualifier CPS',0 ; DATA XREF: .data:100656C4o
                align 4
aIdQtCps        db 'id-qt-cps',0        ; DATA XREF: .data:off_100656C0o
                align 4
aHmacwithsha1   db 'hmacWithSHA1',0     ; DATA XREF: .data:off_100656A8o
                                        ; .data:100656ACo
                align 4
aPbmac1         db 'PBMAC1',0           ; DATA XREF: .data:off_10065690o
                                        ; .data:10065694o
                align 4
aPbes2          db 'PBES2',0            ; DATA XREF: .data:off_10065678o
                                        ; .data:1006567Co
                align 4
aX509crl        db 'x509Crl',0          ; DATA XREF: .data:off_10065660o
                                        ; .data:10065664o
aSdsicertificat db 'sdsiCertificate',0  ; DATA XREF: .data:off_10065648o
                                        ; .data:1006564Co
aX509certificat db 'x509Certificate',0  ; DATA XREF: .data:off_10065630o
                                        ; .data:10065634o
aLocalkeyid     db 'localKeyID',0       ; DATA XREF: .data:off_10065618o
                                        ; .data:1006561Co
                align 4
aFriendlyname   db 'friendlyName',0     ; DATA XREF: .data:off_10065600o
                                        ; .data:10065604o
                align 4
aSafecontentsba db 'safeContentsBag',0  ; DATA XREF: .data:off_100655E8o
                                        ; .data:100655ECo
aSecretbag      db 'secretBag',0        ; DATA XREF: .data:off_100655D0o
                                        ; .data:100655D4o
                align 4
aCrlbag         db 'crlBag',0           ; DATA XREF: .data:off_100655B8o
                                        ; .data:100655BCo
                align 4
aCertbag        db 'certBag',0          ; DATA XREF: .data:off_100655A0o
                                        ; .data:100655A4o
aPkcs8shroudedk db 'pkcs8ShroudedKeyBag',0 ; DATA XREF: .data:off_10065588o
                                        ; .data:1006558Co
aKeybag         db 'keyBag',0           ; DATA XREF: .data:off_10065570o
                                        ; .data:10065574o
                align 10h
aPbewithsha1a_0 db 'pbeWithSHA1And40BitRC2-CBC',0 ; DATA XREF: .data:1006555Co
                align 4
aPbeSha1Rc240   db 'PBE-SHA1-RC2-40',0  ; DATA XREF: .data:off_10065558o
aPbewithsha1a_1 db 'pbeWithSHA1And128BitRC2-CBC',0 ; DATA XREF: .data:10065544o
aPbeSha1Rc2128  db 'PBE-SHA1-RC2-128',0 ; DATA XREF: .data:off_10065540o
                align 4
aPbewithsha1a_2 db 'pbeWithSHA1And2-KeyTripleDES-CBC',0 ; DATA XREF: .data:1006552Co
                align 10h
aPbeSha12des    db 'PBE-SHA1-2DES',0    ; DATA XREF: .data:off_10065528o
                align 10h
aPbewithsha1a_3 db 'pbeWithSHA1And3-KeyTripleDES-CBC',0 ; DATA XREF: .data:10065514o
                align 4
aPbeSha13des    db 'PBE-SHA1-3DES',0    ; DATA XREF: .data:off_10065510o
                align 4
aPbewithsha1a_4 db 'pbeWithSHA1And40BitRC4',0 ; DATA XREF: .data:100654FCo
                align 4
aPbeSha1Rc440   db 'PBE-SHA1-RC4-40',0  ; DATA XREF: .data:off_100654F8o
aPbewithsha1a_5 db 'pbeWithSHA1And128BitRC4',0 ; DATA XREF: .data:100654E4o
aPbeSha1Rc4128  db 'PBE-SHA1-RC4-128',0 ; DATA XREF: .data:off_100654E0o
                align 4
aStrongExtranet db 'Strong Extranet ID',0 ; DATA XREF: .data:100654CCo
                align 4
aSxnetid        db 'SXNetID',0          ; DATA XREF: .data:off_100654C8o
aInvalidityDate db 'Invalidity Date',0  ; DATA XREF: .data:100654B4o
aInvaliditydate db 'invalidityDate',0   ; DATA XREF: .data:off_100654B0o
                align 4
aX509v3CrlReaso db 'X509v3 CRL Reason Code',0 ; DATA XREF: .data:1006549Co
                align 4
aCrlreason      db 'CRLReason',0        ; DATA XREF: .data:off_10065498o
                align 4
aX509v3DeltaCrl db 'X509v3 Delta CRL Indicator',0 ; DATA XREF: .data:10065484o
                align 4
aDeltacrl       db 'deltaCRL',0         ; DATA XREF: .data:off_10065480o
                align 10h
aNetscapeServer db 'Netscape Server Gated Crypto',0 ; DATA XREF: .data:1006546Co
                align 10h
aNssgc          db 'nsSGC',0            ; DATA XREF: .data:off_10065468o
                align 4
aMicrosoftEncry db 'Microsoft Encrypted File System',0 ; DATA XREF: .data:10065454o
aMsefs          db 'msEFS',0            ; DATA XREF: .data:off_10065450o
                align 10h
aMicrosoftServe db 'Microsoft Server Gated Crypto',0 ; DATA XREF: .data:1006543Co
                align 10h
aMssgc          db 'msSGC',0            ; DATA XREF: .data:off_10065438o
                align 4
aMicrosoftTrust db 'Microsoft Trust List Signing',0 ; DATA XREF: .data:10065424o
                align 4
aMsctlsign      db 'msCTLSign',0        ; DATA XREF: .data:off_10065420o
                align 4
aMicrosoftComme db 'Microsoft Commercial Code Signing',0 ; DATA XREF: .data:1006540Co
                align 4
aMscodecom      db 'msCodeCom',0        ; DATA XREF: .data:off_10065408o
                align 4
aMicrosoftIndiv db 'Microsoft Individual Code Signing',0 ; DATA XREF: .data:100653F4o
                align 4
aMscodeind      db 'msCodeInd',0        ; DATA XREF: .data:off_100653F0o
                align 4
aTimeStamping   db 'Time Stamping',0    ; DATA XREF: .data:100653DCo
                align 4
aTimestamping   db 'timeStamping',0     ; DATA XREF: .data:off_100653D8o
                align 4
aEMailProtectio db 'E-mail Protection',0 ; DATA XREF: .data:100653C4o
                align 4
aEmailprotectio db 'emailProtection',0  ; DATA XREF: .data:off_100653C0o
aCodeSigning    db 'Code Signing',0     ; DATA XREF: .data:100653ACo
                align 4
aCodesigning    db 'codeSigning',0      ; DATA XREF: .data:off_100653A8o
aTlsWebClientAu db 'TLS Web Client Authentication',0 ; DATA XREF: .data:10065394o
                align 4
aClientauth     db 'clientAuth',0       ; DATA XREF: .data:off_10065390o
                align 10h
aTlsWebServerAu db 'TLS Web Server Authentication',0 ; DATA XREF: .data:1006537Co
                align 10h
aServerauth     db 'serverAuth',0       ; DATA XREF: .data:off_10065378o
                align 4
aIdKp           db 'id-kp',0            ; DATA XREF: .data:off_10065360o
                                        ; .data:10065364o
                align 4
aPkix           db 'PKIX',0             ; DATA XREF: .data:off_10065348o
                                        ; .data:1006534Co
                align 4
aX509v3Extended db 'X509v3 Extended Key Usage',0 ; DATA XREF: .data:10065334o
                align 4
aExtendedkeyusa db 'extendedKeyUsage',0 ; DATA XREF: .data:off_10065330o
                align 4
aZlibCompressio db 'zlib compression',0 ; DATA XREF: .data:1006531Co
                align 10h
aZlib           db 'ZLIB',0             ; DATA XREF: .data:off_10065318o
                align 4
aRunLengthCompr db 'run length compression',0 ; DATA XREF: .data:10065304o
                align 10h
aRle            db 'RLE',0              ; DATA XREF: .data:off_10065300o
aRc5Ofb         db 'rc5-ofb',0          ; DATA XREF: .data:100652ECo
aRc5Ofb_0       db 'RC5-OFB',0          ; DATA XREF: .data:off_100652E8o
aRc5Cfb         db 'rc5-cfb',0          ; DATA XREF: .data:100652D4o
aRc5Cfb_0       db 'RC5-CFB',0          ; DATA XREF: .data:off_100652D0o
aRc5Ecb         db 'rc5-ecb',0          ; DATA XREF: .data:100652BCo
aRc5Ecb_0       db 'RC5-ECB',0          ; DATA XREF: .data:off_100652B8o
aRc5Cbc         db 'rc5-cbc',0          ; DATA XREF: .data:100652A4o
aRc5Cbc_0       db 'RC5-CBC',0          ; DATA XREF: .data:off_100652A0o
aRipemd160withr db 'ripemd160WithRSA',0 ; DATA XREF: .data:1006528Co
                align 4
aRsaRipemd160   db 'RSA-RIPEMD160',0    ; DATA XREF: .data:off_10065288o
                align 4
aRipemd160      db 'ripemd160',0        ; DATA XREF: .data:1006525Co
                align 4
aRipemd160_0    db 'RIPEMD160',0        ; DATA XREF: .data:off_10065258o
                align 10h
aDsaencryption  db 'dsaEncryption',0    ; DATA XREF: .data:10065244o
                align 10h
aDsa            db 'DSA',0              ; DATA XREF: .data:off_10065240o
aSha1withrsa    db 'sha1WithRSA',0      ; DATA XREF: .data:1006522Co
aRsaSha12       db 'RSA-SHA1-2',0       ; DATA XREF: .data:off_10065228o
                align 4
aMd5Sha1        db 'md5-sha1',0         ; DATA XREF: .data:10065214o
                align 4
aMd5Sha1_0      db 'MD5-SHA1',0         ; DATA XREF: .data:off_10065210o
                align 4
aDsawithsha1    db 'dsaWithSHA1',0      ; DATA XREF: .data:100651FCo
aDsaSha1        db 'DSA-SHA1',0         ; DATA XREF: .data:off_100651F8o
                align 4
aPbewithmd5andc db 'pbeWithMD5AndCast5CBC',0 ; DATA XREF: .data:off_100651E0o
                                        ; .data:100651E4o
                align 4
aCast5Ofb       db 'cast5-ofb',0        ; DATA XREF: .data:100651CCo
                align 10h
aCast5Ofb_0     db 'CAST5-OFB',0        ; DATA XREF: .data:off_100651C8o
                align 4
aCast5Cfb       db 'cast5-cfb',0        ; DATA XREF: .data:100651B4o
                align 4
aCast5Cfb_0     db 'CAST5-CFB',0        ; DATA XREF: .data:off_100651B0o
                align 4
aCast5Ecb       db 'cast5-ecb',0        ; DATA XREF: .data:1006519Co
                align 10h
aCast5Ecb_0     db 'CAST5-ECB',0        ; DATA XREF: .data:off_10065198o
                align 4
aCast5Cbc       db 'cast5-cbc',0        ; DATA XREF: .data:10065184o
                align 4
aCast5Cbc_0     db 'CAST5-CBC',0        ; DATA XREF: .data:off_10065180o
                align 4
aDescription    db 'description',0      ; DATA XREF: .data:off_10065168o
                                        ; .data:1006516Co
aTitle          db 'title',0            ; DATA XREF: .data:off_10065150o
                                        ; .data:10065154o
                align 4
aSerialnumber   db 'serialNumber',0     ; DATA XREF: .data:off_10065138o
                                        ; .data:1006513Co
                align 4
aMd5withrsa     db 'md5WithRSA',0       ; DATA XREF: .data:10065124o
                align 4
aRsaNpMd5       db 'RSA-NP-MD5',0       ; DATA XREF: .data:off_10065120o
                align 10h
aX509v3CrlDistr db 'X509v3 CRL Distribution Points',0 ; DATA XREF: .data:1006510Co
                align 10h
aCrldistributio db 'crlDistributionPoints',0 ; DATA XREF: .data:off_10065108o
                align 4
aInitials       db 'initials',0         ; DATA XREF: .data:off_100650D8o
                                        ; .data:100650DCo
                align 4
aSurname        db 'surname',0          ; DATA XREF: .data:100650C4o
aSn             db 'SN',0               ; DATA XREF: .data:off_100650C0o
                align 10h
aGivenname      db 'givenName',0        ; DATA XREF: .data:100650ACo
                align 4
aGn             db 'GN',0               ; DATA XREF: .data:off_100650A8o
                align 10h
aRc240Cbc       db 'rc2-40-cbc',0       ; DATA XREF: .data:10065094o
                align 4
aRc240Cbc_0     db 'RC2-40-CBC',0       ; DATA XREF: .data:off_10065090o
                align 4
aRc440          db 'rc4-40',0           ; DATA XREF: .data:1006507Co
                align 10h
aRc440_0        db 'RC4-40',0           ; DATA XREF: .data:off_10065078o
                align 4
aMdc2withrsa    db 'mdc2WithRSA',0      ; DATA XREF: .data:10065064o
aRsaMdc2        db 'RSA-MDC2',0         ; DATA XREF: .data:off_10065060o
                align 10h
aMdc2           db 'mdc2',0             ; DATA XREF: .data:1006504Co
                align 4
aMdc2_0         db 'MDC2',0             ; DATA XREF: .data:off_10065048o
                align 10h
aBfOfb          db 'bf-ofb',0           ; DATA XREF: .data:10065034o
                align 4
aBfOfb_0        db 'BF-OFB',0           ; DATA XREF: .data:off_10065030o
                align 10h
aBfCfb          db 'bf-cfb',0           ; DATA XREF: .data:1006501Co
                align 4
aBfCfb_0        db 'BF-CFB',0           ; DATA XREF: .data:off_10065018o
                align 10h
aBfEcb          db 'bf-ecb',0           ; DATA XREF: .data:10065004o
                align 4
aBfEcb_0        db 'BF-ECB',0           ; DATA XREF: .data:off_10065000o
                align 10h
aBfCbc          db 'bf-cbc',0           ; DATA XREF: .data:10064FECo
                align 4
aBfCbc_0        db 'BF-CBC',0           ; DATA XREF: .data:off_10064FE8o
                align 10h
aX509v3Authorit db 'X509v3 Authority Key Identifier',0 ; DATA XREF: .data:10064FD4o
aAuthoritykeyid db 'authorityKeyIdentifier',0 ; DATA XREF: .data:off_10064FD0o
                align 4
aX509v3Certif_0 db 'X509v3 Certificate Policies',0 ; DATA XREF: .data:10064FBCo
aCertificatepol db 'certificatePolicies',0 ; DATA XREF: .data:off_10064FB8o
aX509v3CrlNumbe db 'X509v3 CRL Number',0 ; DATA XREF: .data:10064FA4o
                align 4
aCrlnumber      db 'crlNumber',0        ; DATA XREF: .data:off_10064FA0o
                align 4
aX509v3BasicCon db 'X509v3 Basic Constraints',0 ; DATA XREF: .data:10064F8Co
                align 4
aBasicconstrain db 'basicConstraints',0 ; DATA XREF: .data:off_10064F88o
                align 4
aX509v3IssuerAl db 'X509v3 Issuer Alternative Name',0 ; DATA XREF: .data:10064F74o
                align 4
aIssueraltname  db 'issuerAltName',0    ; DATA XREF: .data:off_10064F70o
                align 4
aX509v3SubjectA db 'X509v3 Subject Alternative Name',0 ; DATA XREF: .data:10064F5Co
aSubjectaltname db 'subjectAltName',0   ; DATA XREF: .data:off_10064F58o
                align 4
aX509v3PrivateK db 'X509v3 Private Key Usage Period',0 ; DATA XREF: .data:10064F44o
aPrivatekeyusag db 'privateKeyUsagePeriod',0 ; DATA XREF: .data:off_10064F40o
                align 10h
aX509v3KeyUsage db 'X509v3 Key Usage',0 ; DATA XREF: .data:10064F2Co
                align 4
aKeyusage       db 'keyUsage',0         ; DATA XREF: .data:off_10064F28o
                align 10h
aX509v3SubjectK db 'X509v3 Subject Key Identifier',0 ; DATA XREF: .data:10064F14o
                align 10h
aSubjectkeyiden db 'subjectKeyIdentifier',0 ; DATA XREF: .data:off_10064F10o
                align 4
aIdCe           db 'id-ce',0            ; DATA XREF: .data:off_10064EF8o
                                        ; .data:10064EFCo
                align 10h
aDesxCbc        db 'desx-cbc',0         ; DATA XREF: .data:10064EE4o
                align 4
aDesxCbc_0      db 'DESX-CBC',0         ; DATA XREF: .data:off_10064EE0o
                align 4
aNetscapeCertif db 'Netscape Certificate Sequence',0 ; DATA XREF: .data:10064ECCo
                align 4
aNscertsequence db 'nsCertSequence',0   ; DATA XREF: .data:off_10064EC8o
                align 4
aNetscapeCommen db 'Netscape Comment',0 ; DATA XREF: .data:10064EB4o
                align 4
aNscomment      db 'nsComment',0        ; DATA XREF: .data:off_10064EB0o
                align 4
aNetscapeSslSer db 'Netscape SSL Server Name',0 ; DATA XREF: .data:10064E9Co
                align 4
aNssslservernam db 'nsSslServerName',0  ; DATA XREF: .data:off_10064E98o
aNetscapeCaPoli db 'Netscape CA Policy Url',0 ; DATA XREF: .data:10064E84o
                align 4
aNscapolicyurl  db 'nsCaPolicyUrl',0    ; DATA XREF: .data:off_10064E80o
                align 4
aNetscapeRenewa db 'Netscape Renewal Url',0 ; DATA XREF: .data:10064E6Co
                align 4
aNsrenewalurl   db 'nsRenewalUrl',0     ; DATA XREF: .data:off_10064E68o
                align 4
aNetscapeCaRevo db 'Netscape CA Revocation Url',0 ; DATA XREF: .data:10064E54o
                align 10h
aNscarevocation db 'nsCaRevocationUrl',0 ; DATA XREF: .data:off_10064E50o
                align 4
aNetscapeRevoca db 'Netscape Revocation Url',0 ; DATA XREF: .data:10064E3Co
aNsrevocationur db 'nsRevocationUrl',0  ; DATA XREF: .data:off_10064E38o
aNetscapeBaseUr db 'Netscape Base Url',0 ; DATA XREF: .data:10064E24o
                align 10h
aNsbaseurl      db 'nsBaseUrl',0        ; DATA XREF: .data:off_10064E20o
                align 4
aNetscapeCertTy db 'Netscape Cert Type',0 ; DATA XREF: .data:10064E0Co
                align 10h
aNscerttype     db 'nsCertType',0       ; DATA XREF: .data:off_10064E08o
                align 4
aDsawithsha1Old db 'dsaWithSHA1-old',0  ; DATA XREF: .data:10064DF4o
aDsaSha1Old     db 'DSA-SHA1-old',0     ; DATA XREF: .data:off_10064DF0o
                align 4
aPbkdf2         db 'PBKDF2',0           ; DATA XREF: .data:off_10064DD8o
                                        ; .data:10064DDCo
                align 4
aPbewithsha1a_6 db 'pbeWithSHA1AndRC2-CBC',0 ; DATA XREF: .data:10064DC4o
                align 4
aPbeSha1Rc264   db 'PBE-SHA1-RC2-64',0  ; DATA XREF: .data:off_10064DC0o
aDsaencryptionO db 'dsaEncryption-old',0 ; DATA XREF: .data:10064DACo
                align 10h
aDsaOld         db 'DSA-old',0          ; DATA XREF: .data:off_10064DA8o
aDsawithsha     db 'dsaWithSHA',0       ; DATA XREF: .data:10064D94o
                align 4
aDsaSha         db 'DSA-SHA',0          ; DATA XREF: .data:off_10064D90o
aSha1withrsaenc db 'sha1WithRSAEncryption',0 ; DATA XREF: .data:10064D7Co
                align 4
aRsaSha1        db 'RSA-SHA1',0         ; DATA XREF: .data:off_10064D78o
                align 10h
aSha1           db 'sha1',0             ; DATA XREF: .data:10064D64o
                align 4
aSha1_0         db 'SHA1',0             ; DATA XREF: .data:off_10064D60o
                align 10h
aDesEde3Ofb     db 'des-ede3-ofb',0     ; DATA XREF: .data:10064D4Co
                align 10h
aDesEde3Ofb_0   db 'DES-EDE3-OFB',0     ; DATA XREF: .data:off_10064D48o
                align 10h
aDesEdeOfb      db 'des-ede-ofb',0      ; DATA XREF: .data:10064D34o
aDesEdeOfb_0    db 'DES-EDE-OFB',0      ; DATA XREF: .data:off_10064D30o
aDesEde3Cfb     db 'des-ede3-cfb',0     ; DATA XREF: .data:10064D1Co
                align 4
aDesEde3Cfb_0   db 'DES-EDE3-CFB',0     ; DATA XREF: .data:off_10064D18o
                align 4
aDesEdeCfb      db 'des-ede-cfb',0      ; DATA XREF: .data:10064D04o
aDesEdeCfb_0    db 'DES-EDE-CFB',0      ; DATA XREF: .data:off_10064D00o
aNetscapeDataTy db 'Netscape Data Type',0 ; DATA XREF: .data:10064CECo
                align 4
aNsdatatype     db 'nsDataType',0       ; DATA XREF: .data:off_10064CE8o
                align 10h
aNetscapeCert_0 db 'Netscape Certificate Extension',0 ; DATA XREF: .data:10064CD4o
                align 10h
aNscertext      db 'nsCertExt',0        ; DATA XREF: .data:off_10064CD0o
                align 4
aNetscapeCommun db 'Netscape Communications Corp.',0 ; DATA XREF: .data:10064CBCo
                align 4
aNetscape       db 'Netscape',0         ; DATA XREF: .data:off_10064CB8o
                align 4
aExtendedcertif db 'extendedCertificateAttributes',0 ; DATA XREF: .data:off_10064CA0o
                                        ; .data:10064CA4o
                align 4
aUnstructuredad db 'unstructuredAddress',0 ; DATA XREF: .data:off_10064C88o
                                        ; .data:10064C8Co
aChallengepassw db 'challengePassword',0 ; DATA XREF: .data:off_10064C70o
                                        ; .data:10064C74o
                align 10h
aCountersignatu db 'countersignature',0 ; DATA XREF: .data:off_10064C58o
                                        ; .data:10064C5Co
                align 4
aSigningtime    db 'signingTime',0      ; DATA XREF: .data:off_10064C40o
                                        ; .data:10064C44o
aMessagedigest  db 'messageDigest',0    ; DATA XREF: .data:off_10064C28o
                                        ; .data:10064C2Co
                align 10h
aContenttype    db 'contentType',0      ; DATA XREF: .data:off_10064C10o
                                        ; .data:10064C14o
aUnstructuredna db 'unstructuredName',0 ; DATA XREF: .data:off_10064BF8o
                                        ; .data:10064BFCo
                align 10h
aEmailaddress   db 'emailAddress',0     ; DATA XREF: .data:off_10064BE0o
                                        ; .data:10064BE4o
                align 10h
aPkcs9          db 'pkcs9',0            ; DATA XREF: .data:off_10064BC8o
                                        ; .data:10064BCCo
                align 4
aIdeaOfb        db 'idea-ofb',0         ; DATA XREF: .data:10064BB4o
                align 4
aIdeaOfb_0      db 'IDEA-OFB',0         ; DATA XREF: .data:off_10064BB0o
                align 10h
aDesOfb         db 'des-ofb',0          ; DATA XREF: .data:10064B9Co
aDesOfb_0       db 'DES-OFB',0          ; DATA XREF: .data:off_10064B98o
aDesEde3Cbc     db 'des-ede3-cbc',0     ; DATA XREF: .data:10064B84o
                align 10h
aDesEde3Cbc_0   db 'DES-EDE3-CBC',0     ; DATA XREF: .data:off_10064B80o
                align 10h
aDesEdeCbc      db 'des-ede-cbc',0      ; DATA XREF: .data:10064B6Co
aDesEdeCbc_0    db 'DES-EDE-CBC',0      ; DATA XREF: .data:off_10064B68o
aShawithrsaencr db 'shaWithRSAEncryption',0 ; DATA XREF: .data:10064B54o
                align 10h
aRsaSha         db 'RSA-SHA',0          ; DATA XREF: .data:off_10064B50o
aSha            db 'sha',0              ; DATA XREF: .data:10064B3Co
aSha_0          db 'SHA',0              ; DATA XREF: .data:off_10064B38o
aRc2Ofb         db 'rc2-ofb',0          ; DATA XREF: .data:10064B24o
aRc2Ofb_0       db 'RC2-OFB',0          ; DATA XREF: .data:off_10064B20o
aRc2Cfb         db 'rc2-cfb',0          ; DATA XREF: .data:10064B0Co
aRc2Cfb_0       db 'RC2-CFB',0          ; DATA XREF: .data:off_10064B08o
aRc2Ecb         db 'rc2-ecb',0          ; DATA XREF: .data:10064AF4o
aRc2Ecb_0       db 'RC2-ECB',0          ; DATA XREF: .data:off_10064AF0o
aRc2Cbc         db 'rc2-cbc',0          ; DATA XREF: .data:10064ADCo
aRc2Cbc_0       db 'RC2-CBC',0          ; DATA XREF: .data:off_10064AD8o
aIdeaEcb        db 'idea-ecb',0         ; DATA XREF: .data:10064AC4o
                align 4
aIdeaEcb_0      db 'IDEA-ECB',0         ; DATA XREF: .data:off_10064AC0o
                align 4
aIdeaCfb        db 'idea-cfb',0         ; DATA XREF: .data:10064AACo
                align 4
aIdeaCfb_0      db 'IDEA-CFB',0         ; DATA XREF: .data:off_10064AA8o
                align 10h
aIdeaCbc        db 'idea-cbc',0         ; DATA XREF: .data:10064A94o
                align 4
aIdeaCbc_0      db 'IDEA-CBC',0         ; DATA XREF: .data:off_10064A90o
                align 4
aDesEde3        db 'des-ede3',0         ; DATA XREF: .data:10064A7Co
                align 4
aDesEde3_0      db 'DES-EDE3',0         ; DATA XREF: .data:off_10064A78o
                align 10h
aDesEde         db 'des-ede',0          ; DATA XREF: .data:10064A64o
aDesEde_0       db 'DES-EDE',0          ; DATA XREF: .data:off_10064A60o
aDesCbc         db 'des-cbc',0          ; DATA XREF: .data:10064A4Co
aDesCbc_0       db 'DES-CBC',0          ; DATA XREF: .data:off_10064A48o
aDesCfb         db 'des-cfb',0          ; DATA XREF: .data:10064A34o
aDesCfb_0       db 'DES-CFB',0          ; DATA XREF: .data:off_10064A30o
aDesEcb         db 'des-ecb',0          ; DATA XREF: .data:10064A1Co
aDesEcb_0       db 'DES-ECB',0          ; DATA XREF: .data:off_10064A18o
aDhkeyagreement db 'dhKeyAgreement',0   ; DATA XREF: .data:off_10064A00o
                                        ; .data:10064A04o
                align 10h
aPkcs3          db 'pkcs3',0            ; DATA XREF: .data:off_100649E8o
                                        ; .data:100649ECo
                align 4
aPkcs7Encrypted db 'pkcs7-encryptedData',0 ; DATA XREF: .data:off_100649D0o
                                        ; .data:100649D4o
aPkcs7Digestdat db 'pkcs7-digestData',0 ; DATA XREF: .data:off_100649B8o
                                        ; .data:100649BCo
                align 10h
aPkcs7Signedand db 'pkcs7-signedAndEnvelopedData',0 ; DATA XREF: .data:off_100649A0o
                                        ; .data:100649A4o
                align 10h
aPkcs7Enveloped db 'pkcs7-envelopedData',0 ; DATA XREF: .data:off_10064988o
                                        ; .data:1006498Co
aPkcs7Signeddat db 'pkcs7-signedData',0 ; DATA XREF: .data:off_10064970o
                                        ; .data:10064974o
                align 4
aPkcs7Data      db 'pkcs7-data',0       ; DATA XREF: .data:off_10064958o
                                        ; .data:1006495Co
                align 4
aPkcs7          db 'pkcs7',0            ; DATA XREF: .data:off_10064940o
                                        ; .data:10064944o
                align 4
aRsa            db 'rsa',0              ; DATA XREF: .data:1006492Co
aRsa_0          db 'RSA',0              ; DATA XREF: .data:off_10064928o
aOrganization_0 db 'organizationalUnitName',0 ; DATA XREF: .data:10064914o
                align 4
aOu             db 'OU',0               ; DATA XREF: .data:off_10064910o
                align 10h
aOrganizationna db 'organizationName',0 ; DATA XREF: .data:100648FCo
                align 4

a_CryptoEvpEv_0 db '.\crypto\evp\evp_lib.c',0 ; DATA XREF: sub_100179F0+27o
                                        ; sub_10017A60+28o
                align 4
aLSizeofCIv     db 'l <= sizeof(c->iv)',0 ; DATA XREF: sub_100179F0+20o
                align 4
aJSizeofCIv     db 'j <= sizeof(c->iv)',0 ; DATA XREF: sub_10017A60+21o
                align 4
aEvpPartOfOpens db 'EVP part of OpenSSL 0.9.8n 24 Mar 2010',0
                align 4
a_CryptoEvpEvp_ db '.\crypto\evp\evp_enc.c',0 ; DATA XREF: EVP_EncryptUpdate+7Eo
                                        ; sub_10017C70+1Ao ...
                align 4
aBlIntSizeofCtx db 'bl <= (int)sizeof(ctx->buf)',0 ; DATA XREF: EVP_EncryptUpdate+74o
aBSizeofCtxBuf  db 'b <= sizeof ctx->buf',0 ; DATA XREF: sub_10017C70+10o

a1qaz2wsx       db '1qaz2wsx',0         ; DATA XREF: bf_encrypt+1Fo
                                        ; bf_encrypt+69o ...


; const CHttpSession::`vftable'

??_7CHttpSession@@6B@   dd offset CHttpSession__Release ; DATA XREF: sub_10010F70+1Bo
                                        ; CHttpSession__Release+17o
                dd offset ChttpSession__init
                dd offset CHttpSession__Uninit
                dd offset CHttpSession__SetServerUrl
                dd offset CHttpSession__SetPOSTData
                dd offset CHttpSession__SetPOSTData_
                dd offset CHttpSession__CommitRequest
                dd offset CHttpSession__GetResponseData
                dd offset CHttpSession__GetErrMsg


unk_1004D408    db    4                 ; DATA XREF: EVP_md5o
                db    0
                db    0
                db    0
                db    8
                db    0
                db    0
                db    0
                db  10h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd offset sub_10015160
                dd offset sub_10015170
                dd offset sub_10015180
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                dd offset sub_10018B20
                dd offset sub_10018D30
                db    6
                db    0
                db    0
                db    0
                db  13h
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db    0
                db  40h ; @
                db    0
                db    0
                db    0
                db  60h ; `
                db    0
                db    0
                db    0

a_CryptoEngin_0 db '.\crypto\engine\eng_table.c',0 ; DATA XREF: sub_100278C0+28o
                                        ; sub_100278C0+106o
a_CryptoEngin_1 db '.\crypto\engine\eng_lib.c',0 ; DATA XREF: sub_100279F0+Bo
                                        ; sub_100279F0+2Bo

aDlmd5PartOfOpenssl0_ db 'DlMD5 part of OpenSSL 0.9.8n 24 Mar 2010',0
                db    0
a_CryptoEcEc_mu db '.\crypto\ec\ec_mult.c',0 ; DATA XREF: sub_1001D6D0+6o
                                        ; sub_1001D6D0+1Bo ...
                align 4
aFilePointer    db 'FILE pointer',0     ; DATA XREF: .data:10063058o
                align 4
a_CryptoBioBss_ db '.\crypto\bio\bss_file.c',0 ; DATA XREF: sub_1001EB10+3Do
                                        ; sub_1001EB10+57o ...
aFopen          db 'fopen(',27h,0       ; DATA XREF: sub_1001EBC0+1A5o
asc_1004DDB8    db 27h,',',27h,0        ; DATA XREF: sub_1001EBC0+19Fo
asc_1004DDBC    db 27h,')',0            ; DATA XREF: sub_1001EBC0+195o

dword_1006302C  dd 1                    ; DATA XREF: CRYPTO_malloc+1Fw
dword_10063030  dd 1                    ; DATA XREF: CRYPTO_malloc+2Ew
off_10063034    dd offset crt_malloc       ; DATA XREF: operator delete(void *)+5r
off_10063038    dd offset ??3@YAXPAX@Z  ; DATA XREF: CRYPTO_malloc+3Cr
                                        ; sub_100183B0+53r
                                        ; operator delete(void *)
off_1006303C    dd offset crt_realloc      ; DATA XREF: sub_10018280+Ar
off_10063040    dd offset sub_10018280  ; DATA XREF: sub_10018330+54r
off_10063044    dd offset crt_free         ; DATA XREF: sub_100183B0+7Ar
                                        ; CRYPTO_free+17r
off_10063048    dd offset crt_malloc       ; DATA XREF: operator delete(void *)+5r
                dd offset ??3@YAXPAX@Z_0 ; operator delete(void *)
                dd offset crt_free
                db    2
                db    4
                db    0
                db    0
                dd offset aFilePointer  ; "FILE pointer"
                dd offset sub_1001EB90
                dd offset sub_1001EB10
                dd offset sub_1001EF10
                dd offset sub_1001EEC0
                dd offset sub_1001EBC0
                dd offset sub_1001EAA0
                dd offset sub_1001EAC0
                db    0
                db    0
                db    0
                db    0
                db  43h ; C
                db    0
                db    0
                db    0



a_CryptoEvpDige db '.\crypto\evp\digest.c',0 ; DATA XREF: sub_10012D70+32o
                                        ; sub_10012D70+79o ...
                align 10h
aCtxDigestMd_si db 'ctx->digest->md_size <= EVP_MAX_MD_SIZE',0 ; DATA XREF: EVP_DigestFinal_ex+Eo

byte_1004D2A0   db 40h, 3 dup(0), 41h, 3 dup(0), 14h, 7 dup(0) ; DATA XREF: EVP_sha1o
                dd offset sub_10013030
                dd offset sub_10013040
                dd offset sub_10013050
                db 8 dup(0)
                dd offset sub_10018B20
                dd offset sub_10018D30
                db 6, 3 dup(0), 13h, 0Fh dup(0), 40h, 3 dup(0), 64h, 3 dup(0), 0A3h, 2, 2 dup(0), 9Fh, 2, 2 dup(0), 1Ch, 7 dup(0)
                dd offset sub_100150C0
                dd offset sub_100150E0
                dd offset sub_100150F0
                db 8 dup(0)
                dd offset sub_10018B20
                dd offset sub_10018D30
                db 6, 3 dup(0), 13h, 0Fh dup(0), 40h, 3 dup(0), 74h, 3 dup(0), 0A0h, 2, 2 dup(0), 9Ch, 2, 2 dup(0), 20h, 7 dup(0)
                dd offset sub_100150D0
                dd offset sub_100150E0
                dd offset sub_100150F0
                db 8 dup(0)
                dd offset sub_10018B20
                dd offset sub_10018D30
                db 6, 3 dup(0), 13h, 0Fh dup(0), 40h, 3 dup(0), 74h, 3 dup(0), 0A1h, 2, 2 dup(0), 9Dh, 2, 2 dup(0), 30h, 7 dup(0)
                dd offset sub_10015110
                dd offset sub_10015130
                dd offset sub_10015140
                db 8 dup(0)
                dd offset sub_10018B20
                dd offset sub_10018D30
                db 6, 3 dup(0), 13h, 0Fh dup(0), 80h, 3 dup(0), 0DCh, 3 dup(0), 0A2h, 2, 2 dup(0), 9Eh, 2, 2 dup(0), 40h, 7 dup(0)
                dd offset sub_10015120
                dd offset sub_10015130
                dd offset sub_10015140
                db 8 dup(0)
                dd offset sub_10018B20
                dd offset sub_10018D30
                db 6, 3 dup(0), 13h, 0Fh dup(0), 80h, 3 dup(0), 0DCh, 3 dup(0)

; char aVtkf[]
aVtkf           db 'VTKF',0             ; DATA XREF: sub_1000FE30+2B1o
                align 10h
a_aacs          db '.AACS',0            ; DATA XREF: sub_1000FE30+305o
                align 4
; char aCpsunit05d_cci[]
aCpsunit05d_cci db '/CPSUnit%05d.cci',0 ; DATA XREF: sub_10010300+20Co
                align 4
aMc08100306     db 'MC0810/03/06',0     ; DATA XREF: sub_10010630:loc_1001071Co
                align 4
aTs06022607     db 'TS0602/26/07',0     ; DATA XREF: sub_10010630+103o
                align 4
; char asc_1006034C[]
asc_1006034C    db '/\',0               ; DATA XREF: sub_10010CF0+59o
                align 10h
;asc_10060350:                           ; DATA XREF: sub_10010CF0+68o
                                        ; .rdata:1005C78Co
                unicode asc_10060350, <*>,0
asc_10060354    db '/*',0               ; DATA XREF: sub_10010CF0+6Fo
                align 4
; char aD[]
aD              db '%d',0               ; DATA XREF: sub_10011150+5Bo

aHttps75_126__6 db 'https://75.126.159.226/api/v3/cert_check.php',0
                                        ; DATA XREF: sub_10011DF0+B2o
                align 10h
aHttps75_126__7 db 'https://75.126.159.226/api/v3/cert_load.php',0
                                        ; DATA XREF: sub_10011F00+D3o
aHttps75_126__3 db 'https://75.126.159.226/api/v3/cert_sign.php',0
                                        ; DATA XREF: sub_10012060+FBo
aHttps75_126__4 db 'https://75.126.159.226/api/v3/cache_fail.php',0
                                        ; DATA XREF: sub_100121C0+129o
                align 4
;asc_10060528:                           ; DATA XREF: sub_10012320+7Fo
                                        ; .rdata:1005C7D0o
                unicode asc_10060528, <|>,0
aHttps75_126__5 db 'https://75.126.159.226/api/v3/info_save.php',0
                                        ; DATA XREF: sub_10012320+2C1o
aListTTooLong   db 'list<T> too long',0 ; DATA XREF: sub_100128E0+34o
                align 4
;aS:                                     ; DATA XREF: .rdata:1004D698o
                unicode aS, <s>,0
aSegmentFreeing db '[segment] freeing conv_tab.bin',0Ah,0 ; DATA XREF: sub_10012980+Co
aSegmentSeekTab db '[segment] seek(table %u): %016lld',0Ah,0 ; DATA XREF: sub_100078E0+EAo
                align 4
aSegmentReadLen db '[segment] read(len %d): %016lld',0Ah,0 ; DATA XREF: sub_10012A50+29o
                align 4
;aNull           db '(null)',0           ; DATA XREF: .data:off_1006CAACo
                align 10h
                unicode aNull, <H>,0

; char a05d_m2ts[]
a05d_m2ts       db '%05d.m2ts',0        ; DATA XREF: sub_10005890+CAo

dword_10060398  dd 77327131h            ; DATA XREF: sub_100118E0+Dr
                                        ; sub_10011B70+26r ...
dword_1006039C  dd 72346533h            ; DATA XREF: sub_100118E0+19r
                                        ; sub_10011B70+2Dr ...
                db    0
                db    0
                db    0
                db    0
aHttps75_126_15 db 'https://75.126.159.226/api/v3/title_save.php',0
                                        ; DATA XREF: sub_10011AA0+72o
                align 4
aHttps75_126__0 db 'https://75.126.159.226/api/v3/title_load.php',0
                                        ; DATA XREF: sub_10011B70+6Bo
                align 4
;aHttps75_126__1 db 'https://75.126.159.226/api/v3/volume_load.php',0
                                        ; DATA XREF: sub_10011C30+6Ao
aHttps75_126__1 db 'https://127.0.0.1:8888/test.php?s=1234',0

                align 4
aHttps75_126__2 db 'https://75.126.159.226/api/v3/volume_save.php',0
                                        ; DATA XREF: sub_10011D10+AEo
dword_10060464  dd 54524543h            ; DATA XREF: sub_10011DF0+Er
dword_10060468  dd 554F435Fh            ; DATA XREF: sub_10011DF0+1Ar
word_1006046C   dw 544Eh                ; DATA XREF: sub_10011DF0+13r
byte_1006046E   db 0                    ; DATA XREF: sub_10011DF0+24r

;aTks:                                   ; DATA XREF: sub_10004C90+39o
                                        ; createkeyfile_wraper1+38o
                unicode aTks, <\xlk\>,0
;aVid:                                   ; DATA XREF: sub_10004E40+33o
                                        ; sub_10004F00+31o
                unicode aVid, <\vid\>,0
; char aSBdmvStreamS[]
aSBdmvStreamS   db '%s/BDMV/STREAM/%s',0 ; DATA XREF: .text:100056B2o
                                        ; sub_10005890+F6o ...
                align 4
; char aSBdmvStream05d[]
aSBdmvStream05d db '%s\BDMV\STREAM\%05d.m2ts',0 ; DATA XREF: sub_10005890+49o
                                        ; sub_100117F0+4Fo

word_1005D280   dw 2Fh                  ; DATA XREF: sub_100027E0+12Do
                                        ; sub_10002B40+ABo ...

; char a02x[]
a02x            db '%02x',0             ; DATA XREF: createkeyfile_wraper2+131o

aAacs_mvMkb_rw_ db '/AACS_mv/MKB_RW_mv.inf',0 ; DATA XREF: sub_1000EC60+62o
                align 4
dword_10060244  dd 4341412Fh            ; DATA XREF: sub_1000EC60+AEr
dword_10060248  dd 4B4D2F53h            ; DATA XREF: sub_1000EC60+B4r
dword_1006024C  dd 57525F42h            ; DATA XREF: sub_1000EC60+BCr
dword_10060250  dd 666E692Eh            ; DATA XREF: sub_1000EC60+C5r
byte_10060254   db 0                    ; DATA XREF: sub_1000EC60+CEr
                align 4
aAacsAacs_avUni db '/AACS/AACS_av/Unit_Key_RW.inf',0 ; DATA XREF: sub_1000EC60+122o
                                        ; sub_1000FE30+7Fo
                align 4
dword_10060278  dd 4341412Fh            ; DATA XREF: sub_1000EC60+171r
dword_1006027C  dd 4B4D2F53h            ; DATA XREF: sub_1000EC60+177r
dword_10060280  dd 4F525F42h            ; DATA XREF: sub_1000EC60+17Fr
dword_10060284  dd 666E692Eh            ; DATA XREF: sub_1000EC60+188r
byte_10060288   db 0                    ; DATA XREF: sub_1000EC60+191r
                align 4
dword_1006028C  dd 4341412Fh            ; DATA XREF: sub_1000EC60+1EDr
dword_10060290  dd 4B4D2F53h            ; DATA XREF: sub_1000EC60+1F3r
dword_10060294  dd 4D4F5242h            ; DATA XREF: sub_1000EC60+1FBr
dword_10060298  dd 4341412Eh            ; DATA XREF: sub_1000EC60+204r
word_1006029C   dw 53h                  ; DATA XREF: sub_1000EC60+20Dr
                align 10h
dword_100602A0  dd 4B4E5523h            ; DATA XREF: sub_1000F3D0+5Fr
dword_100602A4  dd 4E574F4Eh            ; DATA XREF: sub_1000F3D0+67r
word_100602A8   dw 23h                  ; DATA XREF: sub_1000F3D0+70r
                align 4
aAacs_mvUnit_ke db '/AACS_mv/Unit_Key_RW.inf',0 ; DATA XREF: sub_1000FE30+CFo
                align 4
dword_100602C8  dd 4341412Fh            ; DATA XREF: sub_1000FE30+120r
dword_100602CC  dd 6E552F53h            ; DATA XREF: sub_1000FE30+126r
dword_100602D0  dd 4B5F7469h            ; DATA XREF: sub_1000FE30+12Er
dword_100602D4  dd 525F7965h            ; DATA XREF: sub_1000FE30+137r
dword_100602D8  dd 6E692E4Fh            ; DATA XREF: sub_1000FE30+140r
word_100602DC   dw 66h                  ; DATA XREF: sub_1000FE30+149r
                align 10h
dword_100602E0  dd 4341412Fh            ; DATA XREF: sub_1000FE30+1A0r
dword_100602E4  dd 54562F53h            ; DATA XREF: sub_1000FE30+1A6r
dword_100602E8  dd 412E464Bh            ; DATA XREF: sub_1000FE30+1AEr
dword_100602EC  dd 534341h              ; DATA XREF: sub_1000FE30+1B7r
dword_100602F0  dd 4341412Fh            ; DATA XREF: sub_1000FE30+200r
word_100602F4   dw 53h                  ; DATA XREF: sub_1000FE30+206r
                align 4
dword_100602F8  dd 464B5456h            ; DATA XREF: sub_1000FE30+249r
dword_100602FC  dd 2E393939h            ; DATA XREF: sub_1000FE30+243r
dword_10060300  dd 53434141h            ; DATA XREF: sub_1000FE30+24Er
byte_10060304   db 0                    ; DATA XREF: sub_1000FE30+266r
; char aRb[3]
aRb             db 'rb',0               ; DATA XREF: sub_10002B40:loc_10002CC9o
                                        ; sub_10002E10:loc_10002E62o ...
                align 4
aWb             db 'wb',0               ; DATA XREF: sub_10002E10+5Do
                                        ; sub_10002F50+A3o ...
                align 4
; char a_m2ts[]
a_m2ts          db '.m2ts',0            ; DATA XREF: sub_100030B0+8o
                                        ; sub_1000A560+12Fo



off_1005B520    dd   0  ; DATA XREF: sub_100384FC+1o
                                        ; .data:off_1006C458o ...



byte_1008055C   db 9, 0F9h, 11h, 2, 9Dh, 74h, 0E3h, 5Bh, 0D8h, 41h, 56h, 0C5h, 63h, 56h, 88h, 0C0h
                                        ; DATA XREF: .data:off_100805C4o
byte_1008056C   db 45h, 5Fh, 0E1h, 4, 22h, 0CAh, 29h, 0C4h, 93h, 3Fh, 95h, 5, 2Bh, 79h, 2Ah, 0B2h
                                        ; DATA XREF: .data:100805CCo
byte_1008057C   db 0F1h, 90h, 0A1h, 0E8h, 17h, 8Dh, 80h, 64h, 34h, 94h, 39h, 4Fh, 80h, 31h, 0D9h, 0C8h
                                        ; DATA XREF: .data:100805D4o
byte_1008058C   db 7Ah, 5Fh, 8Ah, 9, 0F8h, 33h, 0F7h, 22h, 1Bh, 0D4h, 1Fh, 0A6h, 4Ch, 9Ch, 79h, 33h
                                        ; DATA XREF: .data:100805DCo
                                        ; .data:100805E4o ...
byte_1008059C   db 0C8h, 72h, 94h, 0CEh, 84h, 0F9h, 0CCh, 0EBh, 59h, 84h, 0B5h, 47h, 0EEh, 0C1h, 8Dh, 66h
                                        ; DATA XREF: .data:100805F4o
byte_100805AC   db 45h, 2Fh, 6Eh, 40h, 3Ch, 0DFh, 10h, 71h, 4Eh, 41h, 0DFh, 0AAh, 25h, 7Dh, 31h, 3Fh
                                        ; DATA XREF: .data:100805FCo
                db 70h, 0D2h, 5, 10h, 1, 3 dup(0)
off_100805C4    dd offset byte_1008055C ; DATA XREF: sub_10004A50+Do
                db    3
                db    0
                db    0
                db    0
                dd offset byte_1008056C
                db    4
                db    0
                db    0
                db    0
                dd offset byte_1008057C
                db    6
                db    0
                db    0
                db    0
                dd offset byte_1008058C
                db    7
                db    0
                db    0
                db    0
                dd offset byte_1008058C
                db    8
                db    0
                db    0
                db    0
                dd offset byte_1008058C
                db    9
                db    0
                db    0
                db    0
                dd offset byte_1008059C
                db  0Ah
                db    0
                db    0
                db    0
                dd offset byte_100805AC
byte_10080600   db 1                    ; DATA XREF: f_GetNewKey+D5r
                                        ; f_GetNewKey+172r ...
byte_10080601   db 29h                  ; DATA XREF: f_GetNewKey+C5r
                                        ; f_GetNewKey+164r ...
byte_10080602   db 6                    ; DATA XREF: f_GetNewKey+BBr
                                        ; f_GetNewKey+156r ...
byte_10080603   db 77h, 0D2h, 0F8h, 77h, 13h, 74h, 38h, 61h, 0F3h, 16h, 53h, 0C9h, 0B5h, 0C6h, 97h, 6Ah, 2Dh, 0E8h, 82h, 0D3h
                                        ; DATA XREF: f_GetNewKey+AAr
                                        ; f_GetNewKey+14Cr ...
                db 52h, 0D5h, 0B4h, 6Ch, 6Bh, 44h, 54h, 1Fh, 90h, 0DFh, 7Ah, 0ECh, 0F7h, 0F6h, 0BFh, 95h, 94h, 54h, 0A7h, 0D9h
                db 87h, 0AAh, 95h, 36h, 0E8h, 0CFh, 0EAh, 58h, 0DAh, 0D1h, 0E4h, 0BBh, 9Eh, 0Ah, 12h, 90h, 0A4h, 0ACh, 35h, 75h
                db 46h, 9Dh, 0F4h, 0EDh, 0D5h, 46h, 8, 0AEh, 0FFh, 77h, 0C2h, 0A6h, 8Eh, 0D3h, 46h, 1Dh, 95h, 88h, 0, 4Bh
                db 9Bh, 2 dup(0F5h), 88h, 64h, 0F1h, 33h, 0ADh, 0D2h, 25h, 84h, 9Ah, 0C5h, 13h, 43h, 0C4h, 0BFh, 0EAh, 79h, 1Eh, 34h
                db 73h, 0CCh, 2, 4, 0AFh, 4Dh, 9, 4Ch, 97h, 73h, 3Dh, 0BDh, 6Fh, 0EEh, 55h, 51h, 0BAh, 2Ah, 0E1h, 5
                db 0E5h, 0E7h, 0B5h, 0EEh, 14h, 32h, 0BEh, 0CCh, 7Ch, 1, 46h, 53h, 0C8h, 15h, 93h, 0D3h, 9Ch, 0A5h, 0CCh, 6Ch
                db 0EDh, 0Eh, 3Ah, 0FAh, 37h, 6Fh, 0C3h, 0BAh, 2Bh, 0E5h, 5Ah, 58h, 20h, 0E3h, 86h, 2Eh, 62h, 0B1h, 0A1h, 0A2h
                db 0A1h, 61h, 0DCh, 0CFh, 84h, 39h, 0D8h, 0E5h, 0B3h, 0ECh, 0Ch, 8Bh, 0C4h, 0ABh, 0B4h, 0D4h, 87h, 2Dh, 6Fh, 82h
                db 8Fh, 2Bh, 5Eh, 7, 34h, 13h, 0FAh, 1Fh, 71h, 0C6h, 0E6h, 28h, 92h, 94h, 0F8h, 1Eh, 0B9h, 0F6h, 23h, 7Eh
                db 5Ch, 8Eh, 85h, 5Fh, 0C5h, 0A1h, 0F6h, 0A6h, 0BCh, 90h, 0DFh, 48h, 0F0h, 1Dh, 7Dh, 47h, 1Fh, 66h, 83h, 20h
                db 43h, 2Fh, 0EFh, 0C8h, 0FAh, 3Bh, 0C1h, 5Dh, 45h, 0CAh, 0FCh, 0E3h, 36h, 3, 6Dh, 0B0h, 2Fh, 0B0h, 28h, 42h
                db 5Eh, 51h, 0FBh, 0Eh, 48h, 0A9h, 5Dh, 35h, 0E0h, 0CFh, 3Fh, 0ABh, 2 dup(78h), 0C5h, 6Ah, 8Dh, 5, 15h, 0DFh, 9
                db 0A8h, 48h, 3, 0BEh, 7Ch, 9Dh, 2Ch, 85h, 0CBh, 89h, 0A7h, 79h, 10h, 0Fh, 0E0h, 0CBh, 5Eh, 0B7h, 78h, 4Fh
                db 0FAh, 8Fh, 79h, 63h, 0E2h, 0A5h, 81h, 0FEh, 1Ah, 96h, 0D0h, 6Ah, 68h, 1, 7Ch, 0A7h, 37h, 0B1h, 0BEh, 0F4h
                db 67h, 0CBh, 44h, 0CEh, 9Eh, 0AAh, 61h, 0C0h, 22h, 47h, 4Fh, 41h, 0FEh, 41h, 0A8h, 0Fh, 65h, 9Fh, 26h, 1Ah
                db 4Bh, 8Bh, 7Ah, 0D9h, 0C9h, 0A7h, 49h, 39h, 58h, 6Eh, 55h, 75h, 5Fh, 0F5h, 8Dh, 0A4h, 8Ch, 14h, 11h, 0DEh
                db 9Bh, 6Bh, 0Ch, 0B5h, 0F9h, 0Dh, 80h, 69h, 5Ch, 30h, 5Eh, 67h, 42h, 62h, 83h, 0B8h, 21h, 2Ah, 99h, 9Fh
                db 87h, 52h, 37h, 32h, 7Bh, 34h, 0DCh, 0F7h, 52h, 5, 76h, 18h, 27h, 0C2h, 10h, 2Ah, 0D9h, 0B9h, 0D6h, 1Dh
                db 31h, 1Bh, 0D8h, 2Ch, 48h, 0DEh, 0D7h, 0EBh, 92h, 31h, 0E9h, 90h, 7Dh, 3, 14h, 19h, 1Fh, 40h, 0C9h, 4Bh
                db 0FCh, 4Eh, 88h, 3, 0D1h, 91h, 89h, 7Bh, 34h, 0B6h, 0FBh, 0DCh, 0D3h, 5Ch, 2Bh, 3Dh, 0A2h, 8Dh, 0BBh, 42h
                db 6Dh, 0F7h, 66h, 24h, 0C5h, 9Ch, 0DEh, 0B6h, 77h, 26h, 0E1h, 0A2h, 0CEh, 33h, 92h, 8Eh, 0BBh, 0F0h, 0B4h, 47h
                db 0C8h, 10h, 0B6h, 0E2h, 0BAh, 0DDh, 97h, 83h, 60h, 0E7h, 7Dh, 6Eh, 0ADh, 0E9h, 38h, 68h, 0A6h, 68h, 32h, 8Ch
                db 0F1h, 4Ah, 0F5h, 0BFh, 99h, 0D7h, 62h, 28h, 11h, 43h, 0Fh, 98h, 45h, 8Eh, 16h, 0A0h, 0Ah, 0ACh, 85h, 26h
                db 49h, 50h, 0CBh, 9Eh, 0B9h, 0E2h, 0ACh, 0A6h, 2, 66h, 3Eh, 0ECh, 2Ch, 51h, 0F8h, 3Ch, 0EFh, 0A4h, 1Ch, 61h
                db 3Eh, 20h, 0DDh, 0B4h, 9, 97h, 63h, 0FBh, 0F3h, 8, 3Ch, 0DAh, 81h, 0EAh, 0D9h, 0ADh, 80h, 76h, 0F4h, 9Bh
                db 0C1h, 32h, 17h, 0C2h, 1Ch, 2Bh, 75h, 0A5h, 0E1h, 44h, 9Ah, 23h, 0DFh, 5Bh, 40h, 0CDh, 0D0h, 38h, 39h, 66h
                db 0BEh, 0C7h, 0C0h, 35h, 0BCh, 3Ch, 0B3h, 4Dh, 9Ah, 81h, 0C6h, 0D8h, 0E9h, 0FEh, 7Fh, 0B0h, 0D6h, 5Fh, 0CDh, 2Eh
                db 6Eh, 19h, 65h, 0C7h, 0B3h, 0DBh, 0AAh, 8Bh, 23h, 0BFh, 0DBh, 56h, 1Eh, 0A9h, 4Dh, 0E9h, 7, 42h, 19h, 49h
                db 6Ah, 11h, 91h, 0D6h, 2 dup(0FDh), 0F9h, 0DDh, 3Ah, 0A8h, 0AEh, 0ABh, 30h, 0E0h, 0A5h, 7Fh, 75h, 13h, 68h, 3Fh, 9Fh
                db 98h, 0B2h, 60h, 6Bh, 7Eh, 1, 0Eh, 0D5h, 69h, 36h, 27h, 14h, 37h, 0E7h, 4Ah, 0F0h, 0C8h, 24h, 82h, 36h
                db 22h, 0Ah, 9Ah, 0A4h, 39h, 0B1h, 51h, 0C3h, 79h, 41h, 7, 8Dh, 53h, 2, 0Bh, 71h, 0ABh, 0F2h, 10h, 70h
                db 0B3h, 56h, 50h, 0E8h, 78h, 18h, 7Ah, 0AFh, 2Eh, 0C3h, 57h, 24h, 49h, 74h, 40h, 0Bh, 27h, 0A0h, 1Eh, 0D7h
                db 0Eh, 0Dh, 0E1h, 62h, 63h, 70h, 81h, 0A0h, 0F4h, 0F6h, 0C9h, 47h, 82h, 2Ah, 3Ah, 69h, 56h, 96h, 0B1h, 4Ch
                db 16h, 6Fh, 80h, 0B6h, 7Fh, 3Fh, 6Bh, 74h, 0C0h, 60h, 38h, 0D8h, 60h, 12h, 0D4h, 89h, 0FFh, 0EAh, 76h, 88h
                db 99h, 0F1h, 30h, 4, 7, 93h, 0F2h, 19h, 0EEh, 84h, 96h, 85h, 0A2h, 57h, 0EEh, 5Dh, 4Fh, 50h, 15h, 41h
                db 1Ch, 0C1h, 0A8h, 72h, 64h, 43h, 0D7h, 2Eh, 0F1h, 6Dh, 2, 0DEh, 0EBh, 0D1h, 6Dh, 18h, 8Ch, 2Fh, 72h, 7Eh
                db 0Ah, 5Ah, 11h, 0D4h, 0E4h, 73h, 21h, 3Fh, 0D2h, 8Fh, 0C3h, 91h, 0F3h, 29h, 5Fh, 8Bh, 84h, 4Ah, 1Bh, 56h
                db 0B2h, 54h, 0BDh, 26h, 0E3h, 0EBh, 0B7h, 50h, 4, 0EDh, 12h, 0B2h, 0E8h, 67h, 0F8h, 0F2h, 0CDh, 6, 8Ah, 64h
                db 0D0h, 0ADh, 93h, 0DBh, 12h, 1Dh, 70h, 5Bh, 2Dh, 9, 0E7h, 0C4h, 7Ch, 3Ah, 29h, 17h, 0D4h, 1Bh, 0BBh, 0Fh
                db 0D5h, 23h, 0, 8Ah, 0Bh, 25h, 4Eh, 0DCh, 4Ch, 0A3h, 58h, 83h, 0AFh, 0E4h, 0E6h, 0EDh, 80h, 31h, 7Dh, 0C7h
                db 0C6h, 69h, 99h, 0AAh, 73h, 0B9h, 6Ch, 28h, 0BCh, 6Eh, 91h, 4Fh, 7Ah, 15h, 5Dh, 40h, 70h, 98h, 52h, 0AEh
                db 0DAh, 0A9h, 0Ch, 57h, 35h, 86h, 7Eh, 76h, 9Bh, 0FEh, 4Ch, 16h, 0F2h, 9Ch, 0Dh, 20h, 2Fh, 0CEh, 0E3h, 0A3h
                db 0A0h, 0C7h, 5Bh, 3Dh, 2Ch, 0A1h, 0AEh, 6, 21h, 59h, 3Eh, 4Ah, 0BDh, 0B8h, 31h, 0B8h, 0E5h, 0Bh, 33h, 0EBh
                db 0F9h, 0C2h, 64h, 55h, 8Ah, 33h, 17h, 0C0h, 0D6h, 27h, 0CCh, 98h, 18h, 5Ch, 0D0h, 63h, 1Ah, 0BCh, 0A3h, 5Ah
                db 4Dh, 8Ah, 0FFh, 25h, 3Eh, 9Fh, 89h, 0BDh, 0CAh, 5Bh, 5, 0FBh, 72h, 30h, 8, 1Bh, 87h, 0F0h, 94h, 7Fh
                db 17h, 21h, 1Ch, 4Eh, 25h, 3Dh, 0B2h, 0ACh, 57h, 1Ah, 0DBh, 96h, 65h, 0ECh, 6, 0D2h, 24h, 0E2h, 95h, 0E0h
                db 45h, 9Dh, 53h, 8Fh, 0B8h, 0AFh, 59h, 9Ch, 74h, 0B7h, 0F3h, 0FFh, 7Bh, 72h, 86h, 0CDh, 71h, 8Ch, 0A9h, 0DAh
                db 0CFh, 3Bh, 0EFh, 6Ch, 54h, 0FDh, 5Ah, 93h, 0B0h, 8, 0FDh, 9Dh, 0, 4Eh, 0FCh, 86h, 92h, 0CAh, 22h, 0F7h
                db 29h, 0, 65h, 0DDh, 67h, 0FCh, 0F9h, 0E6h, 0A3h, 0EFh, 3Bh, 0Dh, 0BAh, 22h, 4, 2 dup(59h), 0E6h, 55h, 0B5h, 0CEh
                db 7Bh, 0CAh, 44h, 94h, 45h, 2Dh, 0Ch, 9Eh, 0C4h, 0C1h, 3Ch, 3Bh, 71h, 0E4h, 0B7h, 0D1h, 4Bh
byte_10080A00   db 88h                  ; DATA XREF: f_GetNewKey+8Fr
                                        ; f_GetNewKey+129r ...
byte_10080A01   db 12h                  ; DATA XREF: f_GetNewKey+79r
                                        ; f_GetNewKey+118r ...
byte_10080A02   db 68h                  ; DATA XREF: f_GetNewKey+80r
                                        ; f_GetNewKey+10Dr ...
byte_10080A03   db 70h, 5Bh, 0C3h, 19h, 14h, 0FDh, 3, 0Fh, 0F4h, 9Fh, 68h, 0A7h, 0B2h, 4Fh, 0ACh, 4, 2Ah, 61h, 0B9h, 0BDh
                                        ; DATA XREF: f_GetNewKey+64r
                                        ; f_GetNewKey+103r ...
                db 55h, 5Ch, 8Fh, 2, 6Ch, 0CDh, 6Fh, 71h, 97h, 56h, 41h, 82h, 0F0h, 7Fh, 84h, 0FBh, 93h, 0DDh, 9Ch, 0B7h
                db 80h, 23h, 0AEh, 58h, 0EFh, 46h, 0D1h, 36h, 0DDh, 58h, 0DFh, 0D5h, 99h, 83h, 29h, 0FEh, 0A3h, 25h, 0Eh, 1Bh
                db 41h, 14h, 0CFh, 83h, 0D2h, 0CFh, 33h, 0C0h, 0F8h, 0FEh, 0F9h, 0C8h, 89h, 5Ah, 7Dh, 73h, 92h, 1, 3Bh, 25h
                db 9Ch, 7Ch, 0CEh, 0E6h, 63h, 78h, 8, 0C3h, 0D5h, 0ACh, 0BFh, 0F4h, 0C2h, 9Ah, 78h, 0AAh, 0B8h, 63h, 42h, 70h
                db 33h, 0FAh, 0F7h, 6Ch, 3, 26h, 76h, 67h, 4Bh, 1Eh, 48h, 53h, 0BAh, 0E6h, 0D5h, 3Bh, 56h, 33h, 11h, 8Fh
                db 2, 6Ch, 0DCh, 0DBh, 0E9h, 9Dh, 9, 0D0h, 0CBh, 0F5h, 3Ah, 28h, 54h, 41h, 2Eh, 0FDh, 0D4h, 15h, 9Eh, 0A2h
                db 6Bh, 64h, 35h, 54h, 0FDh, 0BEh, 54h, 0ADh, 0BDh, 0A2h, 0DEh, 34h, 5Fh, 0A9h, 0D8h, 0E8h, 29h, 0EBh, 8Ah, 0CFh
                db 0A5h, 28h, 5Ah, 0B2h, 0C8h, 0Dh, 2, 0B6h, 0E2h, 3Ah, 0D7h, 62h, 8Ch, 4Dh, 90h, 0DAh, 0D3h, 0Eh, 16h, 1
                db 85h, 6, 10h, 30h, 0, 0BDh, 28h, 94h, 18h, 0F8h, 0FDh, 88h, 2Fh, 1Bh, 0AFh, 96h, 19h, 30h, 0CDh, 4Dh
                db 79h, 0D5h, 0B5h, 0EBh, 58h, 4Ch, 9Ah, 98h, 0A1h, 35h, 0ABh, 0B1h, 4Fh, 79h, 26h, 13h, 40h, 96h, 5Dh, 0EDh
                db 27h, 0CAh, 14h, 81h, 0CFh, 73h, 0, 0AFh, 5Ah, 0CCh, 0F1h, 92h, 0E4h, 0BFh, 38h, 3, 0B7h, 0A6h, 8Bh, 46h
                db 45h, 0D7h, 6Ah, 95h, 9, 0C1h, 92h, 33h, 32h, 69h, 0F4h, 51h, 0ACh, 0F1h, 43h, 0ABh, 6Dh, 4, 3Eh, 7Bh
                db 0D8h, 80h, 93h, 26h, 4, 37h, 47h, 0F3h, 2Bh, 0Ch, 0F0h, 0E7h, 0A0h, 0F0h, 2Bh, 61h, 0E7h, 42h, 65h, 0D9h
                db 7Fh, 0C6h, 0C1h, 0E1h, 7Eh, 0EAh, 0D9h, 0CBh, 86h, 77h, 21h, 0F8h, 0D7h, 0E3h, 53h, 6Fh, 7Bh, 2Eh, 0Ch, 0DFh
                db 0B9h, 7Dh, 5Ch, 0A5h, 43h, 47h, 0A5h, 0C4h, 66h, 49h, 19h, 29h, 48h, 0C8h, 0C5h, 2Fh, 0AFh, 86h, 5Eh, 0F1h
                db 21h, 93h, 70h, 0E5h, 7Dh, 50h, 0F2h, 0C9h, 4Eh, 0B0h, 63h, 0, 52h, 0FCh, 64h, 9Bh, 8Ah, 2Dh, 0B7h, 7Ah
                db 16h, 57h, 0A0h, 5, 0Bh, 3Ch, 0C2h, 63h, 87h, 0E0h, 67h, 5Eh, 59h, 0EEh, 79h, 0Ch, 84h, 31h, 1Ah, 44h
                db 9Eh, 16h, 0BCh, 3Ch, 30h, 0BBh, 40h, 5Ah, 0DBh, 7Eh, 69h, 6Bh, 71h, 91h, 1Ch, 0ACh, 17h, 0A3h, 0E2h, 0D7h
                db 0D1h, 94h, 0Ah, 75h, 0DFh, 0A5h, 73h, 0B0h, 0D0h, 62h, 0A9h, 5Fh, 0EEh, 19h, 46h, 6Dh, 13h, 90h, 24h, 2Eh
                db 0CEh, 0C2h, 0C7h, 20h, 8Fh, 8Ah, 0EAh, 0FFh, 8Eh, 0F2h, 0Fh, 0D8h, 0FCh, 55h, 0E8h, 32h, 2Ch, 0B4h, 99h, 0E3h
                db 0BCh, 0CBh, 56h, 99h, 61h, 0ADh, 0FEh, 0F2h, 0D9h, 3Fh, 4Ch, 48h, 0E6h, 2Bh, 0F5h, 5Dh, 95h, 7, 80h, 9Eh
                db 0B3h, 0CEh, 0F3h, 7Eh, 0B1h, 6Bh, 81h, 0B3h, 90h, 0Ah, 5Bh, 89h, 7Ah, 0E7h, 96h, 87h, 3Fh, 0E1h, 9Dh, 6
                db 35h, 5, 0CAh, 24h, 0F2h, 36h, 0A2h, 0B9h, 65h, 0A1h, 2Ah, 2Dh, 8, 11h, 7Eh, 0E0h, 11h, 29h, 31h, 0C2h
                db 82h, 0AFh, 72h, 3Eh, 0CCh, 17h, 82h, 8Ch, 0ABh, 2Fh, 39h, 8, 39h, 65h, 17h, 3Fh, 0FFh, 0B5h, 0D4h, 0CAh
                db 1Bh, 0E8h, 5, 4Eh, 0DAh, 3Dh, 32h, 0F9h, 64h, 72h, 0C8h, 66h, 3Bh, 53h, 0BAh, 84h, 0DEh, 24h, 0BBh, 18h
                db 0F3h, 12h, 0FAh, 5Ch, 10h, 4Bh, 27h, 45h, 72h, 2Ch, 0DAh, 2Ah, 9Dh, 0AAh, 0E4h, 35h, 47h, 44h, 0EBh, 56h
                db 3Eh, 0EFh, 85h, 0A9h, 0C7h, 0BCh, 87h, 52h, 0B4h, 0C4h, 0A1h, 0EFh, 0C1h, 51h, 0D2h, 90h, 78h, 39h, 0EDh, 31h
                db 0CAh, 0A7h, 55h, 77h, 62h, 4Eh, 88h, 0B5h, 0ADh, 2, 18h, 0D1h, 0DCh, 0DFh, 25h, 0C7h, 4Ah, 60h, 3Ch, 2Ch
                db 1Eh, 0C0h, 51h, 7Fh, 96h, 5Fh, 0C6h, 93h, 0FEh, 54h, 1, 0C6h, 0A9h, 22h, 0Bh, 8Eh, 0A2h, 0F6h, 4Eh, 7Dh
                db 6Fh, 0B6h, 0A4h, 0F6h, 0B5h, 0E9h, 50h, 10h, 6, 87h, 0EEh, 7, 31h, 0AEh, 2Fh, 59h, 0E0h, 0C3h, 0CBh, 0A6h
                db 23h, 0Bh, 0Dh, 4Ch, 0Dh, 13h, 9Fh, 57h, 0B6h, 0D8h, 0F8h, 17h, 46h, 8Eh, 0B6h, 3Dh, 5, 82h, 4Ah, 0C5h
                db 0F5h, 99h, 4Bh, 0DDh, 51h, 0D9h, 0D3h, 16h, 1Fh, 0F3h, 94h, 40h, 0C4h, 0DEh, 1Fh, 27h, 73h, 0C9h, 30h, 49h
                db 0A7h, 97h, 0ECh, 60h, 0Ah, 68h, 59h, 0Dh, 77h, 8, 9Bh, 9Ah, 0F1h, 40h, 7Ch, 0ECh, 2Dh, 0B3h, 52h, 38h
                db 91h, 38h, 77h, 78h, 68h, 9, 8Dh, 11h, 38h, 0E2h, 4Fh, 0AEh, 67h, 0B1h, 0E3h, 0Eh, 15h, 5Dh, 0B2h, 91h
                db 0EDh, 0FFh, 0B3h, 0F7h, 0F6h, 0B9h, 3Fh, 69h, 94h, 7Bh, 22h, 80h, 83h, 1Fh, 0BEh, 0CCh, 50h, 67h, 66h, 21h
                db 57h, 9Ch, 7Ah, 72h, 0C6h, 21h, 49h, 0Ah, 44h, 5Eh, 15h, 9Fh, 6Ah, 8Bh, 0E5h, 85h, 0D6h, 0E4h, 23h, 0E2h
                db 28h, 0FBh, 45h, 64h, 5Dh, 98h, 0EFh, 8Ah, 74h, 0A8h, 4, 0BCh, 88h, 4Ah, 0AAh, 9Dh, 2Eh, 0D6h, 0B0h, 0EAh
                db 4Dh, 92h, 6Dh, 0DCh, 53h, 34h, 1Dh, 8Dh, 0ECh, 3Eh, 6Bh, 6Ah, 0EAh, 9Bh, 89h, 86h, 60h, 71h, 0C9h, 0A3h
                db 1, 3, 5Fh, 0BEh, 0AAh, 1Ah, 0E0h, 7Ch, 1Ah, 0F9h, 60h, 43h, 0Eh, 6Eh, 0FFh, 12h, 3Dh, 0A0h, 2Ch, 0BAh
                db 1Ch, 32h, 34h, 0BBh, 24h, 89h, 0B1h, 65h, 22h, 0C7h, 0E7h, 22h, 0A4h, 0D1h, 0B8h, 0C1h, 0E3h, 6Fh, 0D6h, 0EEh
                db 36h, 0F4h, 0FCh, 0A8h, 6Eh, 10h, 91h, 1Dh, 0BEh, 0E5h, 13h, 0D2h, 69h, 18h, 74h, 14h, 12h, 0D4h, 7Bh, 1Eh
                db 9Fh, 0DBh, 95h, 0B4h, 0AEh, 85h, 6Ch, 5Bh, 81h, 0F7h, 4Dh, 0F5h, 0F9h, 0C5h, 2Dh, 9Ch, 9Bh, 84h, 1Bh, 41h
                db 0C9h, 6Ah, 98h, 0CEh, 0C0h, 0D2h, 6, 42h, 0A6h, 27h, 3Dh, 4Fh, 5Eh, 0B7h, 71h, 0D3h, 0BFh, 0B8h, 83h, 8Bh
                db 0Ch, 0BAh, 0D0h, 97h, 0C5h, 0EDh, 6Eh, 0E4h, 34h, 9Eh, 0FBh, 0B8h, 20h, 45h, 0A3h, 76h, 5Bh, 59h, 58h, 74h
                db 0BBh, 2Ah, 61h, 23h, 8Dh, 76h, 1Eh, 50h, 98h, 0, 86h, 0A4h, 5Ch, 8Ch, 0C0h, 1Ch, 37h, 81h, 20h, 0E9h
                db 0F7h, 1Dh, 44h, 79h, 26h, 95h, 75h, 4Bh, 3Ah, 3Bh, 97h, 39h, 1Dh, 52h, 0ADh, 0Bh, 0EBh, 8Fh, 0E9h, 4Ah
                db 0E5h, 1Ch, 0DBh, 2Bh, 9Ah, 0DAh, 0B4h, 0D6h, 0A8h, 0D0h, 0A7h, 1Ah, 0B0h, 7Ah, 0C4h, 15h, 75h, 0Fh, 0F6h, 1Fh
                db 8Bh, 20h, 0E1h, 0A1h, 3Ch, 66h, 57h, 3Ah, 0FAh, 0D3h, 0A8h, 0DEh, 0Fh, 74h, 0A6h, 6Eh, 49h, 75h, 0BDh, 0FCh
                db 0CDh, 0ABh, 0CCh, 47h, 7, 0ECh, 0E6h, 9, 0FBh, 70h, 0DDh, 0CDh, 0E8h, 0B2h, 36h, 0D4h, 25h, 8Dh, 62h, 37h
                db 0E1h, 0DCh, 8Eh, 0A0h, 7Ch, 43h, 7Fh, 0FAh, 42h, 0A4h, 37h, 0F0h, 0C3h, 48h, 7, 55h, 76h, 6Dh, 8Ch, 0BFh
                db 4Ch
byte_10080E00   db 0, 4, 40h, 44h, 10h, 14h, 50h, 54h, 2, 6, 42h, 46h, 12h, 16h, 52h, 56h, 80h, 84h, 0C0h, 0C4h
                                        ; DATA XREF: sub_10001010+14r
                                        ; sub_10001010+21r ...
                db 90h, 94h, 0D0h, 0D4h, 82h, 86h, 0C2h, 0C6h, 92h, 96h, 0D2h, 0D6h, 20h, 24h, 60h, 64h, 30h, 34h, 70h, 74h
                db 22h, 26h, 62h, 66h, 32h, 36h, 72h, 76h, 0A0h, 0A4h, 0E0h, 0E4h, 0B0h, 0B4h, 0F0h, 0F4h, 0A2h, 0A6h, 0E2h, 0E6h
                db 0B2h, 0B6h, 0F2h, 0F6h, 8, 0Ch, 48h, 4Ch, 18h, 1Ch, 58h, 5Ch, 0Ah, 0Eh, 4Ah, 4Eh, 1Ah, 1Eh, 5Ah, 5Eh
                db 88h, 8Ch, 0C8h, 0CCh, 98h, 9Ch, 0D8h, 0DCh, 8Ah, 8Eh, 0CAh, 0CEh, 9Ah, 9Eh, 0DAh, 0DEh, 28h, 2Ch, 68h, 6Ch
                db 38h, 3Ch, 78h, 7Ch, 2Ah, 2Eh, 6Ah, 6Eh, 3Ah, 3Eh, 7Ah, 7Eh, 0A8h, 0ACh, 0E8h, 0ECh, 0B8h, 0BCh, 0F8h, 0FCh
                db 0AAh, 0AEh, 0EAh, 0EEh, 0BAh, 0BEh, 0FAh, 0FEh, 1, 5, 41h, 45h, 11h, 15h, 51h, 55h, 3, 7, 43h, 47h
                db 13h, 17h, 53h, 57h, 81h, 85h, 0C1h, 0C5h, 91h, 95h, 0D1h, 0D5h, 83h, 87h, 0C3h, 0C7h, 93h, 97h, 0D3h, 0D7h
                db 21h, 25h, 61h, 65h, 31h, 35h, 71h, 75h, 23h, 27h, 63h, 67h, 33h, 37h, 73h, 77h, 0A1h, 0A5h, 0E1h, 0E5h
                db 0B1h, 0B5h, 0F1h, 0F5h, 0A3h, 0A7h, 0E3h, 0E7h, 0B3h, 0B7h, 0F3h, 0F7h, 9, 0Dh, 49h, 4Dh, 19h, 1Dh, 59h, 5Dh
                db 0Bh, 0Fh, 4Bh, 4Fh, 1Bh, 1Fh, 5Bh, 5Fh, 89h, 8Dh, 0C9h, 0CDh, 99h, 9Dh, 0D9h, 0DDh, 8Bh, 8Fh, 0CBh, 0CFh
                db 9Bh, 9Fh, 0DBh, 0DFh, 29h, 2Dh, 69h, 6Dh, 39h, 3Dh, 79h, 7Dh, 2Bh, 2Fh, 6Bh, 6Fh, 3Bh, 3Fh, 7Bh, 7Fh
                db 0A9h, 0ADh, 0E9h, 0EDh, 0B9h, 0BDh, 0F9h, 0FDh, 0ABh, 0AFh, 0EBh, 0EFh, 0BBh, 0BFh, 0FBh, 0FFh
dword_10080F00  dd 69F9EFE7h, 0D163D5EDh, 6E4B2B88h, 4ECF7299h, 60818E53h, 0C8706ECEh, 0E094E21Bh, 0AB0F46C6h, 0C010BB0Ah, 70EA54C4h
                                        ; DATA XREF: sub_10001C50+278r
                                        ; sub_10001C50+2AFr ...
                dd 44F01479h, 3FEA65Bh, 0D59616D6h, 2E6122Bh, 0F9875938h, 0EBB3308Bh, 13957CCCh, 0CB37699Ah, 0B4B68DFAh, 0C968DABEh
                dd 0B8239B05h, 6ABEE8B3h, 0B6E93EDEh, 7D67F64Bh, 30562289h, 3E9C8752h, 67334A3Ch, 48650286h, 93801084h, 0BE89EB1Ah
                dd 0BCD6583Eh, 0B3044995h, 7BCD8654h, 0DB5CB30Dh, 0D224D2B9h, 3CC33476h, 8C39DBB8h, 285D2DDAh, 0A5C5E31Dh, 4342D016h
                dd 8D216FC8h, 0F40AFBB7h, 788A8100h, 2A029EFEh, 0C4E57831h, 0F89FED48h, 0C7A27F65h, 3A694469h, 966D67CFh, 203DF81Eh
                dd 5231BEF1h, 3836F74Dh, 6C1498ACh, 1F006A33h, 0D6D11182h, 497DB6F6h, 98A7C214h, 1AED1D78h, 425A6466h, 9775D3BFh
                dd 0B9E739Fh, 1760BFF7h, 84590E7Ch, 9F15067Bh, 0E63E9204h, 0D340380h, 9298A4F4h, 656CF918h, 0A1302026h, 26978801h
                dd 0C2CB7F0h, 82F37E63h, 0FAC05E6Ch, 0FD729A03h, 952A609Bh, 11CACFE8h, 4005D742h, 53290A81h, 1E18DE43h, 0B5AE398Ah
                dd 0DDF6C312h, 0B9A10Fh, 9AF87130h, 0DCEE7762h, 80ACCD47h, 81B47937h, 0BA7C2821h, 0B15BFAB1h, 45E8A009h, 1BF5A908h
                dd 0F5124FC7h, 580ED811h, 0F74DFCE3h, 278F3C71h, 1A1157Fh, 662BFE4Ch, 4C90C1BDh, 0B7F18AAEh, 0ED194094h, 320991ADh
                dd 0A0289456h, 0ADA536D9h, 0FF2D2927h, 0E8F437DFh, 59166C61h, 2B1A2A8Eh, 7AD53224h, 0BDCEEC4Eh, 9BE0C540h, 8B8B1FD7h
                dd 5DE3AF5Ah, 4B2205D2h, 392E433Dh, 506E0DD5h, 0C6BACB15h, 0D9030029h, 72B5E7E0h, 0AEE2318Dh, 36FC5296h, 7507238Fh
                dd 44C6234h, 0A2772772h, 7C7F423Bh, 9D4AB55Fh, 90C717D0h, 1C476D67h, 70B6560h, 0E4612120h, 0F1E78CFCh, 18B2AE5Ch
                dd 8A93ABA7h, 0E9EC83AFh, 25D08F55h, 0BF915F6Ah, 0F6BB0A4h, 5FBC1C7Eh, 6BA65CC3h, 0F6554893h, 8606BD58h, 0E2CB513Fh
                dd 64744D68h, 0B21CFDE5h, 0E5799550h, 871E0928h, 9C1C0BBh, 61993A23h, 34A3E1B2h, 0D81BB459h, 0DA44077Dh, 0E3D3E54Fh
                dd 83EBCA13h, 1D5FD917h, 0A950F5E2h, 314E96F9h, 35BB55C2h, 0C5FDCC41h, 0CD9D1985h, 0D33C66C9h, 0FE359D57h, 0A36F9302h
                dd 6D0C2CDCh, 22624B3Ah, 0F0FF388Ch, 91DFA3A0h, 9432D4EBh, 5176B9A5h, 88CC1883h, 0A682E449h, 237AFF4Ah, 1427B8A3h
                dd 47B7132Dh, 0FC6A2E73h, 73AD5390h, 0D48EA2A6h, 68E15B97h, 3F843322h, 554D644h, 3B71F019h, 153F0CD3h, 46AFA75Dh
                dd 0CA2FDDEAh, 741F97FFh, 0B0434EC1h, 5A516B35h, 21254C6Eh, 8F7EDCECh, 37E4E6E6h, 57DCC9BAh, 5CFB1B2Ah, 0AA17F2B6h
                dd 55837A9Eh, 6F539FF8h, 0E7262674h, 0D7C9A5F2h, 0DFA97036h, 9E0DB20Bh, 0A79A5039h, 5B49DF45h, 0EAAB84FBh, 0C24F082Eh
                dd 99BF7664h, 331125DDh, 549BCEEEh, 0FBD8EA1Ch, 0C1080F7Ah, 0AFFA85FDh, 128DC8BCh, 4A3AB1A2h, 0DEB1C446h, 0A8484192h
                dd 2CA8EEE1h, 2EF75DC5h, 775890ABh, 3DDB8006h, 8D974CBh, 0F2A08BA8h, 63C68907h, 19AA1A2Ch, 764024DBh, 7F38456Fh
                dd 0CEDA1ED1h, 0BB649C51h, 5EA4A80Eh, 294599AAh, 2DB05A91h, 71F2E0B4h, 0D07B619Dh, 0ACBD82A9h, 79923570h, 7E20F11Fh
                dd 89D4ACF3h, 0A86C7EFh, 8541BA0Ch, 10D27B98h, 0B93B2F75h, 56C47DCAh, 8E66689Ch, 0E18C566Bh, 16780B87h, 62DE3D77h
                dd 411D6332h, 4D8875CDh, 0EE5E47C0h, 0F3B83FD8h, 0CC85ADF5h, 24C83B25h, 2FEFE9B5h, 9C52012Fh, 0E7304D4h, 613D110h
                dd 0A4DD576Dh, 0EC01F4E4h, 4FD7C6E9h, 0CFC2AAA1h, 0C357BC5Eh, 0EF46F3B0h
dword_10081300  dd 0B974136Eh, 85107736h, 5DF0970Eh, 0CBB6D1DEh, 702E49FDh, 125136E0h, 0E6680F2Dh, 6093F450h, 19F4934Eh, 2497F010h
                                        ; DATA XREF: sub_10001060+418r
                                        ; sub_10001060+459r ...
                dd 7384E354h, 3EB8C4Bh, 0BBD9BEC1h, 0AF9DFA91h, 1EA7C01Ah, 444522A2h, 0B3D6B1C6h, 10FC9B4Fh, 0BD8DEA93h, 0E396F1D6h
                dd 2C98FF17h, 0EE67002Ah, 0B2D1B6C0h, 0A1C6A1C4h, 40BCDB5Fh, 0AC375038h, 96076032h, 0CF4F2823h, 0C2BED9DFh, 575235A6h
                dd 510661F4h, 0C5ED8A8Bh, 6FCFA803h, 0D5503726h, 75D0B706h, 0E76F082Bh, 93F99EC9h, 0C3B9DED9h, 995B3C61h, 352D4ABBh
                dd 0D8A1C6DAh, 2ACCAB45h, 89E681CCh, 3E88EF15h, 74D7B000h, 0F081E6D2h, 0D3046374h, 0C81C7B77h, 0F32B4C7Bh, 0F1D7AB1h
                dd 777D1AA9h, 985C3B67h, 9CA5C29Ah, 8B4B2C63h, 83442364h, 0FA23447Ah, 2BCBAC43h, 1A5E39E7h, 4FE0870Ch, 48B3D458h
                dd 4126E2h, 1D0D6AB3h, 6B3651FEh, 16A8CF1Dh, 21690EEBh, 38DCBB47h, 97006734h, 0B72F483Bh, 5BA4C35Ch, 0AE3844Ah
                dd 0B17B1C69h, 767A1DAFh, 0B582E594h, 30D3B440h, 0F57F1829h, 87BDDA99h, 0C6472022h, 6D6205ACh, 8A4C2B65h, 53ABCC5Bh
                dd 3C2542BAh, 33791EE9h, 4C4A2DA5h, 135631E6h, 0F88EE9D5h, 71275B6h, 9F0F6833h, 7283E452h, 5F5D3AA1h, 3780E714h
                dd 0AE9AFD97h, 0E934537Eh, 7DDFB801h, 7E7512A8h, 0C0137470h, 0F6D5B280h, 39DBBC41h, 31D4B346h, 0C4EA8D8Dh, 84177030h
                dd 0ECCAAD85h, 7B8BEC53h, 0BC8AED95h, 54F89F0Fh, 0B6284F3Dh, 4B8DF1Fh, 6C6502AAh, 0FFDDBA81h, 0CDE2858Ch, 0E291F6D0h
                dd 0CB7D018h, 8EB5D298h, 6194F356h, 327E19EFh, 0E13B5C79h, 6A3156F8h, 9BF691CEh, 286106EAh, 0DA0C6B75h, 61572B0h
                dd 0F186E1D4h, 6EC8AF05h, 17AFC81Bh, 273D5AB9h, 11FB9C49h, 8D1F7831h, 0BADEB9C7h, 0EF60072Ch, 0A53F5839h, 0FEDABD87h
                dd 5CF79008h, 0C1147376h, 3B7611EEh, 0EB99FED1h, 82432462h, 263A5DBFh, 22C3A442h, 0DB0D71Eh, 0E4C5A282h, 0B07C1B6Fh
                dd 0A8CEA9C5h, 296601ECh, 0D1A9CEDBh, 7CD8BF07h, 84E29E5h, 0E1A7DB7h, 0A792F596h, 0D6FA9D8Fh, 95ADCA9Bh, 0D9A6C1DCh
                dd 0A36B0C6Bh, 0CAB1D6D8h, 150265B4h, 2E3552B8h, 0BE4834Ch, 0BE27403Ah, 59096EF3h, 8FB2D59Eh, 454225A4h, 500166F2h
                dd 9AF196C8h, 565532A0h, 0C91B7C71h, 67C0A704h, 0FC771028h, 5AA3C45Ah, 580E69F5h, 0B8731468h, 0DEF59288h, 71294EFBh
                dd 0A695F290h, 0A26C0B6Dh, 0E03C5B7Fh, 0AA63046Ah, 421176F0h, 81E98ECBh, 0DFF2958Eh, 2590F716h, 3687E012h, 91543366h
                dd 90533460h, 0E5C2A584h, 0C7402724h, 206E09EDh, 0F7D2B586h, 0F22C4B7Dh, 1B593EE1h, 0FD70172Eh, 7A8CEB55h, 342A4DBDh
                dd 9492EE3h, 0D4573020h, 46E88F0Dh, 80EE89CDh, 0AB64036Ch, 140562B2h, 0D0AEC9DDh, 4A1E79F7h, 1C0A6DB5h, 63395EF9h
                dd 8C187F37h, 0BF20473Ch, 792641FCh, 1FA0C71Ch, 4EE7800Ah, 2F3255BEh, 646A0DADh, 86BADD9Fh, 656D0AABh, 431671F6h
                dd 699BFC51h, 94AACD9Dh, 0B485E292h, 0D7FD9A89h, 2D9FF811h, 0EDCDAA83h, 23C4A344h, 9DA2C59Ch, 5E5A3DA7h, 41BBDC59h
                dd 9E086F35h, 0A0C1A6C2h, 0AD30573Eh, 0FB24437Ch, 0DD5F3821h, 5BFD819h, 0F989EED3h, 689CFB57h, 0DC583F27h, 0E8335478h
                dd 18F39448h, 3D2245BCh, 623E59FFh, 4B197EF1h, 47EF880Bh, 88E186CAh, 0EA9EF9D7h, 52ACCB5Dh, 49B4D35Eh, 3A7116E8h
                dd 3F8FE813h, 0A4385F3Fh, 92FE99CFh, 0DB0B6C73h, 4D4D2AA3h, 0A9C9AEC3h, 0D2036472h, 55FF9809h, 2EC8B4Dh, 782146FAh
                dd 0CCE5828Ah, 0F4781F2Fh, 14621E4h, 66C7A002h, 7F7215AEh, 0CE482F25h
dword_10081700  dd 7C1FC231h, 0ADEBE7E0h, 6DDB1720h, 684234Bh, 0C2F4978Fh, 0D770069Ah, 0E1BAFAACh, 182224Ch, 2F4BC562h, 0EAFDB6A7h
                                        ; DATA XREF: sub_10001060+3FDr
                                        ; sub_10001060+43Cr ...
                dd 0F2FEADBFh, 0C074158Dh, 0BF6977F2h, 0B1A8B8FCh, 4752B40Ah, 605C9D2Dh, 0A1AAAAECh, 5DD12D10h, 976056DAh, 1300B25Eh
                dd 55D02418h, 0A06C6DEDh, 669C5B2Bh, 0D1B0C09Ch, 1686315Bh, 2C0D8061h, 99A199D4h, 1847FE55h, 268C0B6Bh, 0BB2933F6h
                dd 7F598732h, 0B2EEFDFFh, 675A9C2Ah, 5416E319h, 4054B50Dh, 0F07E2FBDh, 5B11EB16h, 3ACF5477h, 0B06E7FFDh, 0B6AEB9FBh
                dd 0E43C79A9h, 340E9B79h, 6C1DD021h, 0B9A9B1F4h, 0FEBFE0B3h, 785F8635h, 7E9F4033h, 4694730Bh, 932012DEh, 0C1B2D28Ch
                dd 0A32A28EEh, 0DB314B96h, 0F43E6BB9h, 0C5F29688h, 4855BC05h, 33089A7Eh, 7ADF0437h, 6E9D5223h, 9F615FD2h, 5696611Bh
                dd 0E5FABEA8h, 404A149h, 0FC3F62B1h, 9AE7DCD7h, 2DCB4760h, 5056A71Dh, 0FDF9A5B0h, 298B0364h, 9EA798D3h, 45D23608h
                dd 0B03A946h, 0AF6B65E2h, 0B7687EFAh, 4F53BD02h, 3DC95570h, 62DC1F2Fh, 32CE5D7Fh, 0CB335986h, 77588E3Ah, 0AB2B21E6h
                dd 304EDF7Dh, 1E873853h, 9C271AD1h, 0DC36F40h, 0AC56E47h, 0D9B1C994h, 0CEB5DA83h, 0AC2D20E1h, 9832B44h, 1740F65Ah
                dd 741ECB39h, 0D2F6859Fh, 2E8D0263h, 742E44Ah, 72DE0D3Fh, 8C2508C1h, 641CD929h, 1DC17D50h, 0C772148Ah, 284DC465h
                dd 4AD53E07h, 0A9ABA3E4h, 842401C9h, 619A5A2Ch, 86A483CBh, 0F7782EBAh, 384FD675h, 906657DDh, 22CC4F6Fh, 9B211BD6h
                dd 0EEBDF2A3h, 9DE1DDD0h, 0EF7B35A2h, 35C85C78h, 0F87F26B5h, 0F3386ABEh, 0A42C29E9h, 0CC355881h, 4414F109h, 1046F75Dh
                dd 5F51AF12h, 1C07BA51h, 0EC3D70A1h, 5750A61Ah, 79994134h, 0BAEFF4F7h, 6B1BD126h, 5C17EA11h, 0A6ACABEBh, 0D4364399h
                dd 0D5F08498h, 942613D9h, 49937B04h, 0B42E3BF9h, 8AE5CEC7h, 85E2C6C8h, 0EB3B71A6h, 0E9BBF3A4h, 0CF731D82h, 0BC2F32F1h
                dd 832200CEh, 3B099376h, 0E6BCFBABh, 769E493Bh, 4B13F906h, 52D6251Fh, 3F49D772h, 0A86D64E5h, 6F5B9522h, 65DA1E28h
                dd 204CCD6Dh, 0CAF59E87h, 3E8F1073h, 806445CDh, 4192720Ch, 0A5EAEEE8h, 631AD82Eh, 0F1B8E8BCh, 96A691DBh, 0D8770E95h
                dd 240C8969h, 25CA4E68h, 0BDE9F5F0h, 0FAFFA4B7h, 7198483Ch, 5E976813h, 82E4C7CFh, 3748DE7Ah, 0F5F8ACB8h, 12C6755Fh
                dd 3C0F9271h, 19813954h, 0E33A78AEh, 218A0A6Ch, 8DE3CFC0h, 0DC374A91h, 0DDF18D90h, 5190601Ch, 4C15F801h, 0D076079Dh
                dd 845EC45h, 1406B359h, 274ACC6Ah, 7B19C336h, 8B2309C6h, 4DD33F00h, 2B0B8166h, 81A282CCh, 6ADD1627h, 0C4345189h
                dd 0DEB7C893h, 302A04Eh, 7318CA3Eh, 5C26648h, 0E77A3CAAh, 0A76A6CEAh, 3188187Ch, 8EA58AC3h, 0E852A43h, 91A090DCh
                dd 42D4370Fh, 5AD72C17h, 0DF710F92h, 89A38BC4h, 0D6B6C19Bh, 0B86F76F5h, 92E6D5DFh, 0FF7927B2h, 7DD90530h, 1AC77C57h
                dd 15C07458h, 0FB3963B6h, 2C4674Fh, 230A886Eh, 4312F00Eh, 75D80C38h, 0F6BEE9BBh, 685D9425h, 5310E21Eh, 1F41FF52h
                dd 0EDFBB7A0h, 0BEAFB0F3h, 44E54Dh, 95E0D4D8h, 0CDF39F80h, 368E197Bh, 0F43ED42h, 705E8F3Dh, 0E87D34A5h, 0AEADA2E3h
                dd 4E957A03h, 2ACD4667h, 1B01BB56h, 0F9B9E1B4h, 0C332508Eh, 876244CAh, 0B5E8FCF8h, 0DAF78C97h, 0C9B3DB84h, 0AAEDE6E7h
                dd 98675ED5h, 8F634DC2h, 39891174h, 0C6B4D38Bh, 0C8751C85h, 0D330429Eh, 0A2ECEFEFh, 88654CC5h, 0B3283AFEh, 5857AE15h
                dd 0C05A841h, 0E07C3DADh, 1180305Ch, 59916914h, 699B5324h, 0E2FCBFAFh
dword_10081B00  dd 6EA1F9DBh, 0B20C88AAh, 70D89EBCh, 59593614h, 379495B7h, 0DAC02C0Eh, 0F75293B1h, 0AB7DE0C2h, 0D7F21331h, 0A566A48h
                                        ; DATA XREF: sub_10001060+409r
                                        ; sub_10001060+44Ar ...
                dd 5B4B2604h, 649BC9EBh, 0BD2CA785h, 0C3B14466h, 8CD56F4Dh, 328E8AA8h, 11351230h, 47205173h, 4629597Bh, 2BFFE2C0h
                dd 0F97BB496h, 8FCE7755h, 1655270h, 0D5E6547h, 0DED33B19h, 6DBAE1C3h, 2EE5FDDFh, 69A9F6D4h, 23D7C2E0h, 3AA6AA88h
                dd 50781E3Ch, 27E4A68h, 45324163h, 7EF1B99Bh, 0CA906C4Eh, 0DFDA3311h, 25D6C5E7h, 0D8D23C1Eh, 3DAEA587h, 4E01795Bh
                dd 40285E7Ch, 0DDC82301h, 9D8C2705h, 0EF2AF3D1h, 0C4B94B69h, 0B11790B2h, 7DEAA183h, 15260527h, 5679193Bh, 95A40725h
                dd 0E00ADCFEh, 8447A58h, 546B092Bh, 9B8D2002h, 338782A0h, 0C8827C5Eh, 91B71032h, 58503E1Ch, 0D5E00321h, 319592B0h
                dd 0A746D7F5h, 0D3E10426h, 3BAFA280h, 0A355C0E2h, 18143A18h, 2AF6EAC8h, 0BF3EB795h, 0B5F6240h, 49097654h, 0A96FF0D2h
                dd 82FC486Ah, 89CF7052h, 6C5A78h, 4C13694Bh, 68A0FEDCh, 423A4E6Ch, 0D9DB3416h, 7645577h, 0B836B89Ah, 78F0BE9Ch
                dd 8BDD6042h, 0C98B7456h, 80EE587Ah, 77D091B3h, 122E0A28h, 0EC31EBC9h, 0F15394B6h, 29EDF2D0h, 0A45DCFEDh, 369D9DBFh
                dd 27C4D5F7h, 3CA7AD8Fh, 0E419CBE9h, 28E4FAD8h, 1E153D1Fh, 43334664h, 0EB39E4C6h, 5D4A2103h, 629ACEECh, 0E822FCDEh
                dd 0BE37BF9Dh, 7FF8B193h, 4A126E4Ch, 443B496Bh, 0FD68A381h, 94D7250h, 92AC082Ah, 0CD986341h, 6689D9FBh, 0E218CCEEh
                dd 94AD0F2Dh, 0AC75EFCDh, 1B0F2200h, 90BE183Ah, 51711634h, 0B71697B5h, 3FBCB597h, 9A84280Ah, 0F872BC9Eh, 4F087153h
                dd 0C7A25371h, 0BC25AF8Dh, 163D1D3Fh, 76D999BBh, 7AE2AE8Ch, 0C6AB5B79h, 0A64FDFFDh, 8AD4684Ah, 0AF6EF7D5h, 17341537h
                dd 74CB89ABh, 24DFCDEFh, 0E103D4F6h, 0FE73BB99h, 0FB69A486h, 0A554C7E5h, 9896381Ah, 0E510C3E1h, 48007E5Ch, 55620123h
                dd 0BB2DA082h, 6BBBE6C4h, 0DBC92406h, 83F54062h, 41215674h, 3EB5BD9Fh, 6AB2EECCh, 13270220h, 87E65775h, 96BF1F3Dh
                dd 0EA30ECCEh, 8DDC6745h, 75C281A3h, 71D196B4h, 0A25CC8EAh, 9F9E3715h, 26CDDDFFh, 6393C6E4h, 73C386A4h, 0FA60AC8Eh
                dd 0C1A35476h, 0C2B84C6Eh, 0B50487A5h, 6780D1F3h, 79F9B694h, 0A04ED8FAh, 6FA8F1D3h, 0F05A9CBEh, 0D4E90B29h, 0E457D5Fh
                dd 7CE3A98Bh, 6CB3E9CBh, 0B30580A2h, 9E973F1Dh, 0B61F9FBDh, 93A50022h, 4B1B6644h, 0A866F8DAh, 57701133h, 66D5D7Fh
                dd 0B93FB092h, 0ED38E3C1h, 0F65B9BB9h, 526A0E2Ch, 0D1F31436h, 0CF8A7351h, 2FECF5D7h, 0D6FB1B39h, 1C072D0Fh, 0D2E80C2Eh
                dd 0CE837B59h, 47F4D6Fh, 0D0FA1C3Eh, 0EE23FBD9h, 97B61735h, 191D3210h, 9C852F0Dh, 2CF7EDCFh, 21C5D2F0h, 0F54083A1h
                dd 0DCC12B09h, 1A062A08h, 0E92BF4D6h, 0FF7AB391h, 81E75072h, 8EC77F5Dh, 5E51391Bh, 0F2488CAEh, 0C5B04361h, 358685A7h
                dd 0B40D8FADh, 1D0E2507h, 22DECAE8h, 0CB996446h, 142F0D2Fh, 0A147D0F2h, 86EF5F7Dh, 0E702D3F1h, 6088DEFCh, 3774260h
                dd 103C1A38h, 53630624h, 0F4C7557h, 5C43290Bh, 0AD7CE7C5h, 2DFEE5C7h, 39BDB290h, 6592C1E3h, 1F1C3517h, 348F8DAFh
                dd 88C6785Ah, 0AA74E8CAh, 20CCDAF8h, 0BA24A88Ah, 309C9AB8h, 0E60BDBF9h, 38B4BA98h, 85F44765h, 0F4498BA9h, 0F34184A6h
                dd 72CA8EACh, 999F3012h, 0FC61AB89h, 84FD4F6Dh, 0AE67FFDDh, 0C576D4Fh, 6181D6F4h, 0B01E98BAh, 0C0AA5C7Eh, 5764567h
                dd 7BEBA684h, 5F583113h, 0CC916B49h, 4D1A6143h, 0E311C4E6h, 5A422E0Ch
dword_10081F00  dd 2B713520h, 0BBDABB73h, 40ABA230h, 658DFF0Eh, 57332785h, 4516D36Fh, 3BA00CFFh, 0BEA1941h, 0F09B0002h, 0C8B45C62h
                                        ; DATA XREF: sub_10001C50+252r
                                        ; sub_10001C50+297r ...
                dd 31318814h, 6AA10ABAh, 97077860h, 47E21E5Ah, 0EF66CC69h, 38F509Fh, 0EB456AC5h, 0CBDE46A4h, 18513A58h, 7636DC17h
                dd 0D86565BDh, 9699AF93h, 26A90DA1h, 62C44364h, 0A36ECB72h, 7E5395C9h, 6E82AC16h, 33C54521h, 0F526715Dh, 904EC40Ah
                dd 0B92E7646h, 9ADF40E1h, 0B79C5401h, 0FC9BFEDh, 0D5BD5D3Ch, 8D47C554h, 0FFB7F5B6h, 4BA4F128h, 507A9BEFh, 0C798A9D6h
                dd 0AF282400h, 0E9B1A7F0h, 4488049Ch, 5AEB1F04h, 21E0B1CBh, 7BEEE496h, 896463F8h, 281B2FE6h, 87D641BFh, 0F8FE49DCh
                dd 0F3F11AC4h, 0A6D3BA2Dh, 7FCD423Ah, 0A861986Ah, 0C4F2B310h, 85228C8Ah, 12C0BEB3h, 0DF2CD9D7h, 0B221255Eh, 413575C3h
                dd 6DE8B6D0h, 0A74CEB2h, 60308E51h, 8800387h, 4A3A26DBh, 0AC423EC6h, 91ED474h, 9C082B78h, 0FB94531Ah, 467CC9A9h
                dd 91D013F9h, 0DC46C311h, 0C92A8B91h, 158902D9h, 6779323Bh, 7ACF633h, 43C1B8F6h, 528E56DAh, 0C3BB0F7Ah, 0D6D747FAh
                dd 6F1C7BE5h, 0A9FF4F99h, 0A4277718h, 0E69D5244h, 0C0D115BCh, 92BA093Fh, 8648964Ch, 348CF94Bh, 2F52938Ch, 0D0002C63h
                dd 55C7EAB0h, 0C6067E25h, 6C766123h, 0CA409157h, 72157ABBh, 982B8DD4h, 0BC930719h, 0E320231Bh, 0A5B9A0EBh, 5C3C749Dh
                dd 0CD092D3Dh, 0B4F64EC7h, 4CED4D42h, 0CFFDE008h, 54593D43h, 2C38894Ah, 0D2F4E156h, 0BE67CA2Ch, 0B0D5E86Bh, 51E44C1Ch
                dd 0CE6337FBh, 70E1B78Eh, 0BD0DD0EAh, 19CFEDABh, 325B92D2h, 0DDD814E2h, 0BFF91DDFh, 5B75C8F7h, 8E2DDF92h, 5DA2A36Eh
                dd 8FB30861h, 0CC97FACEh, 0AB0B82ACh, 5583B06h, 99B55A27h, 2ECC447Fh, 1C729CF4h, 0EEF81B9Ah, 25C31767h, 228AAB0Dh
                dd 791A29A3h, 2985F815h, 0C56C64E3h, 69CB107Ch, 0E54A59h, 1417D52Ah, 4E198077h, 61AE59A2h, 0B3BFF2ADh, 0F9609E2Fh
                dd 4D739AB1h, 17B9DAAh, 8A0E793Eh, 74C21122h, 30AF5FE7h, 0D7499009h, 0D9FBB24Eh, 48CEEBEEh, 0D19EFB90h, 56ADF076h
                dd 2DA65EB9h, 49503C1Dh, 9EFCE64Dh, 16E3181Fh, 35122EB8h, 1E8651C1h, 0B60283F2h, 7D398F0Fh, 0F105D7F1h, 8B90AECDh
                dd 0A2F01C81h, 7CA758FCh, 81012A26h, 23147CFEh, 0FD433883h, 738BAD48h, 37E6E38Dh, 0AA95555Fh, 2737DA52h, 717F607Dh
                dd 425F6F05h, 88FAB40Bh, 0C225D889h, 10347386h, 946D62A6h, 9D96FC8Bh, 5F566E5Bh, 0DB0F7F7Bh, 0ED92015Ch, 77A80BE4h
                dd 809FFDD5h, 1B3B209Eh, 95F3B555h, 641328FDh, 0E4699F71h, 0EADBBD36h, 4C6ECF5h, 0FE292245h, 9324DECCh, 0A74D6DDEh
                dd 826B30E0h, 0F26FCD37h, 0AEB6F3F3h, 177DCFECh, 3A3EDB0Ch, 7A703365h, 0E82F7003h, 135E6940h, 0A19A0647h, 0F64C6B9Bh
                dd 6B3FDD49h, 5EC8B9A8h, 581FD231h, 635A9497h, 1F188632h, 755CC6D1h, 0D36A36A5h, 53108129h, 0D3D72D8h, 1DEC4B07h
                dd 84BC5B79h, 0E5F74882h, 3954C1CAh, 0E04A39DDh, 3CE9B095h, 0B14B3F98h, 0C14FC24Fh, 0DA91A888h, 211876Ch, 0E57681Eh
                dd 0F7D2BC68h, 3678347Eh, 0F4B8A6AEh, 9F6231BEh, 0EC0CD6AFh, 0FA0A84E9h, 0E2BEF4E8h, 0ADDCE935h, 6855C78Fh, 4F875784h
                dd 0B8B0A1B5h, 0A004D1B4h, 63221C0h, 1AA5F76Dh, 0FCDDEF70h, 0E1D4EE2Eh, 0B5689934h, 3F83AA53h, 598105C2h, 9B419712h
                dd 8CD912A7h, 7884FE50h, 2AEFE2D3h, 207E6638h, 38CA1639h, 0E70385B7h, 245DC094h, 83F5E713h, 3E1D7DA0h, 0DEB20E24h
                dd 0D4238ACFh, 66E7E5C8h, 0CA3A52Bh, 0BA446C80h, 11AAA475h, 3D776766h
dword_10082300  dd 132BA528h, 0C0F8D18Fh, 665E39C1h, 43CA13Bh, 0D4EC93D9h, 0FAC25A3Eh, 0C7FFD78Eh, 566E33FBh, 0CDF55605h, 0E4DC99E3h
                                        ; DATA XREF: sub_10001060+3EBr
                                        ; sub_10001060+431r ...
                dd 467E31E9h, 0B880CAECh, 0DDE55417h, 0C3FB97CAh, 1820E264h, 0BE860A2Ah, 8FB7C6D7h, 546CB379h, 655D7F84h, 0C1F91748h
                dd 9AA24246h, 0E7DFDFA6h, 0E3DB9FE2h, 370FED44h, 13927B8h, 0F8C0DABCh, 61593FC0h, 0BD854C6Fh, 85BD475Ch, 7D457C9Fh
                dd 0A890C8FEh, 0F7CFDDB4h, 63E21B9h, 6E5638C8h, 0DAE25216h, 8EB60010h, 0FFC7DCBDh, 251D6FD4h, 39012C8Bh, 320A6BC7h
                dd 7048FB15h, 0B38B8DA0h, 96AE030Bh, 0A1990F30h, 0D6EE135Bh, 95AD454Eh, 9DA54447h, 261E2991h, 635BBF42h, 80B8C1DFh
                dd 0AB938EBBh, 4E7630E0h, 0D7EFD59Ch, 0AE960838h, 0E2DA5925h, 0D3566F5h, 516935FAh, 0E8D0D8AEh, 576FF53Ch, 241CA913h
                dd 3D056CCFh, 4C74B062h, 5A6272B6h, 0F2CA5B37h, 6A52788Ch, 9FA7C4C5h, 1B23A421h, 0AC9488BAh, 97AFC5CCh, 6B53BE4Bh
                dd 0D9E11453h, 5D6574B7h, 71493DD2h, 0ECD498EAh, 7840FA1Ch, 0B58D4D66h, 0E6DE1961h, 0DCE492D0h, 0D2EA531Fh, 536BB578h
                dd 1D2564E7h, 830E076h, 0CBF396C3h, 2B13AE1Bh, 675FFF06h, 0B68E0B23h, 0CCF490C2h, 0A79FCFF6h, 7B43BC59h, 754D7D96h
                dd 0AA92487Ch, 8DB54655h, 2018E957h, 0E5DD5F24h, 0A3260F4h, 3800EA4Ch, 0F37E677h, 3E062A8Ah, 0F9C11C7Bh, 82BA415Dh
                dd 0B33A633h, 596134F3h, 112925AAh, 69513EC9h, 0CEF61040h, 2F17EE5Fh, 5068F33Dh, 360E2B83h, 0A49C89B3h, 0B088CBE5h
                dd 9CA48280h, 556D75BEh, 0F0C8DBB5h, 91A9050Ah, 7C44BA58h, 7A427A9Eh, 9EA60202h, 0AD954E7Dh, 3A026ACEh, 8AB24054h
                dd 0B28A4B67h, 340CAB01h, 8CB48092h, 0B48C8BA1h, 0FEC61A7Ah, 2E162898h, 734BBD50h, 0A69E0931h, 0E9D11E69h, 0C8F0D086h
                dd 0BF87CCEDh, 89B10611h, 0D0E8D39Dh, 0B78FCDE4h, 31092D82h, 0DFE7D495h, 744CBB51h, 271FEF56h, 5F67F435h, 0CAF25004h
                dd 0A29A4975h, 3C04AA08h, 0D5ED551Eh, 99A10403h, 447CB16Bh, 0FBC39CF9h, 5B63B471h, 0C4FC91CBh, 0CFF7D687h, 0B9810C2Bh
                dd 6D557E8Dh, 2D156EDDh, 724A7B97h, 1C24A220h, 350D6DC6h, 5860F234h, 90A8C3CDh, 88B0C0D6h, 437BB76Ah, 152D65EEh
                dd 192124A3h, 23A61FDh, 427A71ADh, 6850F80Eh, 457D77ACh, 526A73BFh, 0C34A032h, 0F3CB9DF0h, 93AB8588h, 0DBE394D1h
                dd 2810E85Eh, 0A39B8FB2h, 92AA434Fh, 79413CDBh, 2A1268DCh, 0C6FE1149h, 645CB943h, 221A69D5h, 0E0D8D9A7h, 84BC819Bh
                dd 0FCC49AF8h, 73FE77Eh, 0BA824A6Eh, 0C5FD570Ch, 1028E36Dh, 7F47FC1Dh, 6058F907h, 33BA73Ah, 330BAD00h, 0D1E9155Ah
                dd 4D7576A5h, 93126B1h, 0AF97CEFFh, 0A59D4F74h, 38E17Fh, 0EAD2582Ch, 98A0C2C4h, 81B90718h, 625A7985h, 0F5CD5D36h
                dd 3B03AC09h, 0A9910E39h, 122A63EFh, 5C64B270h, 4A7270A4h, 0F4CC9BF1h, 6F57FE0Fh, 8BB38693h, 7E463ADAh, 83BB879Ah
                dd 4F77F627h, 4078F12Fh, 1E2622A2h, 6C54B84Ah, 5E6632F2h, 1F27E465h, 0F1C91D72h, 497136E1h, 0BC848AA8h, 2C14A81Ah
                dd 231BAF12h, 21192F90h, 764E3BD3h, 53D67FCh, 0DEE61252h, 0C2FA510Dh, 0B1890D22h, 0EDD55E2Dh, 9BA38481h, 172FE56Ch
                dd 1A2262E6h, 86BE0119h, 0E3620B0h, 0A098C9F7h, 0C9F11641h, 142CA329h, 87BFC7DEh, 417937E8h, 4B73B663h, 0E1D91F60h
                dd 94AC8389h, 0BB838CA9h, 0FDC55C3Fh, 4870F026h, 0EFD7DEAFh, 0EED61868h, 3008EB45h, 774FFD14h, 0EBD39EEBh, 29112E99h
                dd 162E23ABh, 477FF72Eh, 0D8E0D294h, 3F07EC4Dh, 0D3EB95D8h, 0F6CE1B73h
byte_10082700   db 0A8h                 ; DATA XREF: sub_10001060+74Er
                                        ; sub_10001060+796r ...
byte_10082701   db 5Bh                  ; DATA XREF: sub_10001060+73Br
                                        ; sub_10001060+781r ...
byte_10082702   db 0FEh                 ; DATA XREF: sub_10001060+72Fr
                                        ; sub_10001060+777r ...
byte_10082703   db 75h, 0CCh, 88h, 2Fh, 4, 2Ch, 2Eh, 0EFh, 12h, 6Ah, 4Ch, 84h, 0BAh, 0F2h, 9Ch, 40h, 19h, 8Dh, 0B2h, 55h
                                        ; DATA XREF: sub_10001060+71Cr
                                        ; sub_10001060+76Br ...
                db 0A0h, 0B4h, 8Fh, 63h, 1Fh, 4Fh, 1Eh, 83h, 6Ch, 28h, 85h, 0ADh, 9Fh, 4Bh, 0ACh, 68h, 0E6h, 58h, 0Eh, 70h
                db 0AAh, 37h, 0F0h, 42h, 45h, 5, 95h, 3Dh, 2Bh, 41h, 8Bh, 33h, 0C8h, 7Bh, 50h, 0C5h, 0E3h, 99h, 0F6h, 0E2h
                db 6, 0Ah, 0C7h, 23h, 9Eh, 20h, 1Ch, 0DFh, 0DDh, 51h, 2Dh, 15h, 0D5h, 4Ah, 89h, 91h, 6Eh, 44h, 0D2h, 0D7h
                db 38h, 0BBh, 0AFh, 22h, 0FBh, 0Dh, 0ABh, 0E4h, 0DEh, 1Ah, 7Fh, 53h, 0E9h, 60h, 49h, 94h, 0B7h, 0EBh, 0B0h, 0AEh
                db 6Dh, 0DBh, 29h, 1Bh, 71h, 93h, 0F5h, 9Ah, 7Ah, 62h, 0CDh, 0A4h, 4Eh, 8Eh, 35h, 39h, 26h, 0DAh, 0E0h, 0FDh
                db 92h, 31h, 0BFh, 30h, 0C6h, 13h, 4Eh, 0E5h, 0CDh, 8Ch, 26h, 0D6h, 35h, 0Ch, 92h, 0C2h, 0E0h, 0B3h, 0C6h, 72h
                db 0BFh, 25h, 0B7h, 0D9h, 49h, 65h, 6Dh, 0B8h, 0B0h, 87h, 71h, 32h, 29h, 0F1h, 7Ah, 34h, 0F5h, 7Dh, 38h, 66h
                db 0D2h, 10h, 0FBh, 0B6h, 0AFh, 3Ah, 0DEh, 0EEh, 0ABh, 54h, 0E9h, 3Bh, 7Fh, 0Bh, 9Eh, 7Ch, 0C7h, 5Dh, 0DDh, 0FAh
                db 1Ch, 0D8h, 0D5h, 0FCh, 2Dh, 0C0h, 6Eh, 0C4h, 89h, 0F7h, 2Bh, 11h, 95h, 0C1h, 0C8h, 43h, 8Bh, 0A1h, 0E3h, 21h
                db 50h, 80h, 6, 59h, 0F6h, 79h, 9Fh, 76h, 85h, 97h, 0E6h, 47h, 0ACh, 98h, 0AAh, 0CAh, 0Eh, 0FFh, 45h, 0B1h
                db 0F0h, 17h, 19h, 0F8h, 9Ch, 82h, 0A0h, 0ECh, 0B2h, 3Ch, 1Fh, 1Dh, 8Fh, 6Fh, 6Ch, 0D4h, 1Eh, 9Dh, 75h, 67h
                db 5Bh, 0D1h, 4, 86h, 88h, 0EAh, 12h, 7Eh, 2Eh, 74h, 0BAh, 18h, 4Ch, 0B5h, 22h, 0AFh, 0B6h, 0, 0D7h, 0D2h
                db 66h, 0DCh, 53h, 7Fh, 3Bh, 0F3h, 0E4h, 0ABh, 0EEh, 78h, 0DFh, 1Ch, 0FAh, 3Fh, 23h, 0C7h, 7Ch, 0A7h, 91h, 89h
                db 0C4h, 0A6h, 15h, 2Dh, 0FCh, 5Eh, 39h, 35h, 0D6h, 0Fh, 0A4h, 0CDh, 0E5h, 0A3h, 30h, 0BFh, 72h, 61h, 0FDh, 0E0h
                db 0C2h, 9Bh, 0AEh, 0B0h, 0B8h, 0BEh, 94h, 49h, 0D9h, 90h, 9Ah, 0F5h, 34h, 77h, 1Bh, 29h, 32h, 0F9h, 55h, 0B2h
                db 0ECh, 0A5h, 40h, 9Ch, 0F8h, 96h, 83h, 1Eh, 0D4h, 8Ah, 63h, 8Fh, 1Dh, 52h, 2Fh, 88h, 86h, 0CEh, 0FEh, 5Bh
                db 67h, 0D3h, 84h, 4Ch, 18h, 5Fh, 0EFh, 2Eh, 7Eh, 81h, 33h, 8Bh, 43h, 5Ch, 3Dh, 95h, 11h, 46h, 0E2h, 0F6h
                db 59h, 0E8h, 0C5h, 50h, 21h, 3, 68h, 0ACh, 47h, 0A9h, 0ADh, 85h, 76h, 0CFh, 42h, 0F0h, 0B1h, 9, 70h, 0Eh
                db 0CAh, 7, 47h, 0E6h, 68h, 8, 76h, 9Fh, 0ADh, 36h, 0B1h, 45h, 42h, 0CBh, 0CAh, 0AAh, 70h, 16h, 43h, 0C8h
                db 33h, 57h, 11h, 2Bh, 3Dh, 56h, 59h, 6, 0E2h, 24h, 21h, 0E3h, 0C5h, 0F4h, 86h, 4, 2Fh, 64h, 67h, 75h
                db 0FEh, 0B9h, 18h, 0BAh, 84h, 1, 7Eh, 12h, 0EFh, 3Eh, 0ECh, 0A0h, 55h, 4Dh, 0F8h, 19h, 40h, 6Bh, 0D4h, 6Ch
                db 83h, 69h, 1Dh, 1Fh, 63h, 48h, 0B8h, 6Dh, 0AEh, 0A2h, 0D9h, 0B7h, 94h, 0E7h, 34h, 7Ah, 9Ah, 0EDh, 32h, 71h
                db 1Bh, 2Ah, 0D6h, 26h, 39h, 0BDh, 0E5h, 4Eh, 0A4h, 0D0h, 72h, 0C6h, 30h, 0C9h, 0C2h, 92h, 0FDh, 5Ah, 0FAh, 0DDh
                db 0DFh, 14h, 7Ch, 9Eh, 23h, 73h, 0C4h, 6Eh, 91h, 0E1h, 0FCh, 0D5h, 15h, 27h, 0B6h, 0FBh, 22h, 0C3h, 66h, 38h
                db 0D7h, 2, 3Bh, 0E9h, 53h, 0BCh, 0EEh, 0DEh, 0E4h, 0E3h, 0A1h, 24h, 7Bh, 6, 80h, 56h, 99h, 2Bh, 0F7h, 57h
                db 5, 0C8h, 0C1h, 16h, 41h, 0AAh, 98h, 0CBh, 58h, 45h, 0FFh, 36h, 37h, 9Fh, 79h, 8, 28h, 0E6h, 97h, 7
                db 4Bh, 1Fh, 3Ch, 69h, 0B4h, 6Ch, 6Fh, 6Bh, 4Fh, 19h, 17h, 4Dh, 0F2h, 0A0h, 82h, 3Eh, 8Dh, 12h, 0EAh, 1
                db 2Ch, 0BAh, 74h, 0B9h, 6Ah, 75h, 9Dh, 64h, 0A8h, 4, 0D1h, 0F4h, 0CCh, 92h, 0Ch, 0C9h, 0DAh, 0C6h, 0B3h, 0D0h
                db 31h, 4Eh, 13h, 0BDh, 62h, 26h, 8Ch, 2Ah, 8Eh, 71h, 87h, 0EDh, 0DBh, 7Ah, 0F1h, 0E7h, 93h, 0B7h, 25h, 0A2h
                db 60h, 6Dh, 65h, 48h, 0EBh, 0DEh, 3Ah, 0BCh, 0Dh, 0E9h, 54h, 2, 1Ah, 38h, 7Dh, 0C3h, 44h, 0FBh, 10h, 27h
                db 0BBh, 0D5h, 0D8h, 0E1h, 51h, 6Eh, 0C0h, 73h, 4Ah, 9Eh, 0Bh, 14h, 0Ah, 0DDh, 5Dh, 5Ah, 20h, 2Dh, 51h, 0A6h
                db 0D8h, 89h, 4Ah, 0A7h, 0C0h, 0C7h, 0Ah, 3Fh, 0Bh, 1Ch, 20h, 78h, 5Dh, 0ABh, 0Dh, 0F3h, 3Ah, 7Fh, 1Ah, 0DCh
                db 54h, 0D2h, 44h, 0, 7Dh, 0AFh, 0BBh, 0B5h, 10h, 29h, 0DBh, 77h, 87h, 0F5h, 93h, 90h, 0F1h, 49h, 60h, 0BEh
                db 25h, 0B0h, 0EBh, 9Bh, 65h, 0E0h, 0DAh, 61h, 0Ch, 0BFh, 31h, 0A3h, 0B3h, 0CDh, 62h, 0Fh, 13h, 35h, 8Eh, 5Eh
                db 8Ch, 2Eh, 2Ch, 5Fh, 0EAh, 4Ch, 6Ah, 0D3h, 74h, 5Bh, 0A8h, 0CEh, 9Dh, 88h, 0CCh, 52h, 0D1h, 8Fh, 0B4h, 8Ah
                db 3Ch, 1Eh, 4Fh, 96h, 6Fh, 9Ch, 0F2h, 0A5h, 17h, 0B2h, 8Dh, 0F9h, 82h, 0Eh, 58h, 9, 98h, 0F0h, 37h, 0CFh
                db 0FFh, 85h, 28h, 0A9h, 79h, 0ACh, 4Bh, 3, 97h, 50h, 7Bh, 0E8h, 0A1h, 0F6h, 99h, 46h, 80h, 95h, 5, 5Ch
                db 0F7h, 8Bh, 41h, 81h, 0C1h, 34h, 0E7h, 0F1h, 90h, 32h, 0EDh, 87h, 77h, 0B8h, 48h, 65h, 9Bh, 0D9h, 0A2h, 25h
                db 0BEh, 72h, 0D0h, 0B3h, 0A3h, 0C2h, 0C9h, 0Ch, 61h, 0D6h, 2Ah, 8Ch, 5Eh, 0E5h, 0BDh, 13h, 0Fh, 0C4h, 73h, 0C0h
                db 0A7h, 0FCh, 0E1h, 0D8h, 0A6h, 0FAh, 5Ah, 5Dh, 78h, 7Ch, 14h, 0Bh, 3Fh, 3Bh, 2, 54h, 0DCh, 0EEh, 0BCh, 3Ah
                db 0F3h, 0B6h, 27h, 10h, 0B5h, 66h, 0C3h, 7Dh, 0, 0B1h, 36h, 0FFh, 0CFh, 0CAh, 0CBh, 98h, 9, 47h, 7, 97h
                db 3, 76h, 8, 79h, 0A9h, 59h, 56h, 80h, 46h, 21h, 24h, 0A1h, 0E8h, 43h, 16h, 0C1h, 81h, 11h, 57h, 0F7h
                db 5Ch, 18h, 0B9h, 74h, 0D3h, 7Eh, 1, 0EAh, 5Fh, 86h, 0F4h, 0D1h, 52h, 67h, 64h, 9Dh, 0CEh, 0D4h, 6Bh, 6Fh
                db 96h, 1Dh, 69h, 3Ch, 8Ah, 0ECh, 3Eh, 82h, 0F9h, 0F8h, 4Dh, 17h, 0A5h, 83h, 96h, 4Fh, 6Bh, 63h, 8Ah, 0B4h
                db 69h, 55h, 0F9h, 8Dh, 3Eh, 40h, 0A5h, 0F2h, 4Dh, 84h, 0D3h, 6Ah, 0B9h, 0EFh, 5Fh, 2Ch, 1, 2Fh, 52h, 0CCh
                db 0F4h, 0FEh, 0CEh, 0A8h, 64h, 0E2h, 46h, 99h, 56h, 0C5h, 0E8h, 7Bh, 24h, 33h, 81h, 41h, 16h, 3Dh, 5Ch, 5
                db 57h, 42h, 0CFh, 37h, 36h, 70h, 9, 58h, 0CBh, 68h, 3, 4Bh, 7, 0ADh, 0A9h, 28h, 8, 53h, 0DCh, 1Ah
                db 2, 0E4h, 0F3h, 0Dh, 0BCh, 22h, 0B5h, 0BBh, 27h, 0D7h, 0, 44h, 0C3h, 91h, 0A7h, 4Ah, 73h, 15h, 0A6h, 51h
                db 0E1h, 0DFh, 78h, 20h, 5Ah, 23h, 3Fh, 0Ah, 14h, 30h, 0A3h, 31h, 0D0h, 0FDh, 61h, 0DAh, 0C9h, 39h, 5Eh, 8Eh
                db 2Ah, 0A4h, 0Fh, 62h, 0BDh, 9Ah, 90h, 93h, 0E7h, 1Bh, 77h, 0DBh, 0EDh, 0AEh, 9Bh, 0EBh, 48h, 94h, 0BEh, 60h
                db 0A2h
dword_10082B00  dd 0C47EA143h, 0AF622211h, 0F28ED5E5h, 36E1D257h, 81380778h, 620C7BBEh, 0E325DA37h, 59008675h, 3EE6C91Bh, 816BDBDh
                                        ; DATA XREF: sub_10001C50+25Dr
                                        ; sub_10001C50+28Dr ...
                dd 55FA4A49h, 6B0D25A3h, 7E5BFD01h, 2CE412FEh, 7809BB17h, 0B99D2E84h, 2BE3797h, 0EA24842Ah, 38B48F0Dh, 0AE646740h
                dd 3C49587Dh, 4451459Bh, 765CE64Dh, 60A3EAD8h, 0F0214483h, 0BFCF6892h, 0A9306407h, 0C578E412h, 0F77547C4h, 54FC0F18h
                dd 0D281ADD6h, 745A5B6h, 0BBF698Ah, 876A416Eh, 0DCD4F08Ch, 53A80C5Fh, 0B19A35C8h, 73A7746Ch, 0A6637C0Ch, 25E54CE3h
                dd 0B233E1FFh, 0CB2DB948h, 866C043Fh, 0CEB6ACDh, 0E98D501Dh, 0CD7FFF5Eh, 264C98D4h, 75F5327Ah, 88395965h, 775AA31Ch
                dd 8397961Eh, 933ADC9Dh, 5E548532h, 0ED70876Dh, 4203038Dh, 0C7D77574h, 9A3B8280h, 0AB9FF561h, 9FC010A1h, 1D40651Fh
                dd 46FED4FDh, 274ADD85h, 19BDB26Fh, 8A96C803h, 0E7D80D47h, 1B122309h, 0BA34FAB3h, 0D77A3FF7h, 0A0313A1Ah, 3B1D5B3Ah
                dd 48AB89A7h, 2F4DC6C9h, 30B39441h, 5806C324h, 0A1377F4Bh, 5001D868h, 2DE257AFh, 10BCEC72h, 0BB32BFE2h, 0FCDB88BFh
                dd 68A4F194h, 4D501B86h, 946EDFDAh, 0DE7B61EAh, 0A4CCED6Ah, 0F42BEFAh, 0F38890B4h, 0D5D5AE91h, 9C69C496h, 790FFE46h
                dd 0F12701D2h, 18BBF73Eh, 0CA2BFC19h, 0E5779C21h, 0DF7D24BBh, 4FFF8AE0h, 1FEFF479h, 0B335A4AEh, 5CFB1454h, 8CC48E15h
                dd 803E4229h, 0A8362156h, 0ADCDB377h, 8F6D5A22h, 0AB92CDBh, 96C14EBCh, 0FE7419D9h, 4EF9CFB1h, 52AE490Eh, 0BEC92DC3h
                dd 4B025D90h, 5F52C063h, 0DA86B69Ah, 0C982282Eh, 0E6DE4816h, 4EC7181h, 0B7C873DEh, 0E2239F66h, 39B2CA5Ch, 0C32AA204h
                dd 909308AAh, 9EC655F0h, 655878F9h, 1A146658h, 0CFD06E38h, 56539E7Eh, 95689A8Bh, 0F6730295h, 344E4331h, 2AB654E8h
                dd 35480660h, 97C70BEDh, 923C99CCh, 430546DCh, 893F1C34h, 0C22CE755h, 643E0E7h, 0ACCBF626h, 1C46204Eh, 0C6D13025h
                dd 0EFDF160Bh, 31B5D110h, 291F80DFh, 6FF0F2D3h, 201EDEC2h, 51079D39h, 321C0527h, 0E471D970h, 3B872C6h, 0C8846D7Fh
                dd 0E44FBABh, 40AC92EBh, 22B14FA4h, 66F1ACCEh, 6EF6B782h, 14413B02h, 0B6CE368Fh, 41AAD7BAh, 24E309B2h, 61A5AF89h
                dd 7DF22936h, 0B461A7E9h, 8B908D52h, 23B70AF5h, 0FA89CEA9h, 0A765395Dh, 11A6F1h, 91954DFBh, 3A1B1E6Bh, 0DDD2B5DDh
                dd 910F8ECh, 0D4D3EBC0h, 0CC79BA0Fh, 630A3EEFh, 999256B7h, 5DFD5105h, 0F9201A9Eh, 2BB011B9h, 7AA62A71h, 0CED62B69h
                dd 74F3772Bh, 72A1313Dh, 0A29EAB7Ch, 0C0837633h, 0FDDDCDEEh, 16EEAA64h, 3FE08C4Ah, 0FF725C88h, 0DB80F3CBh, 4C565ED7h
                dd 0AA99B030h, 0A398EE2Dh, 0D387E887h, 0E08C0E00h, 2E4B8398h, 0D82927FCh, 37E79706h, 0D12879E1h, 0B09C7099h, 85C5D008h
                dd 47F891ACh, 7CF46C67h, 0EED9535Ah, 7BA06F20h, 9D6F81C7h, 8291D34Fh, 0F8265FCFh, 6C5926E4h, 0B567E2B8h, 12137D14h
                dd 69A2B4C5h, 9B3DC7D1h, 0F4DC93F3h, 0BD60F9F4h, 0FB8F8BF8h, 645E3DA8h, 5EA34D0h, 0DED2F9Ch, 0BC66BCA5h, 700EA05Bh
                dd 0D02E3CB0h, 67F7E99Fh, 1EE9B128h, 0C1853362h, 455700CAh, 0E18A4B51h, 6D5F63B5h, 8DC2CB44h, 7108E50Ah, 2819C58Eh
                dd 0D67C7AA6h, 0EC76C23Ch, 331A4076h, 5AA95242h, 11BAA923h, 15477E53h, 0A5CAA83Bh, 17E8EF35h, 5755DB2Fh, 0B89B6BD5h
                dd 0F5DAD6A2h, 3D4F1D2Ch, 0EB22C17Bh, 989413E6h, 0D92F62ADh, 8E6B1F73h, 6A0B60F2h, 7F5DB850h, 4A0418C1h, 5BAF1713h
                dd 0E88B154Ch, 13153845h, 117E3A0h, 49ADCCF6h, 84C39559h, 21189B93h
dword_10082F00  dd 0F7B984D5h, 8FDBE349h, 0CF38890Dh, 42EEE1BDh, 0FFDAFBFDh, 98BE3611h, 64375B1Ch, 34AAA808h, 35396F0h, 0D903415Ch
                                        ; DATA XREF: sub_10001C50+269r
                                        ; sub_10001C50+2A3r ...
                dd 0F2792DCFh, 0CDE36C1Fh, 0D66EEBh, 8B511C3h, 5BAD1ACCh, 0FB444FEEh, 0F0A2C8DDh, 0A5FF92D3h, 22916059h, 6E8FC126h
                dd 65694615h, 0E699008Ch, 45F5ADB5h, 5E6DB3D6h, 0B4DF168Ah, 0B041A299h, 0DA86B947h, 0E8BF2EA5h, 15685EA1h, 0FE84E6F4h
                dd 1C553C80h, 843D647Ah, 30341C1Bh, 85637973h, 372F5013h, 18873E2h, 8A1B4A53h, 0D4A0976Eh, 0ED7F87BFh, 448DAF8h
                dd 24D43158h, 0EEFA7FA4h, 4CC8CF94h, 20D8BF9h, 2BAC0278h, 7CD22E3h, 7B31F16Ch, 9D7E9F0Bh, 39097E3Ah, 5F33AEDFh
                dd 8D00065Bh, 11F6EAB2h, 416B19A6h, 1D0B2189h, 0C97DD80Ch, 4BD3839Ch, 66ECBE0Eh, 9206AC2Bh, 4D96D29Dh, 5828E2D7h
                dd 7449C24Ch, 0FA1A52E7h, 0E359A996h, 0BE678CB0h, 1B4E7088h, 516C7F1h, 0DD9DF54Fh, 5AF307C5h, 4908668Eh, 0BBA725AAh
                dd 0C3C54236h, 7A6FEC65h, 5CB656C4h, 899EB248h, 9EFB6710h, 0E207B49Fh, 91835430h, 0ACC2F0F2h, 0D3BBDB66h, 558B34E5h
                dd 0A90259E8h, 0D75B8D9h, 7692275Eh, 0F6E799DCh, 7C2ABD64h, 0C823C505h, 0A03F3BC9h, 8B45575Ah, 6C542434h, 0FAE5DCBh
                dd 0C2BA5D0h, 0A16126C0h, 467055AEh, 62720A1Dh, 0E1824C84h, 35F4B501h, 204A854Bh, 0D03E237Dh, 3BD29B28h, 0CCBD7116h
                dd 0D2E5C66Fh, 6D0A393Dh, 0ABD9BCFAh, 3F4C2F3Bh, 54D529ECh, 48567B87h, 0D7256F75h, 0B822DDB1h, 3A8C8621h, 0EF040C2h
                dd 36714D1Ah, 132D0FA0h, 0F99FAAFCh, 17B3BBB3h, 4E132A86h, 6933FEAh, 0CAF82017h, 43B0FCB4h, 73528E44h, 0B75AEE91h
                dd 127312A9h, 88C0AF41h, 529078EDh, 8278357Bh, 67B2A307h, 7FAF457Fh, 951DE023h, 6A117535h, 9FA57A19h, 2CB74E70h
                dd 71896B56h, 8C5E1B52h, 0DE180D54h, 0FC5F03E6h, 0AD9CEDFBh, 632C1714h, 0BCBC69A2h, 61F7F206h, 0F43C7CCEh, 69948D2Eh
                dd 2F32B66Bh, 3E123232h, 403504AFh, 4A8D9E95h, 99E02B18h, 32EFF909h, 23CF7D50h, 0BDE274ABh, 9B3BCE0Ah, 21149842h
                dd 2E6CAB62h, 0F56261C7h, 79EA147Eh, 0EC219AB6h, 0A2E4DEDBh, 143643A8h, 5DE84BCDh, 1995959Ah, 6B4F683Ch, 3D97CA29h
                dd 0C29B5F3Fh, 0CE669404h, 96981838h, 0EFA462ADh, 0A72477C1h, 5976FFDEh, 6FD1DC2Fh, 10A8F7BBh, 0BAF938A3h, 0B11FBF90h
                dd 1FD0C49Bh, 7D74A06Dh, 1E8ED992h, 0D1603E74h, 0F32730C6h, 0AA87A1F3h, 0DBD8A44Eh, 0DCC3E846h, 38576333h, 504B9DFFh
                dd 0C11EA724h, 18CB8893h, 0B3C45A82h, 0DF46105Dh, 258A2C51h, 511580F6h, 0B30E9D8h, 9443FD2Ah, 560ECCFEh, 0EA64CBB7h
                dd 68CA9027h, 0B97CC0B8h, 0E442E59Eh, 2DE95379h, 0E51CF897h, 260FD44Ah, 3CC9D720h, 4F4D378Fh, 0CBA63D1Eh, 0A4A18FDAh
                dd 5750D1F7h, 0C4DE0E3Eh, 81FDCD60h, 0A67A6AC8h, 53CE65E4h, 0BF3991B9h, 0A3BAC3D2h, 2751C943h, 0D85D5C55h, 0EB3AD6BEh
                dd 44ABB0BCh, 0D67B727Ch, 60A9EF0Fh, 0B604F398h, 0AE1915E0h, 0AF4708E9h, 86E68168h, 16EDA6BAh, 0E0DC518Dh, 90DD4939h
                dd 97C60531h, 0C5801337h, 0B5810B83h, 0A85C44E1h, 0FD011EEFh, 7517DF45h, 0E7C71D85h, 70D7765Fh, 83262872h, 0E9E133ACh
                dd 0C605EB2Ch, 2977E76Ah, 80A3D069h, 78B40977h, 0F1FCD5D4h, 7EF15876h, 33B1E400h, 0A6EF4D1h, 1A106D81h, 9EB0CCAh
                dd 0C75BF625h, 87B89C61h, 77CC3A57h, 0C040BA2Dh, 9C208202h, 0F8C1B7F5h, 9358B122h, 0D5FE8A67h, 316A0112h, 2829FA63h
                dd 472E48A7h, 2AF21F71h, 0B29A478Bh, 8E85FE40h, 9A65D303h, 720C934Dh
byte_10083300   db 0A1h                 ; DATA XREF: sub_10001C50+5C4r
                                        ; sub_10001C50+658r ...
byte_10083301   db 7Eh                  ; DATA XREF: sub_10001C50+5B4r
                                        ; sub_10001C50+643r ...
byte_10083302   db 7Ah                  ; DATA XREF: sub_10001C50+5AAr
                                        ; sub_10001C50+63Cr ...
byte_10083303   db 0EEh, 0B3h, 98h, 0DCh, 0Fh, 0BFh, 48h, 6Eh, 82h, 53h, 28h, 70h, 1, 5, 0F7h, 0E4h, 0D2h, 21h, 0DEh, 89h
                                        ; DATA XREF: sub_10001C50+590r
                                        ; sub_10001C50+62Dr ...
                db 0F0h, 0B4h, 59h, 9, 0E5h, 1Dh, 2 dup(88h), 0CFh, 2 dup(58h), 28h, 0C7h, 33h, 73h, 3Ch, 36h, 0E0h, 0ADh, 8Eh, 98h, 39h
                db 4Ah, 0C2h, 0ACh, 0BAh, 0B9h, 0FBh, 0A2h, 0E4h, 0D0h, 6, 9Eh, 26h, 1Dh, 0FFh, 0D1h, 0DAh, 72h, 0ACh, 0EFh, 0Fh
                db 30h, 3Eh, 0B6h, 36h, 0C6h, 42h, 0EAh, 4Ch, 1Ah, 2Ch, 7Bh, 0FCh, 0BAh, 0CFh, 0F7h, 3Ch, 54h, 72h, 0AEh, 0B6h
                db 2, 0E9h, 2, 86h, 12h, 0A3h, 59h, 9Eh, 0B0h, 0D3h, 0A7h, 0F4h, 45h, 34h, 6, 4Eh, 40h, 0A8h, 3Bh, 1Bh
                db 67h, 0D8h, 53h, 90h, 0A3h, 69h, 2Dh, 0BEh, 0CEh, 23h, 73h, 0FFh, 21h, 9Dh, 99h, 35h, 96h, 0Ah, 4, 52h
                db 0D5h, 73h, 56h, 5Dh, 4Fh, 75h, 0F2h, 0, 0A5h, 0E0h, 1Dh, 0A4h, 38h, 56h, 0AAh, 84h, 6Ah, 8Ah, 0E9h, 0EFh
                db 3Ah, 0F4h, 79h, 0BBh, 7, 0EEh, 7Ch, 0A7h, 6Fh, 97h, 5Bh, 0FEh, 11h, 4Dh, 9Fh, 32h, 92h, 0BDh, 68h, 8Bh
                db 3Eh, 35h, 3Eh, 4Ah, 65h, 0F3h, 2Eh, 71h, 9Bh, 62h, 8Ch, 51h, 8Ah, 0Bh, 0Ch, 0FBh, 0D6h, 31h, 0FAh, 46h
                db 47h, 4, 26h, 47h, 0CBh, 0EAh, 86h, 6Ah, 9Eh, 0AFh, 85h, 0C2h, 0A2h, 0B0h, 0ECh, 15h, 0EDh, 0BEh, 21h, 8Dh
                db 0D3h, 0CAh, 4Eh, 75h, 0FBh, 9Fh, 64h, 7Fh, 0Ah, 55h, 4Fh, 0ADh, 0A4h, 0EDh, 91h, 4Dh, 90h, 33h, 76h, 0D0h
                db 0EEh, 81h, 0CBh, 0ABh, 0CCh, 82h, 0E2h, 23h, 0D9h, 0CCh, 65h, 0B7h, 0F3h, 5, 0B4h, 40h, 0D2h, 0B3h, 42h, 6
                db 33h, 17h, 0A4h, 96h, 0BEh, 5Bh, 74h, 0CEh, 3Dh, 0F5h, 14h, 77h, 0BCh, 57h, 5Ch, 83h, 27h, 1, 0D4h, 63h
                db 86h, 0E5h, 0Bh, 0D1h, 0F6h, 47h, 9Ah, 0AEh, 17h, 93h, 58h, 1, 6Bh, 65h, 62h, 5Eh, 9Ah, 0EFh, 83h, 55h
                db 79h, 4Fh, 6Dh, 31h, 0C8h, 74h, 89h, 2Fh, 76h, 9Bh, 1Ch, 7Dh, 26h, 80h, 0E3h, 0C5h, 5Fh, 0C3h, 3Fh, 0E9h
                db 0FDh, 15h, 87h, 0C8h, 61h, 10h, 9Dh, 0A2h, 3Ch, 0F6h, 24h, 91h, 8Dh, 32h, 0FEh, 0C3h, 0DCh, 8Bh, 0EBh, 2Eh
                db 0B1h, 0A2h, 0E8h, 1Ah, 2 dup(0DDh), 6Ch, 1Eh, 5Ch, 0Ch, 0A5h, 9Fh, 89h, 0CDh, 7Eh, 42h, 2Fh, 2Bh, 0DAh, 0F6h, 25h
                db 7Dh, 9Ch, 98h, 3Bh, 1Dh, 32h, 3Dh, 53h, 85h, 0D9h, 76h, 0AEh, 0ECh, 0C6h, 56h, 0F9h, 27h, 0A3h, 0A6h, 0AAh
                db 48h, 0D7h, 9Ch, 69h, 26h, 3Ch, 0DCh, 7Dh, 0Dh, 0F6h, 0F3h, 97h, 1Fh, 5Ah, 0C6h, 0DBh, 0F8h, 84h, 99h, 0
                db 5Fh, 55h, 5Bh, 0CAh, 0AEh, 41h, 19h, 66h, 0C5h, 0ABh, 3Eh, 0B8h, 0F1h, 0E7h, 73h, 0E5h, 0F7h, 6Fh, 0DEh, 0FAh
                db 0CBh, 92h, 0E5h, 9Fh, 86h, 0C5h, 0CDh, 0EBh, 0B8h, 96h, 7Bh, 42h, 66h, 0B5h, 0ACh, 0E6h, 87h, 13h, 80h, 0A0h
                db 68h, 19h, 0E8h, 0Eh, 0EBh, 7, 0C7h, 0D7h, 99h, 0E0h, 0F1h, 0D4h, 0BBh, 8Dh, 72h, 50h, 0A6h, 0E1h, 87h, 99h
                db 8Ch, 60h, 50h, 0BBh, 52h, 0C1h, 0DFh, 0A1h, 6Fh, 5Dh, 9Bh, 18h, 44h, 0, 0CAh, 0C2h, 3Ah, 0B1h, 0F9h, 0B5h
                db 0F0h, 0F4h, 0C9h, 20h, 1Ah, 4Ah, 37h, 0DFh, 3Fh, 1Ah, 0E7h, 3, 6Dh, 63h, 27h, 64h, 83h, 2Bh, 0B9h, 5Eh
                db 0DFh, 57h, 43h, 0BFh, 9Eh, 0A6h, 4, 51h, 12h, 45h, 0A9h, 60h, 6Bh, 80h, 68h, 0E8h, 0C7h, 1Bh, 30h, 37h
                db 0CEh, 0BAh, 0BDh, 0A6h, 30h, 0CAh, 5Fh, 0A7h, 2Ah, 0A8h, 61h, 3Fh, 2, 54h, 2Ch, 0D8h, 39h, 34h, 10h, 70h
                db 94h, 6Ah, 16h, 1Fh, 0D9h, 6Eh, 22h, 0FFh, 0FEh, 0B7h, 49h, 0C7h, 0BCh, 0D6h, 0B8h, 0CDh, 7Eh, 0BDh, 6Bh, 91h
                db 60h, 3Ah, 41h, 5, 95h, 93h, 5Ch, 62h, 16h, 8Bh, 7Eh, 19h, 20h, 0AFh, 0Ch, 24h, 0Fh, 31h, 8Fh, 7Ch
                db 67h, 0DDh, 60h, 0F2h, 4Bh, 2Fh, 81h, 0B4h, 9Ch, 3Dh, 8Ah, 16h, 0, 0BBh, 0D8h, 36h, 0D0h, 0DCh, 0FDh, 0EFh
                db 2Eh, 30h, 17h, 0B2h, 1Eh, 71h, 0DDh, 15h, 2Dh, 95h, 0A3h, 4Ch, 7Ch, 1Eh, 88h, 5Dh, 38h, 7Ah, 0B5h, 9
                db 0B7h, 0C0h, 0D7h, 0F8h, 5Ah, 8, 29h, 0C3h, 0D7h, 10h, 20h, 80h, 8Fh, 0B2h, 8Ch, 39h, 4Eh, 38h, 0F5h, 0F4h
                db 0E3h, 0C2h, 79h, 0F5h, 0A4h, 72h, 38h, 0E3h, 5Eh, 81h, 64h, 49h, 0C0h, 0B8h, 0A8h, 0FEh, 0B2h, 0C8h, 8, 4Eh
                db 0B9h, 0C9h, 82h, 0BDh, 0E6h, 0DFh, 74h, 84h, 49h, 75h, 0A0h, 34h, 36h, 0C4h, 2, 2Ch, 84h, 0FFh, 0E6h, 8Eh
                db 64h, 0BCh, 0B0h, 4, 90h, 5, 0D5h, 0A9h, 76h, 29h, 11h, 22h, 45h, 70h, 0F7h, 46h, 2Fh, 61h, 0F2h, 0FCh
                db 0Eh, 35h, 24h, 87h, 22h, 2Ah, 67h, 0E0h, 9Ah, 0Ah, 7Ch, 0Ch, 0C8h, 0D3h, 93h, 4Dh, 0D6h, 8Eh, 0FAh, 0Dh
                db 7Fh, 18h, 9Ah, 0E1h, 11h, 40h, 0CCh, 13h, 0A5h, 0CEh, 2Ah, 1, 78h, 88h, 0EBh, 6, 0F9h, 0ADh, 3Ah, 0AFh
                db 0FDh, 39h, 45h, 0B7h, 0C9h, 5Eh, 6Ch, 93h, 24h, 25h, 1Fh, 52h, 21h, 23h, 0F8h, 8Bh, 14h, 0C3h, 2 dup(0EAh), 3Bh
                db 0FBh, 0C1h, 81h, 7Bh, 0F1h, 0AFh, 94h, 41h, 9Bh, 0C0h, 68h, 0B1h, 3, 0Bh, 8, 91h, 0E4h, 62h, 56h, 0DAh
                db 4Ch, 0AAh, 29h, 19h, 2Ch, 70h, 78h, 40h, 1Fh, 9, 0E2h, 5Ch, 67h, 13h, 6Dh, 8, 46h, 6Dh, 85h, 63h
                db 0F3h, 0B1h, 55h, 43h, 4Bh, 7, 4Bh, 0E7h, 0BFh, 92h, 7Bh, 0BAh, 0A1h, 0Dh, 0F1h, 0A0h, 0D0h, 0E3h, 0B6h, 0A1h
                db 0DBh, 0D6h, 95h, 1Ch, 20h, 0ECh, 0Bh, 0B6h, 8Fh, 85h, 82h, 96h, 0EDh, 14h, 0Fh, 0ADh, 5Fh, 0D2h, 1Bh, 6Ch
                db 0F9h, 5Ah, 0DAh, 0D5h, 0Dh, 0D4h, 0ABh, 0AAh, 7Dh, 0Ah, 8Ch, 4Ah, 48h, 0B2h, 2Bh, 98h, 12h, 78h, 0E9h, 92h
                db 52h, 2Dh, 57h, 6Ah, 0D8h, 59h, 7Fh, 0F2h, 28h, 57h, 0C1h, 25h, 0B3h, 48h, 6Ch, 8Dh, 0F8h, 12h, 32h, 29h
                db 78h, 0BCh, 5Ah, 71h, 16h, 0F0h, 0C9h, 0E1h, 11h, 54h, 1Eh, 0A7h, 0CCh, 0E2h, 0C0h, 50h, 94h, 2Bh, 35h, 0C4h
                db 90h, 65h, 75h, 4Ch, 4Dh, 66h, 43h, 37h, 0A0h, 6Fh, 0A8h, 0FAh, 0FCh, 0EEh, 0ACh, 53h, 9, 6Eh, 71h, 0C6h
                db 49h, 3, 9Ch, 0E2h, 7Fh, 97h, 44h, 0B4h, 0Eh, 89h, 2Ah, 58h, 66h, 3Bh, 2Dh, 54h, 0F5h, 9Dh, 0F0h, 46h
                db 22h, 4Bh, 0E4h, 3Dh, 6Bh, 18h, 14h, 0C1h, 43h, 0E1h, 8Fh, 3, 0FDh, 1Ch, 0C4h, 5Dh, 50h, 25h, 41h, 0DEh
                db 97h, 69h, 74h, 7, 0B0h, 0DBh, 2Eh, 0D4h, 17h, 0CFh, 6Eh, 0BFh, 0D5h, 34h, 0D1h, 79h, 0BEh, 44h, 63h, 61h
                db 33h, 0Eh, 0C5h, 51h, 27h, 95h, 31h, 0DBh, 0E6h, 28h, 0ECh, 1Bh, 0CDh, 0CBh, 0E7h, 0ABh, 8Ah, 0A5h, 1Ch, 0D1h
                db 0A9h, 0D9h, 0B3h, 0E8h, 37h, 94h, 0CFh, 0B5h, 0B9h, 0EDh, 77h, 0D2h, 69h, 7Ah, 83h, 18h, 77h, 0C4h, 9Dh, 59h
                db 47h, 8Eh, 10h, 77h, 15h, 3Fh, 23h, 0FCh, 44h, 4Fh, 5Bh, 0A9h, 0DEh, 0D3h, 7Ah, 13h, 51h
byte_10083700   db 0, 80h, 8, 88h, 1, 81h, 9, 89h, 40h, 0C0h, 48h, 0C8h, 41h, 0C1h, 49h, 0C9h, 4, 84h, 0Ch, 8Ch
                                        ; DATA XREF: sub_10001C50+5E2r
                                        ; sub_10001C50+5F4r ...
                db 5, 85h, 0Dh, 8Dh, 44h, 0C4h, 4Ch, 0CCh, 45h, 0C5h, 4Dh, 0CDh, 20h, 0A0h, 28h, 0A8h, 21h, 0A1h, 29h, 0A9h
                db 60h, 0E0h, 68h, 0E8h, 61h, 0E1h, 69h, 0E9h, 24h, 0A4h, 2Ch, 0ACh, 25h, 0A5h, 2Dh, 0ADh, 64h, 0E4h, 6Ch, 0ECh
                db 65h, 0E5h, 6Dh, 0EDh, 2, 82h, 0Ah, 8Ah, 3, 83h, 0Bh, 8Bh, 42h, 0C2h, 4Ah, 0CAh, 43h, 0C3h, 4Bh, 0CBh
                db 6, 86h, 0Eh, 8Eh, 7, 87h, 0Fh, 8Fh, 46h, 0C6h, 4Eh, 0CEh, 47h, 0C7h, 4Fh, 0CFh, 22h, 0A2h, 2Ah, 0AAh
                db 23h, 0A3h, 2Bh, 0ABh, 62h, 0E2h, 6Ah, 0EAh, 63h, 0E3h, 6Bh, 0EBh, 26h, 0A6h, 2Eh, 0AEh, 27h, 0A7h, 2Fh, 0AFh
                db 66h, 0E6h, 6Eh, 0EEh, 67h, 0E7h, 6Fh, 0EFh, 10h, 90h, 18h, 98h, 11h, 91h, 19h, 99h, 50h, 0D0h, 58h, 0D8h
                db 51h, 0D1h, 59h, 0D9h, 14h, 94h, 1Ch, 9Ch, 15h, 95h, 1Dh, 9Dh, 54h, 0D4h, 5Ch, 0DCh, 55h, 0D5h, 5Dh, 0DDh
                db 30h, 0B0h, 38h, 0B8h, 31h, 0B1h, 39h, 0B9h, 70h, 0F0h, 78h, 0F8h, 71h, 0F1h, 79h, 0F9h, 34h, 0B4h, 3Ch, 0BCh
                db 35h, 0B5h, 3Dh, 0BDh, 74h, 0F4h, 7Ch, 0FCh, 75h, 0F5h, 7Dh, 0FDh, 12h, 92h, 1Ah, 9Ah, 13h, 93h, 1Bh, 9Bh
                db 52h, 0D2h, 5Ah, 0DAh, 53h, 0D3h, 5Bh, 0DBh, 16h, 96h, 1Eh, 9Eh, 17h, 97h, 1Fh, 9Fh, 56h, 0D6h, 5Eh, 0DEh
                db 57h, 0D7h, 5Fh, 0DFh, 32h, 0B2h, 3Ah, 0BAh, 33h, 0B3h, 3Bh, 0BBh, 72h, 0F2h, 7Ah, 0FAh, 73h, 0F3h, 7Bh, 0FBh
                db 36h, 0B6h, 3Eh, 0BEh, 37h, 0B7h, 3Fh, 0BFh, 76h, 0F6h, 7Eh, 0FEh, 77h, 0F7h, 7Fh, 0FFh
dword_10083800  dd 0A22AC60Ah, 5FE1FD06h, 2800CCA2h, 0D5CBF7AEh, 0E43CC058h, 19F7FB54h, 6E16CAF0h, 93DDF1FCh, 5B143E3Dh, 0A6DF0531h
                                        ; DATA XREF: sub_10001C50+7Ar
                                        ; sub_10001C50+B6r ...
                dd 0D13E3495h, 2CF50F99h, 1D02386Fh, 0E0C90363h, 972832C7h, 6AE309CBh, 909AF6A8h, 6D51CDA4h, 1AB0FC00h, 0E77BC70Ch
                dd 0D68CF0FAh, 2B47CBF6h, 5CA6FA52h, 0A16DC15Eh, 69A40E9Fh, 946F3593h, 0E38E0437h, 1E453F3Bh, 2FB208CDh, 0D27933C1h
                dd 0A5980265h, 58533969h, 4CCD20C5h, 0B1061BC9h, 0C6E72A6Dh, 3B2C1161h, 0ADB2697h, 0F7101D9Bh, 80F12C3Fh, 7D3A1733h
                dd 0B5F3D8F2h, 4838E3FEh, 3FD9D25Ah, 0C212E956h, 0F3E5DEA0h, 0E2EE5ACh, 79CFD408h, 8404EF04h, 7E7D1067h, 83B62B6Bh
                dd 0F4571ACFh, 99C21C3h, 386B1635h, 0C5A02D39h, 0B2411C9Dh, 4F8A2791h, 8743E850h, 7A88D35Ch, 0D69E2F8h, 0F0A2D9F4h
                dd 0C155EE02h, 3C9ED50Eh, 4B7FE4AAh, 0B6B4DFA6h, 72E80698h, 8F233D94h, 0F8C20C30h, 509373Ch, 34FE00CAh, 0C9353BC6h
                dd 0BED40A62h, 431F316Eh, 8BD6FEAFh, 761DC5A3h, 1FCF407h, 0FC37CF0Bh, 0CDC0F8FDh, 300BC3F1h, 47EAF255h, 0BA21C959h
                dd 4058363Ah, 0BD930D36h, 0CA723C92h, 37B9079Eh, 64E3068h, 0FB850B64h, 8C643AC0h, 71AF01CCh, 0B966CE0Dh, 44ADF501h
                dd 334CC4A5h, 0CE87FFA9h, 0FF70C85Fh, 2BBF353h, 755AC2F7h, 8891F9FBh, 9C0FE057h, 61C4DB5Bh, 1625EAFFh, 0EBEED1F3h
                dd 0DA19E605h, 27D2DD09h, 5033ECADh, 0ADF8D7A1h, 65311860h, 98FA236Ch, 0EF1B12C8h, 12D029C4h, 23271E32h, 0DEEC253Eh
                dd 0A90D149Ah, 54C62F96h, 0AEBFD0F5h, 5374EBF9h, 2495DA5Dh, 0D95EE151h, 0E8A9D6A7h, 1562EDABh, 6283DC0Fh, 9F48E703h
                dd 578128C2h, 0AA4A13CEh, 0DDAB226Ah, 20601966h, 11972E90h, 0EC5C159Ch, 9BBD2438h, 66761F34h, 3A34723h, 0FE687C2Fh
                dd 89894D8Bh, 74427687h, 45B54171h, 0B87E7A7Dh, 0CF9F4BD9h, 325470D5h, 0FA9DBF14h, 7568418h, 70B7B5BCh, 8D7C8EB0h
                dd 0BC8BB946h, 4140824Ah, 36A1B3EEh, 0CB6A88E2h, 31137781h, 0CCD84C8Dh, 0BB397D29h, 46F24625h, 770571D3h, 8ACE4ADFh
                dd 0FD2F7B7Bh, 0E44077h, 0C82D8FB6h, 35E6B4BAh, 4207851Eh, 0BFCCBE12h, 8E3B89E4h, 73F0B2E8h, 411834Ch, 0F9DAB840h
                dd 0ED44A1ECh, 108F9AE0h, 676EAB44h, 9AA59048h, 0AB52A7BEh, 56999CB2h, 2178AD16h, 0DCB3961Ah, 147A59DBh, 0E9B162D7h
                dd 9E505373h, 639B687Fh, 526C5F89h, 0AFA76485h, 0D8465521h, 258D6E2Dh, 0DFF4914Eh, 223FAA42h, 55DE9BE6h, 0A815A0EAh
                dd 99E2971Ch, 6429AC10h, 13C89DB4h, 0EE03A6B8h, 26CA6979h, 0DB015275h, 0ACE063D1h, 512B58DDh, 60DC6F2Bh, 9D175427h
                dd 0EAF66583h, 173D5E8Fh, 0D36187B1h, 2EAABCBDh, 594B8D19h, 0A480B615h, 957781E3h, 68BCBAEFh, 1F5D8B4Bh, 0E296B047h
                dd 2A5F7F86h, 0D794448Ah, 0A075752Eh, 5DBE4E22h, 6C4979D4h, 918242D8h, 0E663737Ch, 1BA84870h, 0E1D1B713h, 1C1A8C1Fh
                dd 6BFBBDBBh, 963086B7h, 0A7C7B141h, 5A0C8A4Dh, 2DEDBBE9h, 0D02680E5h, 18EF4F24h, 0E5247428h, 92C5458Ch, 6F0E7E80h
                dd 5EF94976h, 0A332727Ah, 0D4D343DEh, 291878D2h, 3D86617Eh, 0C04D5A72h, 0B7AC6BD6h, 4A6750DAh, 7B90672Ch, 865B5C20h
                dd 0F1BA6D84h, 0C715688h, 0C4B89949h, 3973A245h, 4E9293E1h, 0B359A8EDh, 82AE9F1Bh, 7F65A417h, 88495B3h, 0F54FAEBFh
                dd 0F3651DCh, 0F2FD6AD0h, 851C5B74h, 78D76078h, 4920578Eh, 0B4EB6C82h, 0C30A5D26h, 3EC1662Ah, 0F608A9EBh, 0BC392E7h
                dd 7C22A343h, 81E9984Fh, 0B01EAFB9h, 4DD594B5h, 3A34A511h, 0C7FF9E1Dh
dword_10083C00  dd 1A808C7Ch, 0D1BB8081h, 308A24F6h, 0FBB1280Bh, 0C86DE3Ah, 0C7BDD2C7h, 268C76B0h, 0EDB77A4Dh, 2478BB85h, 0EF43B778h
                                        ; DATA XREF: sub_10001C50+6Fr
                                        ; sub_10001C50+ABr ...
                dd 0E72130Fh, 0C5491FF2h, 327EE9C3h, 0F945E53Eh, 18744149h, 0D34F4DB4h, 0AAB02E4Eh, 618B22B3h, 80BA86C4h, 4B818A39h
                dd 0BCB67C08h, 778D70F5h, 96BCD482h, 5D87D87Fh, 944819B7h, 5F73154Ah, 0BE42B13Dh, 7579BDC0h, 824E4BF1h, 4975470Ch
                dd 0A844E37Bh, 637FEF86h, 0FD664392h, 365D4F6Fh, 0D76CEB18h, 1C57E7E5h, 0EB6011D4h, 205B1D29h, 0C16AB95Eh, 0A51B5A3h
                dd 0C39E746Bh, 8A57896h, 0E994DCE1h, 22AFD01Ch, 0D598262Dh, 1EA32AD0h, 0FF928EA7h, 34A9825Ah, 4D56E1A0h, 866DED5Dh
                dd 675C492Ah, 0AC6745D7h, 5B50B3E6h, 906BBF1Bh, 715A1B6Ch, 0BA611791h, 73AED659h, 0B895DAA4h, 59A47ED3h, 929F722Eh
                dd 65A8841Fh, 0AE9388E2h, 4FA22C95h, 84992068h, 0D8401EACh, 137B1251h, 0F24AB626h, 3971BADBh, 0CE464CEAh, 57D4017h
                dd 0E44CE460h, 2F77E89Dh, 0E6B82955h, 2D8325A8h, 0CCB281DFh, 7898D22h, 0F0BE7B13h, 3B8577EEh, 0DAB4D399h, 118FDF64h
                dd 6870BC9Eh, 0A34BB063h, 427A1414h, 894118E9h, 7E76EED8h, 0B54DE225h, 547C4652h, 9F474AAFh, 56888B67h, 9DB3879Ah
                dd 7C8223EDh, 0B7B92F10h, 408ED921h, 8BB5D5DCh, 6A8471ABh, 0A1BF7D56h, 3FA6D142h, 0F49DDDBFh, 15AC79C8h, 0DE977535h
                dd 29A08304h, 0E29B8FF9h, 3AA2B8Eh, 0C8912773h, 15EE6BBh, 0CA65EA46h, 2B544E31h, 0E06F42CCh, 1758B4FDh, 0DC63B800h
                dd 3D521C77h, 0F669108Ah, 8F967370h, 44AD7F8Dh, 0A59CDBFAh, 6EA7D707h, 99902136h, 52AB2DCBh, 0B39A89BCh, 78A18541h
                dd 0B16E4489h, 7A554874h, 9B64EC03h, 505FE0FEh, 0A76816CFh, 6C531A32h, 8D62BE45h, 4659B2B8h, 9301A5DDh, 583AA920h
                dd 0B90B0D57h, 723001AAh, 8507F79Bh, 4E3CFB66h, 0AF0D5F11h, 643653ECh, 0ADF99224h, 66C29ED9h, 87F33AAEh, 4CC83653h
                dd 0BBFFC062h, 70C4CC9Fh, 91F568E8h, 5ACE6415h, 233107EFh, 0E80A0B12h, 93BAF65h, 0C200A398h, 353755A9h, 0FE0C5954h
                dd 1F3DFD23h, 0D406F1DEh, 1DC93016h, 0D6F23CEBh, 37C3989Ch, 0FCF89461h, 0BCF6250h, 0C0F46EADh, 21C5CADAh, 0EAFEC627h
                dd 74E76A33h, 0BFDC66CEh, 5EEDC2B9h, 95D6CE44h, 62E13875h, 0A9DA3488h, 48EB90FFh, 83D09C02h, 4A1F5DCAh, 81245137h
                dd 6015F540h, 0AB2EF9BDh, 5C190F8Ch, 97220371h, 7613A706h, 0BD28ABFBh, 0C4D7C801h, 0FECC4FCh, 0EEDD608Bh, 25E66C76h
                dd 0D2D19A47h, 19EA96BAh, 0F8DB32CDh, 33E03E30h, 0FA2FFFF8h, 3114F305h, 0D0255772h, 1B1E5B8Fh, 0EC29ADBEh, 2712A143h
                dd 0C6230534h, 0D1809C9h, 51C1370Dh, 9AFA3BF0h, 7BCB9F87h, 0B0F0937Ah, 47C7654Bh, 8CFC69B6h, 6DCDCDC1h, 0A6F6C13Ch
                dd 6F3900F4h, 0A4020C09h, 4533A87Eh, 8E08A483h, 793F52B2h, 0B2045E4Fh, 5335FA38h, 980EF6C5h, 0E1F1953Fh, 2ACA99C2h
                dd 0CBFB3DB5h, 0C03148h, 0F7F7C779h, 3CCCCB84h, 0DDFD6FF3h, 16C6630Eh, 0DF09A2C6h, 1432AE3Bh, 0F5030A4Ch, 3E3806B1h
                dd 0C90FF080h, 234FC7Dh, 0E305580Ah, 283E54F7h, 0B627F8E3h, 7D1CF41Eh, 9C2D5069h, 57165C94h, 0A021AAA5h, 6B1AA658h
                dd 8A2B022Fh, 41100ED2h, 88DFCF1Ah, 43E4C3E7h, 0A2D56790h, 69EE6B6Dh, 9ED99D5Ch, 55E291A1h, 0B4D335D6h, 7FE8392Bh
                dd 6175AD1h, 0CD2C562Ch, 2C1DF25Bh, 0E726FEA6h, 10110897h, 0DB2A046Ah, 3A1BA01Dh, 0F120ACE0h, 38EF6D28h, 0F3D461D5h
                dd 12E5C5A2h, 0D9DEC95Fh, 2EE93F6Eh, 0E5D23393h, 4E397E4h, 0CFD89B19h
dword_10084000  dd 0E2E88C12h, 0D9E471D9h, 0E8400638h, 0D34CFBF3h, 0E4BACA04h, 0DFB637CFh, 0EE12402Eh, 0D51EBDE5h, 1ADF752Ch, 21D388E7h
                                        ; DATA XREF: sub_10001C50+84r
                                        ; sub_10001C50+A0r ...
                dd 1077FF06h, 2B7B02CDh, 1C8D333Ah, 2781CEF1h, 1625B910h, 2D2944DBh, 0D24ABEA2h, 0E9464369h, 0D8E23488h, 0E3EEC943h
                dd 0D418F8B4h, 0EF14057Fh, 0DEB0729Eh, 0E5BC8F55h, 2A7D479Ch, 1171BA57h, 20D5CDB6h, 1BD9307Dh, 2C2F018Ah, 1723FC41h
                dd 26878BA0h, 1D8B766Bh, 42762F5h, 3F2B9F3Eh, 0E8FE8DFh, 35831514h, 27524E3h, 3979D928h, 8DDAEC9h, 33D15302h
                dd 0FC109BCBh, 0C71C6600h, 0F6B811E1h, 0CDB4EC2Ah, 0FA42DDDDh, 0C14E2016h, 0F0EA57F7h, 0CBE6AA3Ch, 34855045h, 0F89AD8Eh
                dd 3E2DDA6Fh, 52127A4h, 32D71653h, 9DBEB98h, 387F9C79h, 37361B2h, 0CCB2A97Bh, 0F7BE54B0h, 0C61A2351h, 0FD16DE9Ah
                dd 0CAE0EF6Dh, 0F1EC12A6h, 0C0486547h, 0FB44988Ch, 227A5CD0h, 1976A11Bh, 28D2D6FAh, 13DE2B31h, 24281AC6h, 1F24E70Dh
                dd 2E8090ECh, 158C6D27h, 0DA4DA5EEh, 0E1415825h, 0D0E52FC4h, 0EBE9D20Fh, 0DC1FE3F8h, 0E7131E33h, 0D6B769D2h, 0EDBB9419h
                dd 12D86E60h, 29D493ABh, 1870E44Ah, 237C1981h, 148A2876h, 2F86D5BDh, 1E22A25Ch, 252E5F97h, 0EAEF975Eh, 0D1E36A95h
                dd 0E0471D74h, 0DB4BE0BFh, 0ECBDD148h, 0D7B12C83h, 0E6155B62h, 0DD19A6A9h, 0C4B5B237h, 0FFB94FFCh, 0CE1D381Dh, 0F511C5D6h
                dd 0C2E7F421h, 0F9EB09EAh, 0C84F7E0Bh, 0F34383C0h, 3C824B09h, 78EB6C2h, 362AC123h, 0D263CE8h, 3AD00D1Fh, 1DCF0D4h
                dd 30788735h, 0B747AFEh, 0F4178087h, 0CF1B7D4Ch, 0FEBF0AADh, 0C5B3F766h, 0F245C691h, 0C9493B5Ah, 0F8ED4CBBh, 0C3E1B170h
                dd 0C2079B9h, 372C8472h, 688F393h, 3D840E58h, 0A723FAFh, 317EC264h, 0DAB585h, 3BD6484Eh, 63C12D9Bh, 58CDD050h
                dd 6969A7B1h, 52655A7Ah, 65936B8Dh, 5E9F9646h, 6F3BE1A7h, 54371C6Ch, 9BF6D4A5h, 0A0FA296Eh, 915E5E8Fh, 0AA52A344h
                dd 9DA492B3h, 0A6A86F78h, 970C1899h, 0AC00E552h, 53631F2Bh, 686FE2E0h, 59CB9501h, 62C768CAh, 5531593Dh, 6E3DA4F6h
                dd 5F99D317h, 64952EDCh, 0AB54E615h, 90581BDEh, 0A1FC6C3Fh, 9AF091F4h, 0AD06A003h, 960A5DC8h, 0A7AE2A29h, 9CA2D7E2h
                dd 850EC37Ch, 0BE023EB7h, 8FA64956h, 0B4AAB49Dh, 835C856Ah, 0B85078A1h, 89F40F40h, 0B2F8F28Bh, 7D393A42h, 4635C789h
                dd 7791B068h, 4C9D4DA3h, 7B6B7C54h, 4067819Fh, 71C3F67Eh, 4ACF0BB5h, 0B5ACF1CCh, 8EA00C07h, 0BF047BE6h, 8408862Dh
                dd 0B3FEB7DAh, 88F24A11h, 0B9563DF0h, 825AC03Bh, 4D9B08F2h, 7697F539h, 473382D8h, 7C3F7F13h, 4BC94EE4h, 70C5B32Fh
                dd 4161C4CEh, 7A6D3905h, 0A353FD59h, 985F0092h, 0A9FB7773h, 92F78AB8h, 0A501BB4Fh, 9E0D4684h, 0AFA93165h, 94A5CCAEh
                dd 5B640467h, 6068F9ACh, 51CC8E4Dh, 6AC07386h, 5D364271h, 663ABFBAh, 579EC85Bh, 6C923590h, 93F1CFE9h, 0A8FD3222h
                dd 995945C3h, 0A255B808h, 95A389FFh, 0AEAF7434h, 9F0B03D5h, 0A407FE1Eh, 6BC636D7h, 50CACB1Ch, 616EBCFDh, 5A624136h
                dd 6D9470C1h, 56988D0Ah, 673CFAEBh, 5C300720h, 459C13BEh, 7E90EE75h, 4F349994h, 7438645Fh, 43CE55A8h, 78C2A863h
                dd 4966DF82h, 726A2249h, 0BDABEA80h, 86A7174Bh, 0B70360AAh, 8C0F9D61h, 0BBF9AC96h, 80F5515Dh, 0B15126BCh, 8A5DDB77h
                dd 753E210Eh, 4E32DCC5h, 7F96AB24h, 449A56EFh, 736C6718h, 48609AD3h, 79C4ED32h, 42C810F9h, 8D09D830h, 0B60525FBh
                dd 87A1521Ah, 0BCADAFD1h, 8B5B9E26h, 0B05763EDh, 81F3140Ch, 0BAFFE9C7h
dword_10084400  dd 54EEBDBDh, 58137686h, 0FC6497B7h, 0F0995C8Ch, 6A8ABBBh, 0A556080h, 0AE2281B1h, 0A2DF4A8Ah, 63178345h, 6FEA487Eh
                                        ; DATA XREF: sub_10001C50+64r
                                        ; sub_10001C50+95r ...
                dd 0CB9DA94Fh, 0C7606274h, 31519543h, 3DAC5E78h, 99DBBF49h, 95267472h, 0F6DC0D8Dh, 0FA21C6B6h, 5E562787h, 52ABECBCh
                dd 0A49A1B8Bh, 0A867D0B0h, 0C103181h, 0EDFABAh, 0C1253375h, 0CDD8F84Eh, 69AF197Fh, 6552D244h, 93632573h, 9F9EEE48h
                dd 3BE90F79h, 3714C442h, 9B005A5Bh, 97FD9160h, 338A7051h, 3F77BB6Ah, 0C9464C5Dh, 0C5BB8766h, 61CC6657h, 6D31AD6Ch
                dd 0ACF964A3h, 0A004AF98h, 4734EA9h, 88E8592h, 0FEBF72A5h, 0F242B99Eh, 563558AFh, 5AC89394h, 3932EA6Bh, 35CF2150h
                dd 91B8C061h, 9D450B5Ah, 6B74FC6Dh, 67893756h, 0C3FED667h, 0CF031D5Ch, 0ECBD493h, 2361FA8h, 0A641FE99h, 0AABC35A2h
                dd 5C8DC295h, 507009AEh, 0F407E89Fh, 0F8FA23A4h, 0C63E7F7Dh, 0CAC3B446h, 6EB45577h, 62499E4Ch, 9478697Bh, 9885A240h
                dd 3CF24371h, 300F884Ah, 0F1C74185h, 0FD3A8ABEh, 594D6B8Fh, 55B0A0B4h, 0A3815783h, 0AF7C9CB8h, 0B0B7D89h, 7F6B6B2h
                dd 640CCF4Dh, 68F10476h, 0CC86E547h, 0C07B2E7Ch, 364AD94Bh, 3AB71270h, 9EC0F341h, 923D387Ah, 53F5F1B5h, 5F083A8Eh
                dd 0FB7FDBBFh, 0F7821084h, 1B3E7B3h, 0D4E2C88h, 0A939CDB9h, 0A5C40682h, 9D0989Bh, 52D53A0h, 0A15AB291h, 0ADA779AAh
                dd 5B968E9Dh, 576B45A6h, 0F31CA497h, 0FFE16FACh, 3E29A663h, 32D46D58h, 96A38C69h, 9A5E4752h, 6C6FB065h, 60927B5Eh
                dd 0C4E59A6Fh, 0C8185154h, 0ABE228ABh, 0A71FE390h, 36802A1h, 0F95C99Ah, 0F9A43EADh, 0F559F596h, 512E14A7h, 5DD3DF9Ch
                dd 9C1B1653h, 90E6DD68h, 34913C59h, 386CF762h, 0CE5D0055h, 0C2A0CB6Eh, 66D72A5Fh, 6A2AE164h, 7D4F343Ch, 71B2FF07h
                dd 0D5C51E36h, 0D938D50Dh, 2F09223Ah, 23F4E901h, 87830830h, 8B7EC30Bh, 4AB60AC4h, 464BC1FFh, 0E23C20CEh, 0EEC1EBF5h
                dd 18F01CC2h, 140DD7F9h, 0B07A36C8h, 0BC87FDF3h, 0DF7D840Ch, 0D3804F37h, 77F7AE06h, 7B0A653Dh, 8D3B920Ah, 81C65931h
                dd 25B1B800h, 294C733Bh, 0E884BAF4h, 0E47971CFh, 400E90FEh, 4CF35BC5h, 0BAC2ACF2h, 0B63F67C9h, 124886F8h, 1EB54DC3h
                dd 0B2A1D3DAh, 0BE5C18E1h, 1A2BF9D0h, 16D632EBh, 0E0E7C5DCh, 0EC1A0EE7h, 486DEFD6h, 449024EDh, 8558ED22h, 89A52619h
                dd 2DD2C728h, 212F0C13h, 0D71EFB24h, 0DBE3301Fh, 7F94D12Eh, 73691A15h, 109363EAh, 1C6EA8D1h, 0B81949E0h, 0B4E482DBh
                dd 42D575ECh, 4E28BED7h, 0EA5F5FE6h, 0E6A294DDh, 276A5D12h, 2B979629h, 8FE07718h, 831DBC23h, 752C4B14h, 79D1802Fh
                dd 0DDA6611Eh, 0D15BAA25h, 0EF9FF6FCh, 0E3623DC7h, 4715DCF6h, 4BE817CDh, 0BDD9E0FAh, 0B1242BC1h, 1553CAF0h, 19AE01CBh
                dd 0D866C804h, 0D49B033Fh, 70ECE20Eh, 7C112935h, 8A20DE02h, 86DD1539h, 22AAF408h, 2E573F33h, 4DAD46CCh, 41508DF7h
                dd 0E5276CC6h, 0E9DAA7FDh, 1FEB50CAh, 13169BF1h, 0B7617AC0h, 0BB9CB1FBh, 7A547834h, 76A9B30Fh, 0D2DE523Eh, 0DE239905h
                dd 28126E32h, 24EFA509h, 80984438h, 8C658F03h, 2071111Ah, 2C8CDA21h, 88FB3B10h, 8406F02Bh, 7237071Ch, 7ECACC27h
                dd 0DABD2D16h, 0D640E62Dh, 17882FE2h, 1B75E4D9h, 0BF0205E8h, 0B3FFCED3h, 45CE39E4h, 4933F2DFh, 0ED4413EEh, 0E1B9D8D5h
                dd 8243A12Ah, 8EBE6A11h, 2AC98B20h, 2634401Bh, 0D005B72Ch, 0DCF87C17h, 788F9D26h, 7472561Dh, 0B5BA9FD2h, 0B94754E9h
                dd 1D30B5D8h, 11CD7EE3h, 0E7FC89D4h, 0EB0142EFh, 4F76A3DEh, 438B68E5h, 0D81DECD7h
byte_10084804   db 93h, 0ECh, 1Dh, 0D8h, 0C3h, 0ECh, 1Dh, 0D8h, 0D1h, 0ECh
                                        ; DATA XREF: sub_10001060+3Bo
                                        ; sub_100018B0+1Co
                db 1Dh, 0D8h, 53h, 0ECh, 1Dh, 0D8h, 0F3h, 0ECh, 1Dh, 0D8h
                db 0DBh, 0ECh, 1Dh, 0D8h, 0D2h, 0ECh, 1Dh, 0D8h, 15h, 0ECh
                db 1Dh, 0D8h, 23h, 0ECh, 1Dh, 0D8h
off_10084828    dd offset off_1005B520  ; DATA XREF: .rdata:10060634o
                                        ; .rdata:off_100607ECo ...
byte_1008482C   db 4 dup(0), 2Eh, 3Fh, 41h, 56h, 65h, 78h, 63h, 65h, 70h, 74h, 69h, 6Fh, 6Eh, 40h, 73h, 74h, 64h, 2 dup(40h), 0
                                        ; DATA XREF: sub_10001060+380o
                                        ; sub_100018B0+381o

    	.code    	
;----------------------------------------------------
assume  fs:nothing
    	
sub_100018B0    proc near               ; CODE XREF: f_decrypt+50p

var_8           = dword ptr -8
var_4           = dword ptr -4

                mov     edx, [ecx]
                sub     esp, 8
                mov     [eax], edx
                mov     edx, [ecx+4]
                push    ebx
                mov     [eax+4], edx
                mov     edx, [ecx+8]
                mov     ecx, [ecx+0Ch]
                push    ebp
                mov     [eax+8], edx
                push    esi
                mov     [eax+0Ch], ecx
                mov     edx, offset byte_10084804
                add     eax, 1Fh
                push    edi

loc_100018D5:                           ; CODE XREF: sub_100018B0+387j
                movzx   ecx, byte ptr [eax-12h]
                movzx   esi, byte ptr [eax-13h]
                add     ecx, ecx
                movzx   edi, byte ptr [eax-10h]
                add     ecx, ecx
                mov     [esp+18h+var_4], ecx
                movzx   ebp, byte ptr [eax-11h]
                xor     ecx, ecx
                add     esi, esi
                mov     ch, byte_10080603[esi+esi]
                add     esi, esi
                add     edi, edi
                add     edi, edi
                add     ebp, ebp
                movzx   ebx, ss:byte_10080601[ebp+ebp]
                mov     cl, byte_10080602[edi]
                add     ebp, ebp
                shl     ecx, 8
                or      ecx, ebx
                mov     ebx, [esp+18h+var_4]
                movzx   ebx, byte_10080600[ebx]
                shl     ecx, 8
                or      ecx, ebx
                xor     ecx, [edx-4]
                xor     ebx, ebx
                mov     bh, byte_10080A03[esi]
                movzx   esi, ss:byte_10080A01[ebp]
                mov     [esp+18h+var_8], ecx
                mov     ecx, [eax-1Fh]
                mov     bl, byte_10080A02[edi]
                mov     edi, [eax-17h]
                shl     ebx, 8
                or      ebx, esi
                mov     esi, [esp+18h+var_4]
                movzx   esi, byte_10080A00[esi]
                shl     ebx, 8
                or      ebx, esi
                xor     ebx, ecx
                xor     ecx, edi
                xor     ecx, [esp+18h+var_8]
                mov     esi, ebx
                xor     esi, [edx-4]
                mov     ebx, [eax-1Bh]
                mov     [eax-7], ecx
                xor     ecx, ebx
                xor     ecx, [eax-13h]
                mov     [eax-0Fh], esi
                mov     [eax-3], ecx
                xor     esi, ebx
                xor     esi, edi
                mov     [eax-0Bh], esi
                movzx   edi, byte ptr [eax]
                movzx   ebp, byte ptr [eax-1]
                movzx   esi, cl
                movzx   ecx, byte ptr [eax-2]
                add     ecx, ecx
                add     ecx, ecx
                mov     [esp+18h+var_4], ecx
                xor     ecx, ecx
                add     esi, esi
                mov     ch, byte_10080603[esi+esi]
                add     esi, esi
                add     edi, edi
                add     edi, edi
                add     ebp, ebp
                movzx   ebx, ss:byte_10080601[ebp+ebp]
                mov     cl, byte_10080602[edi]
                add     ebp, ebp
                shl     ecx, 8
                or      ecx, ebx
                mov     ebx, [esp+18h+var_4]
                movzx   ebx, byte_10080600[ebx]
                shl     ecx, 8
                or      ecx, ebx
                xor     ecx, [edx]
                xor     ebx, ebx
                mov     bh, byte_10080A03[esi]
                mov     [esp+18h+var_8], ecx
                mov     ecx, [eax-0Fh]
                mov     bl, byte_10080A02[edi]
                shl     ebx, 8
                movzx   esi, ss:byte_10080A01[ebp]
                or      ebx, esi
                mov     esi, [esp+18h+var_4]
                movzx   esi, byte_10080A00[esi]
                mov     edi, [eax-7]
                shl     ebx, 8
                or      ebx, esi
                xor     ebx, [edx]
                mov     esi, ebx
                xor     esi, ecx
                mov     ebx, [eax-0Bh]
                xor     ecx, edi
                xor     ecx, [esp+18h+var_8]
                mov     [eax+1], esi
                mov     [eax+9], ecx
                xor     ecx, ebx
                xor     ecx, [eax-3]
                xor     esi, ebx
                mov     [eax+0Dh], ecx
                xor     esi, edi
                mov     [eax+5], esi
                movzx   edi, byte ptr [eax+10h]
                movzx   ebp, byte ptr [eax+0Fh]
                movzx   esi, cl
                movzx   ecx, byte ptr [eax+0Eh]
                add     ecx, ecx
                add     ecx, ecx
                mov     [esp+18h+var_4], ecx
                add     esi, esi
                add     esi, esi
                xor     ecx, ecx
                mov     ch, byte_10080603[esi]
                add     edi, edi
                add     edi, edi
                add     ebp, ebp
                movzx   ebx, ss:byte_10080601[ebp+ebp]
                mov     cl, byte_10080602[edi]
                add     ebp, ebp
                shl     ecx, 8
                or      ecx, ebx
                mov     ebx, [esp+18h+var_4]
                movzx   ebx, byte_10080600[ebx]
                shl     ecx, 8
                or      ecx, ebx
                xor     ecx, [edx+4]
                xor     ebx, ebx
                mov     bh, byte_10080A03[esi]
                movzx   esi, ss:byte_10080A01[ebp]
                mov     [esp+18h+var_8], ecx
                mov     ecx, [eax+1]
                mov     bl, byte_10080A02[edi]
                mov     edi, [eax+9]
                shl     ebx, 8
                or      ebx, esi
                mov     esi, [esp+18h+var_4]
                movzx   esi, byte_10080A00[esi]
                shl     ebx, 8
                or      ebx, esi
                xor     ebx, [edx+4]
                mov     esi, ebx
                mov     ebx, [eax+5]
                xor     esi, ecx
                xor     ecx, edi
                xor     ecx, [esp+18h+var_8]
                mov     [eax+11h], esi
                mov     [eax+19h], ecx
                xor     esi, ebx
                xor     esi, edi
                xor     ecx, ebx
                xor     ecx, [eax+0Dh]
                mov     [eax+15h], esi
                mov     [eax+1Dh], ecx
                movzx   edi, byte ptr [eax+20h]
                movzx   ebp, byte ptr [eax+1Fh]
                movzx   esi, cl
                add     esi, esi
                add     edi, edi
                add     ebp, ebp
                add     esi, esi
                add     edi, edi
                add     ebp, ebp
                movzx   ecx, byte ptr [eax+1Eh]
                add     ecx, ecx
                add     ecx, ecx
                mov     [esp+18h+var_4], ecx
                xor     ecx, ecx
                mov     ch, byte_10080603[esi]
                movzx   ebx, ss:byte_10080601[ebp]
                mov     cl, byte_10080602[edi]
                shl     ecx, 8
                or      ecx, ebx
                mov     ebx, [esp+18h+var_4]
                movzx   ebx, byte_10080600[ebx]
                shl     ecx, 8
                or      ecx, ebx
                xor     ecx, [edx+8]
                mov     ebx, [eax+11h]
                mov     [esp+18h+var_8], ecx
                xor     ecx, ecx
                mov     ch, byte_10080A03[esi]
                movzx   esi, ss:byte_10080A01[ebp]
                mov     cl, byte_10080A02[edi]
                mov     edi, [eax+19h]
                shl     ecx, 8
                or      ecx, esi
                mov     esi, [esp+18h+var_4]
                movzx   esi, byte_10080A00[esi]
                shl     ecx, 8
                or      ecx, esi
                xor     ecx, [edx+8]
                mov     esi, ecx
                mov     ecx, [eax+15h]
                mov     ebp, ecx
                xor     esi, ebx
                mov     [eax+21h], esi
                xor     ebx, edi
                xor     ebx, [esp+18h+var_8]
                xor     ebp, edi
                xor     ecx, ebx
                xor     ecx, [eax+1Dh]
                mov     [eax+29h], ebx
                mov     [eax+2Dh], ecx
                xor     ebp, esi
                movzx   esi, cl
                mov     [eax+25h], ebp
                movzx   ecx, byte ptr [eax+2Eh]
                movzx   edi, byte ptr [eax+30h]
                movzx   ebp, byte ptr [eax+2Fh]
                add     ecx, ecx
                add     ecx, ecx
                mov     [esp+18h+var_4], ecx
                xor     ecx, ecx
                add     esi, esi
                mov     ch, byte_10080603[esi+esi]
                add     esi, esi
                add     edi, edi
                add     edi, edi
                add     ebp, ebp
                movzx   ebx, ss:byte_10080601[ebp+ebp]
                mov     cl, byte_10080602[edi]
                add     ebp, ebp
                shl     ecx, 8
                or      ecx, ebx
                mov     ebx, [esp+18h+var_4]
                movzx   ebx, byte_10080600[ebx]
                shl     ecx, 8
                or      ecx, ebx
                xor     ecx, [edx+0Ch]
                mov     ebx, [eax+21h]
                mov     [esp+18h+var_8], ecx
                xor     ecx, ecx
                mov     ch, byte_10080A03[esi]
                movzx   esi, ss:byte_10080A01[ebp]
                mov     cl, byte_10080A02[edi]
                shl     ecx, 8
                or      ecx, esi
                mov     esi, [esp+18h+var_4]
                movzx   esi, byte_10080A00[esi]
                shl     ecx, 8
                or      ecx, esi
                xor     ecx, [edx+0Ch]
                mov     esi, ecx
                mov     edi, [eax+29h]
                mov     ecx, [eax+25h]
                xor     esi, ebx
                xor     ebx, edi
                xor     ebx, [esp+18h+var_8]
                mov     ebp, ecx
                xor     ecx, ebx
                xor     ecx, [eax+2Dh]
                xor     ebp, edi
                xor     ebp, esi
                mov     [eax+31h], esi
                mov     [eax+35h], ebp
                mov     [eax+39h], ebx
                mov     [eax+3Dh], ecx
                add     edx, 14h
                add     eax, 50h
                cmp     edx, offset byte_1008482C
                jl      loc_100018D5
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                add     esp, 8
                retn
sub_100018B0    endp




; --------------------------------------------------------------------------

sub_10013080    proc near               ; CODE XREF: AES_encrypt+3Bp
                                        ; AES_cbc_encrypt+141p

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch
arg_C           = dword ptr  10h

                mov     [esp+arg_8], edi
                xor     eax, [edi]
                xor     ebx, [edi+4]
                xor     ecx, [edi+8]
                xor     edx, [edi+0Ch]
                mov     esi, [edi+0F0h]
                lea     esi, [esi+esi-2]
                lea     esi, [edi+esi*8]
                mov     [esp+arg_C], esi

loc_100130A0:                           ; CODE XREF: sub_10013080+F3j
                mov     esi, eax
                and     esi, 0FFh
                mov     esi, [ebp+esi*8+0]
                movzx   edi, bh
                xor     esi, [ebp+edi*8+3]
                mov     edi, ecx
                shr     edi, 10h
                and     edi, 0FFh
                xor     esi, [ebp+edi*8+2]
                mov     edi, edx
                shr     edi, 18h
                xor     esi, [ebp+edi*8+1]
                mov     [esp+arg_0], esi
                mov     esi, ebx
                and     esi, 0FFh
                shr     ebx, 10h
                mov     esi, [ebp+esi*8+0]
                movzx   edi, ch
                xor     esi, [ebp+edi*8+3]
                mov     edi, edx
                shr     edi, 10h
                and     edi, 0FFh
                xor     esi, [ebp+edi*8+2]
                mov     edi, eax
                shr     edi, 18h
                xor     esi, [ebp+edi*8+1]
                mov     [esp+arg_4], esi
                mov     esi, ecx
                and     esi, 0FFh
                shr     ecx, 18h
                mov     esi, [ebp+esi*8+0]
                movzx   edi, dh
                xor     esi, [ebp+edi*8+3]
                mov     edi, eax
                shr     edi, 10h
                and     edx, 0FFh
                and     edi, 0FFh
                xor     esi, [ebp+edi*8+2]
                movzx   edi, bh
                xor     esi, [ebp+edi*8+1]
                mov     edi, [esp+arg_8]
                mov     edx, [ebp+edx*8+0]
                movzx   eax, ah
                xor     edx, [ebp+eax*8+3]
                mov     eax, [esp+arg_0]
                and     ebx, 0FFh
                xor     edx, [ebp+ebx*8+2]
                mov     ebx, [esp+arg_4]
                xor     edx, [ebp+ecx*8+1]
                mov     ecx, esi
                add     edi, 10h
                xor     eax, [edi]
                xor     ebx, [edi+4]
                xor     ecx, [edi+8]
                xor     edx, [edi+0Ch]
                cmp     edi, [esp+arg_C]
                mov     [esp+arg_8], edi
                jb      loc_100130A0
                mov     esi, eax
                and     esi, 0FFh
                mov     esi, [ebp+esi*8+2]
                and     esi, 0FFh
                movzx   edi, bh
                mov     edi, [ebp+edi*8+0]
                and     edi, 0FF00h
                xor     esi, edi
                mov     edi, ecx
                shr     edi, 10h
                and     edi, 0FFh
                mov     edi, [ebp+edi*8+0]
                and     edi, 0FF0000h
                xor     esi, edi
                mov     edi, edx
                shr     edi, 18h
                mov     edi, [ebp+edi*8+2]
                and     edi, 0FF000000h
                xor     esi, edi
                mov     [esp+arg_0], esi
                mov     esi, ebx
                and     esi, 0FFh
                shr     ebx, 10h
                mov     esi, [ebp+esi*8+2]
                and     esi, 0FFh
                movzx   edi, ch
                mov     edi, [ebp+edi*8+0]
                and     edi, 0FF00h
                xor     esi, edi
                mov     edi, edx
                shr     edi, 10h
                and     edi, 0FFh
                mov     edi, [ebp+edi*8+0]
                and     edi, 0FF0000h
                xor     esi, edi
                mov     edi, eax
                shr     edi, 18h
                mov     edi, [ebp+edi*8+2]
                and     edi, 0FF000000h
                xor     esi, edi
                mov     [esp+arg_4], esi
                mov     esi, ecx
                and     esi, 0FFh
                shr     ecx, 18h
                mov     esi, [ebp+esi*8+2]
                and     esi, 0FFh
                movzx   edi, dh
                mov     edi, [ebp+edi*8+0]
                and     edi, 0FF00h
                xor     esi, edi
                mov     edi, eax
                shr     edi, 10h
                and     edx, 0FFh
                and     edi, 0FFh
                mov     edi, [ebp+edi*8+0]
                and     edi, 0FF0000h
                xor     esi, edi
                movzx   edi, bh
                mov     edi, [ebp+edi*8+2]
                and     edi, 0FF000000h
                xor     esi, edi
                mov     edi, [esp+arg_8]
                and     edx, 0FFh
                mov     edx, [ebp+edx*8+2]
                and     edx, 0FFh
                movzx   eax, ah
                mov     eax, [ebp+eax*8+0]
                and     eax, 0FF00h
                xor     edx, eax
                mov     eax, [esp+arg_0]
                and     ebx, 0FFh
                mov     ebx, [ebp+ebx*8+0]
                and     ebx, 0FF0000h
                xor     edx, ebx
                mov     ebx, [esp+arg_4]
                mov     ecx, [ebp+ecx*8+2]
                and     ecx, 0FF000000h
                xor     edx, ecx
                mov     ecx, esi
                add     edi, 10h
                xor     eax, [edi]
                xor     ebx, [edi+4]
                xor     ecx, [edi+8]
                xor     edx, [edi+0Ch]
                retn
sub_10013080    endp

; =============== S U B R O U T I N E =======================================
                db 3Eh dup(90h)
dword_10013300  dd 2 dup(0A56363C6h), 2 dup(847C7CF8h), 2 dup(997777EEh)
                dd 2 dup(8D7B7BF6h), 2 dup(0DF2F2FFh), 2 dup(0BD6B6BD6h)
                dd 2 dup(0B16F6FDEh), 2 dup(54C5C591h), 2 dup(50303060h)
                dd 2 dup(3010102h), 2 dup(0A96767CEh), 2 dup(7D2B2B56h)
                dd 2 dup(19FEFEE7h), 2 dup(62D7D7B5h), 2 dup(0E6ABAB4Dh)
                dd 2 dup(9A7676ECh), 2 dup(45CACA8Fh), 2 dup(9D82821Fh)
                dd 2 dup(40C9C989h), 2 dup(877D7DFAh), 2 dup(15FAFAEFh)
                dd 2 dup(0EB5959B2h), 2 dup(0C947478Eh), 2 dup(0BF0F0FBh)
                dd 2 dup(0ECADAD41h), 2 dup(67D4D4B3h), 2 dup(0FDA2A25Fh)
                dd 2 dup(0EAAFAF45h), 2 dup(0BF9C9C23h), 2 dup(0F7A4A453h)
                dd 2 dup(967272E4h), 2 dup(5BC0C09Bh), 2 dup(0C2B7B775h)
                dd 2 dup(1CFDFDE1h), 2 dup(0AE93933Dh), 2 dup(6A26264Ch)
                dd 2 dup(5A36366Ch), 2 dup(413F3F7Eh), 2 dup(2F7F7F5h)
                dd 2 dup(4FCCCC83h), 2 dup(5C343468h), 2 dup(0F4A5A551h)
                dd 2 dup(34E5E5D1h), 2 dup(8F1F1F9h), 2 dup(937171E2h)
                dd 2 dup(73D8D8ABh), 2 dup(53313162h), 2 dup(3F15152Ah)
                dd 2 dup(0C040408h), 2 dup(52C7C795h), 2 dup(65232346h)
                dd 2 dup(5EC3C39Dh), 2 dup(28181830h), 2 dup(0A1969637h)
                dd 2 dup(0F05050Ah), 2 dup(0B59A9A2Fh), 2 dup(907070Eh)
                dd 2 dup(36121224h), 2 dup(9B80801Bh), 2 dup(3DE2E2DFh)
                dd 2 dup(26EBEBCDh), 2 dup(6927274Eh), 2 dup(0CDB2B27Fh)
                dd 2 dup(9F7575EAh), 2 dup(1B090912h), 2 dup(9E83831Dh)
                dd 2 dup(742C2C58h), 2 dup(2E1A1A34h), 2 dup(2D1B1B36h)
                dd 2 dup(0B26E6EDCh), 2 dup(0EE5A5AB4h), 2 dup(0FBA0A05Bh)
                dd 2 dup(0F65252A4h), 2 dup(4D3B3B76h), 2 dup(61D6D6B7h)
                dd 2 dup(0CEB3B37Dh), 2 dup(7B292952h), 2 dup(3EE3E3DDh)
                dd 2 dup(712F2F5Eh), 2 dup(97848413h), 2 dup(0F55353A6h)
                dd 2 dup(68D1D1B9h), 2 dup(0)
dword_10013598  dd 2 dup(2CEDEDC1h), 2 dup(60202040h), 2 dup(1FFCFCE3h)
                dd 2 dup(0C8B1B179h), 2 dup(0ED5B5BB6h), 2 dup(0BE6A6AD4h)
                dd 2 dup(46CBCB8Dh), 2 dup(0D9BEBE67h), 2 dup(4B393972h)
                dd 2 dup(0DE4A4A94h), 2 dup(0D44C4C98h), 2 dup(0E85858B0h)
                dd 2 dup(4ACFCF85h), 2 dup(6BD0D0BBh), 2 dup(2AEFEFC5h)
                dd 2 dup(0E5AAAA4Fh), 2 dup(16FBFBEDh), 2 dup(0C5434386h)
                dd 2 dup(0D74D4D9Ah), 2 dup(55333366h), 2 dup(94858511h)
                dd 2 dup(0CF45458Ah), 2 dup(10F9F9E9h), 2 dup(6020204h)
                dd 2 dup(817F7FFEh), 2 dup(0F05050A0h), 2 dup(443C3C78h)
                dd 2 dup(0BA9F9F25h), 2 dup(0E3A8A84Bh), 2 dup(0F35151A2h)
                dd 2 dup(0FEA3A35Dh), 2 dup(0C0404080h), 2 dup(8A8F8F05h)
                dd 2 dup(0AD92923Fh), 2 dup(0BC9D9D21h), 2 dup(48383870h)
                dd 2 dup(4F5F5F1h), 2 dup(0DFBCBC63h), 2 dup(0C1B6B677h)
                dd 2 dup(75DADAAFh), 2 dup(63212142h), 2 dup(30101020h)
                dd 2 dup(1AFFFFE5h), 2 dup(0EF3F3FDh), 2 dup(6DD2D2BFh)
                dd 2 dup(4CCDCD81h), 2 dup(140C0C18h), 2 dup(35131326h)
                dd 2 dup(2FECECC3h), 2 dup(0E15F5FBEh), 2 dup(0A2979735h)
                dd 2 dup(0CC444488h), 2 dup(3917172Eh), 2 dup(57C4C493h)
                dd 2 dup(0F2A7A755h), 2 dup(827E7EFCh), 2 dup(473D3D7Ah)
                dd 2 dup(0AC6464C8h), 2 dup(0E75D5DBAh), 2 dup(2B191932h)
                dd 2 dup(957373E6h), 2 dup(0A06060C0h), 2 dup(98818119h)
                dd 2 dup(0D14F4F9Eh), 2 dup(7FDCDCA3h), 2 dup(66222244h)
                dd 2 dup(7E2A2A54h), 2 dup(0AB90903Bh), 2 dup(8388880Bh)
                dd 2 dup(0CA46468Ch), 2 dup(29EEEEC7h), 2 dup(0D3B8B86Bh)
                dd 2 dup(3C141428h), 2 dup(79DEDEA7h), 2 dup(0E25E5EBCh)
                dd 2 dup(1D0B0B16h), 2 dup(76DBDBADh), 2 dup(3BE0E0DBh)
                dd 2 dup(56323264h), 2 dup(4E3A3A74h), 2 dup(1E0A0A14h)
                dd 2 dup(0DB494992h), 2 dup(0A06060Ch), 2 dup(6C242448h)
                dd 2 dup(0E45C5CB8h), 2 dup(5DC2C29Fh), 2 dup(6ED3D3BDh)
                dd 2 dup(0EFACAC43h), 2 dup(0A66262C4h), 2 dup(0A8919139h)
                dd 2 dup(0A4959531h), 2 dup(37E4E4D3h), 2 dup(8B7979F2h)
                dd 2 dup(32E7E7D5h), 2 dup(43C8C88Bh), 2 dup(5937376Eh)
                dd 2 dup(0B76D6DDAh), 2 dup(8C8D8D01h), 2 dup(64D5D5B1h)
                dd 2 dup(0D24E4E9Ch), 2 dup(0E0A9A949h), 2 dup(0B46C6CD8h)
                dd 2 dup(0FA5656ACh), 2 dup(7F4F4F3h), 2 dup(25EAEACFh)
                dd 2 dup(0AF6565CAh), 2 dup(8E7A7AF4h), 2 dup(0E9AEAE47h)
                dd 2 dup(18080810h), 2 dup(0D5BABA6Fh), 2 dup(887878F0h)
                dd 2 dup(6F25254Ah), 2 dup(722E2E5Ch), 2 dup(241C1C38h)
                dd 2 dup(0F1A6A657h), 2 dup(0C7B4B473h), 2 dup(51C6C697h)
                dd 2 dup(23E8E8CBh), 2 dup(7CDDDDA1h), 2 dup(9C7474E8h)
                dd 2 dup(211F1F3Eh), 2 dup(0DD4B4B96h), 2 dup(0DCBDBD61h)
                dd 2 dup(868B8B0Dh), 2 dup(858A8A0Fh), 2 dup(907070E0h)
                dd 2 dup(423E3E7Ch), 2 dup(0C4B5B571h), 2 dup(0AA6666CCh)
                dd 2 dup(0D8484890h), 2 dup(5030306h), 2 dup(1F6F6F7h)
                dd 2 dup(120E0E1Ch), 2 dup(0A36161C2h), 2 dup(5F35356Ah)
                dd 2 dup(0F95757AEh), 2 dup(0D0B9B969h), 2 dup(91868617h)
                dd 2 dup(58C1C199h), 2 dup(271D1D3Ah), 2 dup(0B99E9E27h)
                dd 2 dup(38E1E1D9h), 2 dup(13F8F8EBh), 2 dup(0B398982Bh)
                dd 2 dup(33111122h), 2 dup(0BB6969D2h), 2 dup(70D9D9A9h)
                dd 2 dup(898E8E07h), 2 dup(0A7949433h), 2 dup(0B69B9B2Dh)
                dd 2 dup(221E1E3Ch), 2 dup(92878715h), 2 dup(20E9E9C9h)
                dd 2 dup(49CECE87h), 2 dup(0FF5555AAh), 2 dup(78282850h)
                dd 2 dup(7ADFDFA5h), 2 dup(8F8C8C03h), 2 dup(0F8A1A159h)
                dd 2 dup(80898909h), 2 dup(170D0D1Ah), 2 dup(0DABFBF65h)
                dd 2 dup(31E6E6D7h), 2 dup(0C6424284h), 2 dup(0B86868D0h)
                dd 2 dup(0C3414182h), 2 dup(0B0999929h), 2 dup(772D2D5Ah)
                dd 2 dup(110F0F1Eh), 2 dup(0CBB0B07Bh), 2 dup(0FC5454A8h)
                dd 2 dup(0D6BBBB6Dh), 2 dup(3A16162Ch), 1, 2, 4, 8, 10h
                dd 20h, 40h, 80h, 1Bh, 36h, 6 dup(0)

; =============== S U B R O U T I N E =======================================

f_AES_encrypt   proc near               ; CODE XREF: decryptv1+C4p

var_14          = dword ptr -14h
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                push    ebp
                push    ebx
                push    esi
                push    edi
                mov     esi, [esp+10h+arg_0]
                mov     edi, [esp+10h+arg_8]
                mov     eax, esp
                sub     esp, 18h
                and     esp, 0FFFFFFC0h
                add     esp, 4
                mov     [esp+24h+var_14], eax
                call    $+5
                pop     ebp
                lea     ebp, [ebp-869h]
                mov     eax, [esi]
                mov     ebx, [esi+4]
                mov     ecx, [esi+8]
                mov     edx, [esi+0Ch]
                call    sub_10013080
                mov     esp, [esp+24h+var_14]
                mov     esi, [esp+10h+arg_4]
                mov     [esi], eax
                mov     [esi+4], ebx
                mov     [esi+8], ecx
                mov     [esi+0Ch], edx
                pop     edi
                pop     esi
                pop     ebx
                pop     ebp
                retn
f_AES_encrypt   endp


f_calc_reg_abcd    proc near               ; CODE XREF: AES_decrypt+5Fp
                                        ; AES_cbc_encrypt+31Fp ...

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch
arg_C           = dword ptr  10h

                mov     [esp+arg_8], edi
                xor     eax, [edi]
                xor     ebx, [edi+4]
                xor     ecx, [edi+8]
                xor     edx, [edi+0Ch]
                mov     esi, [edi+0F0h]
                lea     esi, [esi+esi-2]
                lea     esi, [edi+esi*8]
                mov     [esp+arg_C], esi

loc_10013BB8:                           ; CODE XREF: sub_10013B98+F5j
                mov     esi, eax
                and     esi, 0FFh
                mov     esi, [ebp+esi*8+0]
                movzx   edi, dh
                xor     esi, [ebp+edi*8+3]
                mov     edi, ecx
                shr     edi, 10h
                and     edi, 0FFh
                xor     esi, [ebp+edi*8+2]
                mov     edi, ebx
                shr     edi, 18h
                xor     esi, [ebp+edi*8+1]
                mov     [esp+arg_0], esi
                mov     esi, ebx
                and     esi, 0FFh
                mov     esi, [ebp+esi*8+0]
                movzx   edi, ah
                xor     esi, [ebp+edi*8+3]
                mov     edi, edx
                shr     edi, 10h
                and     edi, 0FFh
                xor     esi, [ebp+edi*8+2]
                mov     edi, ecx
                shr     edi, 18h
                xor     esi, [ebp+edi*8+1]
                mov     [esp+arg_4], esi
                mov     esi, ecx
                and     esi, 0FFh
                mov     esi, [ebp+esi*8+0]
                movzx   edi, bh
                xor     esi, [ebp+edi*8+3]
                mov     edi, eax
                shr     edi, 10h
                and     edi, 0FFh
                xor     esi, [ebp+edi*8+2]
                mov     edi, edx
                shr     edi, 18h
                xor     esi, [ebp+edi*8+1]
                mov     edi, [esp+arg_8]
                and     edx, 0FFh
                mov     edx, [ebp+edx*8+0]
                movzx   ecx, ch
                xor     edx, [ebp+ecx*8+3]
                mov     ecx, esi
                shr     ebx, 10h
                and     ebx, 0FFh
                xor     edx, [ebp+ebx*8+2]
                mov     ebx, [esp+arg_4]
                shr     eax, 18h
                xor     edx, [ebp+eax*8+1]
                mov     eax, [esp+arg_0]
                add     edi, 10h
                xor     eax, [edi]
                xor     ebx, [edi+4]
                xor     ecx, [edi+8]
                xor     edx, [edi+0Ch]
                cmp     edi, [esp+arg_C]
                mov     [esp+arg_8], edi
                jb      loc_10013BB8
                mov     esi, eax
                and     esi, 0FFh
                movzx   esi, byte ptr [ebp+esi+800h]
                movzx   edi, dh
                movzx   edi, byte ptr [ebp+edi+800h]
                shl     edi, 8
                xor     esi, edi
                mov     edi, ecx
                shr     edi, 10h
                and     edi, 0FFh
                movzx   edi, byte ptr [ebp+edi+800h]
                shl     edi, 10h
                xor     esi, edi
                mov     edi, ebx
                shr     edi, 18h
                movzx   edi, byte ptr [ebp+edi+800h]
                shl     edi, 18h
                xor     esi, edi
                mov     [esp+arg_0], esi
                mov     esi, ebx
                and     esi, 0FFh
                movzx   esi, byte ptr [ebp+esi+800h]
                movzx   edi, ah
                movzx   edi, byte ptr [ebp+edi+800h]
                shl     edi, 8
                xor     esi, edi
                mov     edi, edx
                shr     edi, 10h
                and     edi, 0FFh
                movzx   edi, byte ptr [ebp+edi+800h]
                shl     edi, 10h
                xor     esi, edi
                mov     edi, ecx
                shr     edi, 18h
                movzx   edi, byte ptr [ebp+edi+800h]
                shl     edi, 18h
                xor     esi, edi
                mov     [esp+arg_4], esi
                mov     esi, ecx
                and     esi, 0FFh
                movzx   esi, byte ptr [ebp+esi+800h]
                movzx   edi, bh
                movzx   edi, byte ptr [ebp+edi+800h]
                shl     edi, 8
                xor     esi, edi
                mov     edi, eax
                shr     edi, 10h
                and     edi, 0FFh
                movzx   edi, byte ptr [ebp+edi+800h]
                shl     edi, 10h
                xor     esi, edi
                mov     edi, edx
                shr     edi, 18h
                movzx   edi, byte ptr [ebp+edi+800h]
                shl     edi, 18h
                xor     esi, edi
                mov     edi, [esp+arg_8]
                and     edx, 0FFh
                movzx   edx, byte ptr [ebp+edx+800h]
                movzx   ecx, ch
                movzx   ecx, byte ptr [ebp+ecx+800h]
                shl     ecx, 8
                xor     edx, ecx
                mov     ecx, esi
                shr     ebx, 10h
                and     ebx, 0FFh
                movzx   ebx, byte ptr [ebp+ebx+800h]
                shl     ebx, 10h
                xor     edx, ebx
                mov     ebx, [esp+arg_4]
                shr     eax, 18h
                movzx   eax, byte ptr [ebp+eax+800h]
                shl     eax, 18h
                xor     edx, eax
                mov     eax, [esp+arg_0]
                add     edi, 10h
                xor     eax, [edi]
                xor     ebx, [edi+4]
                xor     ecx, [edi+8]
                xor     edx, [edi+0Ch]
                retn
f_calc_reg_abcd    endp
                db 23h dup(90h)
                dd 2 dup(50A7F451h), 2 dup(5365417Eh), 2 dup(0C3A4171Ah)
                dd 2 dup(965E273Ah), 2 dup(0CB6BAB3Bh), 2 dup(0F1459D1Fh)
                dd 2 dup(0AB58FAACh), 2 dup(9303E34Bh), 2 dup(55FA3020h)
                dd 2 dup(0F66D76ADh), 2 dup(9176CC88h), 2 dup(254C02F5h)
                dd 2 dup(0FCD7E54Fh), 2 dup(0D7CB2AC5h), 2 dup(80443526h)
                dd 2 dup(8FA362B5h), 2 dup(495AB1DEh), 2 dup(671BBA25h)
                dd 2 dup(980EEA45h), 2 dup(0E1C0FE5Dh), 2 dup(2752FC3h)
                dd 2 dup(12F04C81h), 2 dup(0A397468Dh), 2 dup(0C6F9D36Bh)
                dd 2 dup(0E75F8F03h), 2 dup(959C9215h), 2 dup(0EB7A6DBFh)
                dd 2 dup(0DA595295h), 2 dup(2D83BED4h), 2 dup(0D3217458h)
                dd 2 dup(2969E049h), 2 dup(44C8C98Eh), 2 dup(6A89C275h)
                dd 2 dup(78798EF4h), 2 dup(6B3E5899h), 2 dup(0DD71B927h)
                dd 2 dup(0B64FE1BEh), 2 dup(17AD88F0h), 2 dup(66AC20C9h)
                dd 2 dup(0B43ACE7Dh), 2 dup(184ADF63h), 2 dup(82311AE5h)
                dd 2 dup(60335197h), 2 dup(457F5362h), 2 dup(0E07764B1h)
                dd 2 dup(84AE6BBBh), 2 dup(1CA081FEh), 2 dup(942B08F9h)
                dd 2 dup(58684870h), 2 dup(19FD458Fh), 2 dup(876CDE94h)
                dd 2 dup(0B7F87B52h), 2 dup(23D373ABh), 2 dup(0E2024B72h)
                dd 2 dup(578F1FE3h), 2 dup(2AAB5566h), 2 dup(728EBB2h)
                dd 2 dup(3C2B52Fh), 2 dup(9A7BC586h), 2 dup(0A50837D3h)
                dd 2 dup(0F2872830h), 2 dup(0B2A5BF23h), 2 dup(0BA6A0302h)
                dd 2 dup(5C8216EDh), 2 dup(2B1CCF8Ah), 2 dup(92B479A7h)
                dd 2 dup(0F0F207F3h), 2 dup(0A1E2694Eh), 2 dup(0CDF4DA65h)
                dd 2 dup(0D5BE0506h), 2 dup(1F6234D1h), 2 dup(8AFEA6C4h)
                dd 2 dup(9D532E34h), 2 dup(0A055F3A2h), 2 dup(32E18A05h)
                dd 2 dup(75EBF6A4h), 2 dup(39EC830Bh), 2 dup(0AAEF6040h)
                dd 2 dup(69F715Eh), 2 dup(51106EBDh), 2 dup(0F98A213Eh)
                dd 2 dup(3D06DD96h), 2 dup(0AE053EDDh), 2 dup(46BDE64Dh)
                dd 2 dup(0B58D5491h), 2 dup(55DC471h), 2 dup(6FD40604h)
                dd 2 dup(0FF155060h), 2 dup(24FB9819h), 2 dup(97E9BDD6h)
                dd 2 dup(0CC434089h), 2 dup(779ED967h), 2 dup(0BD42E8B0h)
                dd 2 dup(888B8907h), 2 dup(385B19E7h), 2 dup(0DBEEC879h)
                dd 2 dup(470A7CA1h), 2 dup(0E90F427Ch), 2 dup(0C91E84F8h)
                dd 2 dup(0)
                dd 2 dup(83868009h), 2 dup(48ED2B32h), 2 dup(0AC70111Eh)
                dd 2 dup(4E725A6Ch), 2 dup(0FBFF0EFDh), 2 dup(5638850Fh)
                dd 2 dup(1ED5AE3Dh), 2 dup(27392D36h), 2 dup(64D90F0Ah)
                dd 2 dup(21A65C68h), 2 dup(0D1545B9Bh), 2 dup(3A2E3624h)
                dd 2 dup(0B1670A0Ch), 2 dup(0FE75793h), 2 dup(0D296EEB4h)
                dd 2 dup(9E919B1Bh), 2 dup(4FC5C080h), 2 dup(0A220DC61h)
                dd 2 dup(694B775Ah), 2 dup(161A121Ch), 2 dup(0ABA93E2h)
                dd 2 dup(0E52AA0C0h), 2 dup(43E0223Ch), 2 dup(1D171B12h)
                dd 2 dup(0B0D090Eh), 2 dup(0ADC78BF2h), 2 dup(0B9A8B62Dh)
                dd 2 dup(0C8A91E14h), 2 dup(8519F157h), 2 dup(4C0775AFh)
                dd 2 dup(0BBDD99EEh), 2 dup(0FD607FA3h), 2 dup(9F2601F7h)
                dd 2 dup(0BCF5725Ch), 2 dup(0C53B6644h), 2 dup(347EFB5Bh)
                dd 2 dup(7629438Bh), 2 dup(0DCC623CBh), 2 dup(68FCEDB6h)
                dd 2 dup(63F1E4B8h), 2 dup(0CADC31D7h), 2 dup(10856342h)
                dd 2 dup(40229713h), 2 dup(2011C684h), 2 dup(7D244A85h)
                dd 2 dup(0F83DBBD2h), 2 dup(1132F9AEh), 2 dup(6DA129C7h)
                dd 2 dup(4B2F9E1Dh), 2 dup(0F330B2DCh), 2 dup(0EC52860Dh)
                dd 2 dup(0D0E3C177h), 2 dup(6C16B32Bh), 2 dup(99B970A9h)
                dd 2 dup(0FA489411h), 2 dup(2264E947h), 2 dup(0C48CFCA8h)
                dd 2 dup(1A3FF0A0h), 2 dup(0D82C7D56h), 2 dup(0EF903322h)
                dd 2 dup(0C74E4987h), 2 dup(0C1D138D9h), 2 dup(0FEA2CA8Ch)
                dd 2 dup(360BD498h), 2 dup(0CF81F5A6h), 2 dup(28DE7AA5h)
                dd 2 dup(268EB7DAh), 2 dup(0A4BFAD3Fh), 2 dup(0E49D3A2Ch)
                dd 2 dup(0D927850h), 2 dup(9BCC5F6Ah), 2 dup(62467E54h)
                dd 2 dup(0C2138DF6h), 2 dup(0E8B8D890h), 2 dup(5EF7392Eh)
                dd 2 dup(0F5AFC382h), 2 dup(0BE805D9Fh), 2 dup(7C93D069h)
                dd 2 dup(0A92DD56Fh), 2 dup(0B31225CFh), 2 dup(3B99ACC8h)
                dd 2 dup(0A77D1810h), 2 dup(6E639CE8h), 2 dup(7BBB3BDBh)
                dd 2 dup(97826CDh), 2 dup(0F418596Eh), 2 dup(1B79AECh)
                dd 2 dup(0A89A4F83h), 2 dup(656E95E6h), 2 dup(7EE6FFAAh)
                dd 2 dup(8CFBC21h), 2 dup(0E6E815EFh), 2 dup(0D99BE7BAh)
                dd 2 dup(0CE366F4Ah), 2 dup(0D4099FEAh), 2 dup(0D67CB029h)
                dd 2 dup(0AFB2A431h), 2 dup(31233F2Ah), 2 dup(3094A5C6h)
                dd 2 dup(0C066A235h), 2 dup(37BC4E74h), 2 dup(0A6CA82FCh)
                dd 2 dup(0B0D090E0h), 2 dup(15D8A733h), 2 dup(4A9804F1h)
                dd 2 dup(0F7DAEC41h), 2 dup(0E50CD7Fh), 2 dup(2FF69117h)
                dd 2 dup(8DD64D76h), 2 dup(4DB0EF43h), 2 dup(544DAACCh)
                dd 2 dup(0DF0496E4h), 2 dup(0E3B5D19Eh), 2 dup(1B886A4Ch)
                dd 2 dup(0B81F2CC1h), 2 dup(7F516546h), 2 dup(4EA5E9Dh)
                dd 2 dup(5D358C01h), 2 dup(737487FAh), 2 dup(2E410BFBh)
                dd 2 dup(5A1D67B3h), 2 dup(52D2DB92h), 2 dup(335610E9h)
                dd 2 dup(1347D66Dh), 2 dup(8C61D79Ah), 2 dup(7A0CA137h)
                dd 2 dup(8E14F859h), 2 dup(893C13EBh), 2 dup(0EE27A9CEh)
                dd 2 dup(35C961B7h), 2 dup(0EDE51CE1h), 2 dup(3CB1477Ah)
                dd 2 dup(59DFD29Ch), 2 dup(3F73F255h), 2 dup(79CE1418h)
                dd 2 dup(0BF37C773h), 2 dup(0EACDF753h), 2 dup(5BAAFD5Fh)
                dd 2 dup(146F3DDFh), 2 dup(86DB4478h), 2 dup(81F3AFCAh)
                dd 2 dup(3EC468B9h), 2 dup(2C342438h), 2 dup(5F40A3C2h)
                dd 2 dup(72C31D16h), 2 dup(0C25E2BCh), 2 dup(8B493C28h)
                dd 2 dup(41950DFFh), 2 dup(7101A839h), 2 dup(0DEB30C08h)
                dd 2 dup(9CE4B4D8h), 2 dup(90C15664h), 2 dup(6184CB7Bh)
                dd 2 dup(70B632D5h), 2 dup(745C6C48h), 2 dup(4257B8D0h)
                dd 0D56A0952h, 38A53630h, 9EA340BFh, 0FBD7F381h, 8239E37Ch
                dd 87FF2F9Bh, 44438E34h, 0CBE9DEC4h, 32947B54h, 3D23C2A6h
                dd 0B954CEEh, 4EC3FA42h, 66A12E08h, 0B224D928h, 49A25B76h
                dd 25D18B6Dh, 64F6F872h, 16986886h, 0CC5CA4D4h, 92B6655Dh
                dd 5048706Ch, 0DAB9EDFDh, 5746155Eh, 849D8DA7h, 0ABD890h
                dd 0AD3BC8Ch, 558E4F7h, 645B3B8h, 8F1E2CD0h, 20F3FCAh
                dd 3BDAFC1h, 6B8A1301h, 4111913Ah, 0EADC674Fh, 0CECFF297h
                dd 73E6B4F0h, 2274AC96h, 8535ADE7h, 0E837F9E2h, 6EDF751Ch
                dd 711AF147h, 89C5291Dh, 0E62B76Fh, 1BBE18AAh, 4B3E56FCh
                dd 2079D2C6h, 0FEC0DB9Ah, 0F45ACD78h, 33A8DD1Fh, 31C70788h
                dd 591012B1h, 5FEC8027h, 0A97F5160h, 0D4AB519h, 9F7AE52Dh
                dd 0EF9CC993h, 4D3BE0A0h, 0B0F52AAEh, 3CBBEBC8h, 61995383h
                dd 7E042B17h, 26D677BAh, 631469E1h, 7D0C2155h

; =============== S U B R O U T I N E =======================================
; c by 1000f121

f_AES_decrypt    proc near               ; CODE XREF: sub_1000AE70+C0p
                                        ; sub_1000AFB0+30p ...

var_14          = dword ptr -14h
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                push    ebp
                push    ebx
                push    esi
                push    edi
                mov     esi, [esp+10h+arg_0]
                mov     edi, [esp+10h+arg_8]
                mov     eax, esp
                sub     esp, 18h
                and     esp, 0FFFFFFC0h
                add     esp, 4
                mov     [esp+24h+var_14], eax
                call    $+5
                pop     ebp
                lea     ebp, [ebp-929h]
                lea     ebp, [ebp+880h]
                mov     eax, [ebp-80h]
                mov     ebx, [ebp-60h]
                mov     ecx, [ebp-40h]
                mov     edx, [ebp-20h]
                mov     eax, [ebp+0]
                mov     ebx, [ebp+20h]
                mov     ecx, [ebp+40h]
                mov     edx, [ebp+60h]
                lea     ebp, [ebp-880h]
                mov     eax, [esi]
                mov     ebx, [esi+4]
                mov     ecx, [esi+8]
                mov     edx, [esi+0Ch]
                call    f_calc_reg_abcd ; para  eax ebx ecx edx edi
                mov     esp, [esp+24h+var_14]
                mov     esi, [esp+10h+arg_4]
                mov     [esi], eax      ; 67452301
                mov     [esi+4], ebx    ; efcdab89
                mov     [esi+8], ecx
                mov     [esi+0Ch], edx
                pop     edi
                pop     esi
                pop     ebx
                pop     ebp
                retn
f_AES_decrypt    endp

f_AES_cbc_encrypt proc near             ; CODE XREF: decryptv1+136p

var_148         = byte ptr -148h
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch
arg_C           = dword ptr  10h
arg_10          = dword ptr  14h
arg_14          = dword ptr  18h
arg_18          = byte ptr  1Ch
arg_28          = byte ptr  2Ch
arg_118         = dword ptr  11Ch

                push    ebp
                push    ebx
                push    esi
                push    edi
                mov     ecx, [esp+10h+arg_8]
                cmp     ecx, 0
                jz      loc_10014945
                call    $+5
                pop     ebp
                pushf
                cld
                cmp     [esp+14h+arg_14], 0
                jz      loc_10014990
                lea     ebp, [ebp-1495h]
                lea     edi, [esp+14h+var_148]
                and     edi, 0FFFFFFC0h
                mov     eax, ebp
                lea     ebx, [ebp+800h]
                mov     edx, edi
                and     eax, 0FFFh
                and     ebx, 0FFFh
                and     edx, 0FFFh
                cmp     edx, ebx
                jb      loc_100147E5
                sub     edx, ebx
                sub     edi, edx
                jmp     loc_100147F8
; ---------------------------------------------------------------------------

loc_100147E5:                           ; CODE XREF: AES_cbc_encrypt+5Aj
                sub     edx, eax
                and     edx, 0FFFh
                add     edx, 140h
                sub     edi, edx
                nop
                nop
                nop

loc_100147F8:                           ; CODE XREF: AES_cbc_encrypt+64j
                mov     eax, [esp+14h+arg_0]
                mov     ebx, [esp+14h+arg_4]
                mov     edx, [esp+14h+arg_C]
                mov     esi, [esp+14h+arg_10]
                xchg    esp, edi
                add     esp, 4
                mov     [esp+10h], edi
                mov     [esp+10h+arg_0], eax
                mov     [esp+10h+arg_4], ebx
                mov     [esp+10h+arg_8], ecx
                mov     [esp+10h+arg_C], edx
                mov     [esp+10h+arg_10], esi
                mov     [esp+10h+arg_118], 0
                mov     ebx, edx
                mov     ecx, 3Dh
                sub     ebx, ebp
                mov     esi, edx
                and     ebx, 0FFFh
                lea     edi, [esp+10h+arg_28]
                cmp     ebx, 800h
                jb      loc_10014860
                cmp     ebx, 0F0Ch
                jb      loc_10014868

loc_10014860:                           ; CODE XREF: AES_cbc_encrypt+D2j
                mov     [esp+10h+arg_C], edi
                mov     esi, esi
                rep movsd

loc_10014868:                           ; CODE XREF: AES_cbc_encrypt+DEj
                mov     esi, eax
                mov     edi, 10h
                nop

loc_10014870:                           ; CODE XREF: AES_cbc_encrypt+107j
                mov     eax, [ebp+0]
                mov     ebx, [ebp+20h]
                mov     ecx, [ebp+40h]
                mov     edx, [ebp+60h]
                lea     ebp, [ebp+80h]
                dec     edi
                jnz     loc_10014870
                sub     ebp, 800h
                mov     ecx, [esp+10h+arg_8]
                mov     edi, [esp+10h+arg_10]
                test    ecx, 0FFFFFFF0h
                jz      loc_1001494C
                mov     eax, [edi]
                mov     ebx, [edi+4]

loc_100148A8:                           ; CODE XREF: AES_cbc_encrypt+17Bj
                                        ; AES_cbc_encrypt+20Ej
                mov     ecx, [edi+8]
                mov     edx, [edi+0Ch]
                xor     eax, [esi]
                xor     ebx, [esi+4]
                xor     ecx, [esi+8]
                xor     edx, [esi+0Ch]
                mov     edi, [esp+10h+arg_C]
                call    sub_10013080
                mov     esi, [esp+10h+arg_0]
                mov     edi, [esp+10h+arg_4]
                mov     [edi], eax
                mov     [edi+4], ebx
                mov     [edi+8], ecx
                mov     [edi+0Ch], edx
                mov     ecx, [esp+10h+arg_8]
                lea     esi, [esi+10h]
                mov     [esp+10h+arg_0], esi
                lea     edx, [edi+10h]
                mov     [esp+10h+arg_4], edx
                sub     ecx, 10h
                test    ecx, 0FFFFFFF0h
                mov     [esp+10h+arg_8], ecx
                jnz     loc_100148A8
                test    ecx, 0Fh
                jnz     loc_1001494C
                mov     esi, [esp+10h+arg_10]
                mov     ecx, [edi+8]
                mov     edx, [edi+0Ch]
                mov     [esi], eax
                mov     [esi+4], ebx
                mov     [esi+8], ecx
                mov     [esi+0Ch], edx
                cmp     [esp+10h+arg_118], 0
                mov     edi, [esp+10h+arg_C]
                jz      loc_10014940
                mov     ecx, 3Ch
                xor     eax, eax
                nop
                nop
                mov     esi, esi
                rep stosd

loc_10014940:                           ; CODE XREF: AES_cbc_encrypt+1B1j
                mov     esp, [esp+10h]
                popf

loc_10014945:                           ; CODE XREF: AES_cbc_encrypt+Ej
                pop     edi
                pop     esi
                pop     ebx
                pop     ebp
                retn
; ---------------------------------------------------------------------------
                pushf
                nop

loc_1001494C:                           ; CODE XREF: AES_cbc_encrypt+121j
                                        ; AES_cbc_encrypt+187j
                mov     eax, edi
                mov     edi, [esp+10h+arg_4]
                push    eax
                mov     ebx, 10h
                sub     ebx, ecx
                cmp     edi, esi
                jz      loc_1001496D
                nop
                nop
                mov     esi, esi
                rep movsb
                jmp     loc_10014970
; ---------------------------------------------------------------------------

loc_1001496D:                           ; CODE XREF: AES_cbc_encrypt+1E0j
                lea     edi, [ecx+edi]

loc_10014970:                           ; CODE XREF: AES_cbc_encrypt+1ECj
                mov     ecx, ebx
                xor     eax, eax
                mov     esi, esi
                rep stosb
                pop     edi
                mov     esi, [esp+10h+arg_4]
                mov     eax, [edi]
                mov     ebx, [edi+4]
                mov     [esp+10h+arg_8], 10h
                jmp     loc_100148A8
; ---------------------------------------------------------------------------
                align 10h

loc_10014990:                           ; CODE XREF: AES_cbc_encrypt+24j
                lea     ebp, [ebp-995h]
                lea     edi, [esp+14h+var_148]
                and     edi, 0FFFFFFC0h
                mov     eax, ebp
                lea     ebx, [ebp+900h]
                mov     edx, edi
                and     eax, 0FFFh
                and     ebx, 0FFFh
                and     edx, 0FFFh
                cmp     edx, ebx
                jb      loc_100149CF
                sub     edx, ebx
                sub     edi, edx
                jmp     loc_100149E0
; ---------------------------------------------------------------------------

loc_100149CF:                           ; CODE XREF: AES_cbc_encrypt+244j
                sub     edx, eax
                and     edx, 0FFFh
                add     edx, 140h
                sub     edi, edx
                nop

loc_100149E0:                           ; CODE XREF: AES_cbc_encrypt+24Ej
                mov     eax, [esp+14h+arg_0]
                mov     ebx, [esp+14h+arg_4]
                mov     edx, [esp+14h+arg_C]
                mov     esi, [esp+14h+arg_10]
                xchg    esp, edi
                add     esp, 4
                mov     [esp+10h], edi
                mov     [esp+10h+arg_0], eax
                mov     [esp+10h+arg_4], ebx
                mov     [esp+10h+arg_8], ecx
                mov     [esp+10h+arg_C], edx
                mov     [esp+10h+arg_10], esi
                mov     [esp+10h+arg_118], 0
                mov     ebx, edx
                mov     ecx, 3Dh
                sub     ebx, ebp
                mov     esi, edx
                and     ebx, 0FFFh
                lea     edi, [esp+10h+arg_28]
                cmp     ebx, 900h
                jb      loc_10014A48
                cmp     ebx, 0F0Ch
                jb      loc_10014A50

loc_10014A48:                           ; CODE XREF: AES_cbc_encrypt+2BAj
                mov     [esp+10h+arg_C], edi
                mov     esi, esi
                rep movsd

loc_10014A50:                           ; CODE XREF: AES_cbc_encrypt+2C6j
                mov     esi, eax
                mov     edi, 12h
                nop

loc_10014A58:                           ; CODE XREF: AES_cbc_encrypt+2EFj
                mov     eax, [ebp+0]
                mov     ebx, [ebp+20h]
                mov     ecx, [ebp+40h]
                mov     edx, [ebp+60h]
                lea     ebp, [ebp+80h]
                dec     edi
                jnz     loc_10014A58
                sub     ebp, 900h
                cmp     esi, [esp+10h+arg_4]
                jz      loc_10014B3C
                mov     edi, [esp+10h+arg_10]
                mov     [esp+10h+arg_14], edi
                nop
                nop
                nop

loc_10014A8C:                           ; CODE XREF: AES_cbc_encrypt+36Cj
                mov     eax, [esi]
                mov     ebx, [esi+4]
                mov     ecx, [esi+8]
                mov     edx, [esi+0Ch]
                mov     edi, [esp+10h+arg_C]
                call    f_calc_reg_abcd
                mov     edi, [esp+10h+arg_14]
                mov     esi, [esp+10h+arg_8]
                xor     eax, [edi]
                xor     ebx, [edi+4]
                xor     ecx, [edi+8]
                xor     edx, [edi+0Ch]
                sub     esi, 10h
                jb      loc_10014B14
                mov     [esp+10h+arg_8], esi
                mov     esi, [esp+10h+arg_0]
                mov     edi, [esp+10h+arg_4]
                mov     [edi], eax
                mov     [edi+4], ebx
                mov     [edi+8], ecx
                mov     [edi+0Ch], edx
                mov     [esp+10h+arg_14], esi
                lea     esi, [esi+10h]
                mov     [esp+10h+arg_0], esi
                lea     edi, [edi+10h]
                mov     [esp+10h+arg_4], edi
                jnz     loc_10014A8C
                mov     edi, [esp+10h+arg_14]

loc_10014AF2:                           ; CODE XREF: AES_cbc_encrypt+3B8j
                mov     esi, [esp+10h+arg_10]
                mov     eax, [edi]
                mov     ebx, [edi+4]
                mov     ecx, [edi+8]
                mov     edx, [edi+0Ch]
                mov     [esi], eax
                mov     [esi+4], ebx
                mov     [esi+8], ecx
                mov     [esi+0Ch], edx
                jmp     loc_10014BE0
; ---------------------------------------------------------------------------
                align 4

loc_10014B14:                           ; CODE XREF: AES_cbc_encrypt+33Dj
                lea     edi, [esp+10h+arg_18]
                mov     [edi], eax
                mov     [edi+4], ebx
                mov     [edi+8], ecx
                mov     [edi+0Ch], edx
                lea     ecx, [esi+10h]
                mov     esi, edi
                mov     edi, [esp+10h+arg_4]
                mov     esi, esi
                rep movsb
                mov     edi, [esp+10h+arg_0]
                jmp     loc_10014AF2
; ---------------------------------------------------------------------------
                align 4

loc_10014B3C:                           ; CODE XREF: AES_cbc_encrypt+2FFj
                                        ; AES_cbc_encrypt+441j
                lea     edi, [esp+10h+arg_18]
                mov     eax, [esi]
                mov     ebx, [esi+4]
                mov     ecx, [esi+8]
                mov     edx, [esi+0Ch]
                mov     [edi], eax
                mov     [edi+4], ebx
                mov     [edi+8], ecx
                mov     [edi+0Ch], edx
                mov     edi, [esp+10h+arg_C]
                call    f_calc_reg_abcd
                mov     edi, [esp+10h+arg_10]
                mov     esi, [esp+10h+arg_4]
                xor     eax, [edi]
                xor     ebx, [edi+4]
                xor     ecx, [edi+8]
                xor     edx, [edi+0Ch]
                mov     [esi], eax
                mov     [esi+4], ebx
                mov     [esi+8], ecx
                mov     [esi+0Ch], edx
                lea     esi, [esi+10h]
                mov     [esp+10h+arg_4], esi
                lea     esi, [esp+10h+arg_18]
                mov     eax, [esi]
                mov     ebx, [esi+4]
                mov     ecx, [esi+8]
                mov     edx, [esi+0Ch]
                mov     [edi], eax
                mov     [edi+4], ebx
                mov     [edi+8], ecx
                mov     [edi+0Ch], edx
                mov     esi, [esp+10h+arg_0]
                lea     esi, [esi+10h]
                mov     [esp+10h+arg_0], esi
                mov     ecx, [esp+10h+arg_8]
                sub     ecx, 10h
                jb      loc_10014BC8
                mov     [esp+10h+arg_8], ecx
                jnz     loc_10014B3C
                jmp     loc_10014BE0
; ---------------------------------------------------------------------------

loc_10014BC8:                           ; CODE XREF: AES_cbc_encrypt+437j
                mov     edi, [esp+10h+arg_4]
                lea     esi, [esp+10h+arg_18]
                lea     edi, [ecx+edi]
                lea     esi, [ecx+esi+10h]
                neg     ecx
                mov     esi, esi
                rep movsb
                nop
                nop
                nop

loc_10014BE0:                           ; CODE XREF: AES_cbc_encrypt+390j
                                        ; AES_cbc_encrypt+447j
                cmp     [esp+10h+arg_118], 0
                mov     edi, [esp+10h+arg_C]
                jz      loc_10014C00
                mov     ecx, 3Ch
                xor     eax, eax
                mov     esi, esi
                rep stosd

loc_10014C00:                           ; CODE XREF: AES_cbc_encrypt+473j
                mov     esp, [esp+10h]
                popf
                pop     edi
                pop     esi
                pop     ebx
                pop     ebp
                retn
f_AES_cbc_encrypt endp

f_AES_set_encrypt_key proc near         ; CODE XREF: decryptv1+AEp
                                        ; AES_set_decrypt_key+1Dp

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                push    ebp
                push    ebx
                push    esi
                push    edi
                mov     esi, [esp+10h+arg_0]
                mov     edi, [esp+10h+arg_8]
                test    esi, 0FFFFFFFFh
                jz      loc_10014EDF
                test    edi, 0FFFFFFFFh
                jz      loc_10014EDF
                call    $+5
                pop     ebp
                lea     ebp, [ebp-1933h]
                mov     ecx, [esp+10h+arg_4]
                cmp     ecx, 80h
                jz      loc_10014C6C
                cmp     ecx, 0C0h
                jz      loc_10014D0D
                cmp     ecx, 100h
                jz      loc_10014DCA
                mov     eax, 0FFFFFFFEh
                jmp     loc_10014EE4
; ---------------------------------------------------------------------------

loc_10014C6C:                           ; CODE XREF: AES_set_encrypt_key+3Aj
                mov     eax, [esi]
                mov     ebx, [esi+4]
                mov     ecx, [esi+8]
                mov     edx, [esi+0Ch]
                mov     [edi], eax
                mov     [edi+4], ebx
                mov     [edi+8], ecx
                mov     [edi+0Ch], edx
                xor     ecx, ecx
                jmp     loc_10014C91
; ---------------------------------------------------------------------------
                align 4

loc_10014C8C:                           ; CODE XREF: AES_set_encrypt_key+EFj
                mov     eax, [edi]
                mov     edx, [edi+0Ch]

loc_10014C91:                           ; CODE XREF: AES_set_encrypt_key+7Aj
                movzx   esi, dl
                mov     ebx, [ebp+esi*8+2]
                movzx   esi, dh
                and     ebx, 0FF000000h
                xor     eax, ebx
                mov     ebx, [ebp+esi*8+2]
                shr     edx, 10h
                and     ebx, 0FFh
                movzx   esi, dl
                xor     eax, ebx
                mov     ebx, [ebp+esi*8+0]
                movzx   esi, dh
                and     ebx, 0FF00h
                xor     eax, ebx
                mov     ebx, [ebp+esi*8+0]
                and     ebx, 0FF0000h
                xor     eax, ebx
                xor     eax, [ebp+ecx*4+800h]
                mov     [edi+10h], eax
                xor     eax, [edi+4]
                mov     [edi+14h], eax
                xor     eax, [edi+8]
                mov     [edi+18h], eax
                xor     eax, [edi+0Ch]
                mov     [edi+1Ch], eax
                inc     ecx
                add     edi, 10h
                cmp     ecx, 0Ah
                jl      loc_10014C8C
                mov     dword ptr [edi+50h], 0Ah
                xor     eax, eax
                jmp     loc_10014EE4
; ---------------------------------------------------------------------------

loc_10014D0D:                           ; CODE XREF: AES_set_encrypt_key+46j
                mov     eax, [esi]
                mov     ebx, [esi+4]
                mov     ecx, [esi+8]
                mov     edx, [esi+0Ch]
                mov     [edi], eax
                mov     [edi+4], ebx
                mov     [edi+8], ecx
                mov     [edi+0Ch], edx
                mov     ecx, [esi+10h]
                mov     edx, [esi+14h]
                mov     [edi+10h], ecx
                mov     [edi+14h], edx
                xor     ecx, ecx
                jmp     loc_10014D3D
; ---------------------------------------------------------------------------
                align 4

loc_10014D38:                           ; CODE XREF: AES_set_encrypt_key+1ADj
                mov     eax, [edi]
                mov     edx, [edi+14h]

loc_10014D3D:                           ; CODE XREF: AES_set_encrypt_key+127j
                movzx   esi, dl
                mov     ebx, [ebp+esi*8+2]
                movzx   esi, dh
                and     ebx, 0FF000000h
                xor     eax, ebx
                mov     ebx, [ebp+esi*8+2]
                shr     edx, 10h
                and     ebx, 0FFh
                movzx   esi, dl
                xor     eax, ebx
                mov     ebx, [ebp+esi*8+0]
                movzx   esi, dh
                and     ebx, 0FF00h
                xor     eax, ebx
                mov     ebx, [ebp+esi*8+0]
                and     ebx, 0FF0000h
                xor     eax, ebx
                xor     eax, [ebp+ecx*4+800h]
                mov     [edi+18h], eax
                xor     eax, [edi+4]
                mov     [edi+1Ch], eax
                xor     eax, [edi+8]
                mov     [edi+20h], eax
                xor     eax, [edi+0Ch]
                mov     [edi+24h], eax
                cmp     ecx, 7
                jz      loc_10014DBC
                inc     ecx
                xor     eax, [edi+10h]
                mov     [edi+28h], eax
                xor     eax, [edi+14h]
                mov     [edi+2Ch], eax
                add     edi, 18h
                jmp     loc_10014D38
; ---------------------------------------------------------------------------

loc_10014DBC:                           ; CODE XREF: AES_set_encrypt_key+194j
                mov     dword ptr [edi+48h], 0Ch
                xor     eax, eax
                jmp     loc_10014EE4
; ---------------------------------------------------------------------------

loc_10014DCA:                           ; CODE XREF: AES_set_encrypt_key+52j
                mov     eax, [esi]
                mov     ebx, [esi+4]
                mov     ecx, [esi+8]
                mov     edx, [esi+0Ch]
                mov     [edi], eax
                mov     [edi+4], ebx
                mov     [edi+8], ecx
                mov     [edi+0Ch], edx
                mov     eax, [esi+10h]
                mov     ebx, [esi+14h]
                mov     ecx, [esi+18h]
                mov     edx, [esi+1Ch]
                mov     [edi+10h], eax
                mov     [edi+14h], ebx
                mov     [edi+18h], ecx
                mov     [edi+1Ch], edx
                xor     ecx, ecx
                jmp     loc_10014E03
; ---------------------------------------------------------------------------
                align 10h

loc_10014E00:                           ; CODE XREF: AES_set_encrypt_key+2C2j
                mov     edx, [edi+1Ch]

loc_10014E03:                           ; CODE XREF: AES_set_encrypt_key+1F0j
                mov     eax, [edi]
                movzx   esi, dl
                mov     ebx, [ebp+esi*8+2]
                movzx   esi, dh
                and     ebx, 0FF000000h
                xor     eax, ebx
                mov     ebx, [ebp+esi*8+2]
                shr     edx, 10h
                and     ebx, 0FFh
                movzx   esi, dl
                xor     eax, ebx
                mov     ebx, [ebp+esi*8+0]
                movzx   esi, dh
                and     ebx, 0FF00h
                xor     eax, ebx
                mov     ebx, [ebp+esi*8+0]
                and     ebx, 0FF0000h
                xor     eax, ebx
                xor     eax, [ebp+ecx*4+800h]
                mov     [edi+20h], eax
                xor     eax, [edi+4]
                mov     [edi+24h], eax
                xor     eax, [edi+8]
                mov     [edi+28h], eax
                xor     eax, [edi+0Ch]
                mov     [edi+2Ch], eax
                cmp     ecx, 6
                jz      loc_10014ED1
                inc     ecx
                mov     edx, eax
                mov     eax, [edi+10h]
                movzx   esi, dl
                mov     ebx, [ebp+esi*8+2]
                movzx   esi, dh
                and     ebx, 0FFh
                xor     eax, ebx
                mov     ebx, [ebp+esi*8+0]
                shr     edx, 10h
                and     ebx, 0FF00h
                movzx   esi, dl
                xor     eax, ebx
                mov     ebx, [ebp+esi*8+0]
                movzx   esi, dh
                and     ebx, 0FF0000h
                xor     eax, ebx
                mov     ebx, [ebp+esi*8+2]
                and     ebx, 0FF000000h
                xor     eax, ebx
                mov     [edi+30h], eax
                xor     eax, [edi+14h]
                mov     [edi+34h], eax
                xor     eax, [edi+18h]
                mov     [edi+38h], eax
                xor     eax, [edi+1Ch]
                mov     [edi+3Ch], eax
                add     edi, 20h
                jmp     loc_10014E00
; ---------------------------------------------------------------------------

loc_10014ED1:                           ; CODE XREF: AES_set_encrypt_key+25Cj
                mov     dword ptr [edi+30h], 0Eh
                xor     eax, eax
                jmp     loc_10014EE4
; ---------------------------------------------------------------------------

loc_10014EDF:                           ; CODE XREF: AES_set_encrypt_key+12j
                                        ; AES_set_encrypt_key+1Ej
                mov     eax, 0FFFFFFFFh

loc_10014EE4:                           ; CODE XREF: AES_set_encrypt_key+5Dj
                                        ; AES_set_encrypt_key+FEj ...
                pop     edi
                pop     esi
                pop     ebx
                pop     ebp
                retn
f_AES_set_encrypt_key endp


; =============== S U B R O U T I N E =======================================

f_AES_set_decrypt_key proc near         ; CODE XREF: decryptv1+117p
                                        ; sub_1000AE70+ADp ...

var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                mov     eax, [esp+arg_0]
                mov     ecx, [esp+arg_4]
                mov     edx, [esp+arg_8]
                sub     esp, 0Ch
                mov     [esp+0Ch+var_C], eax
                mov     [esp+0Ch+var_8], ecx
                mov     [esp+0Ch+var_4], edx
                call    AES_set_encrypt_key
                add     esp, 0Ch
                cmp     eax, 0
                jz      loc_10014F1D
                retn
; ---------------------------------------------------------------------------

loc_10014F1D:                           ; CODE XREF: AES_set_decrypt_key+2Dj
                push    ebp
                push    ebx
                push    esi
                push    edi
                mov     esi, [esp+10h+arg_8]
                mov     ecx, [esi+0F0h]
                lea     ecx, ds:0[ecx*4]
                lea     edi, [esi+ecx*4]
                nop
                nop
                nop

loc_10014F38:                           ; CODE XREF: AES_set_decrypt_key+89j
                mov     eax, [esi]
                mov     ebx, [esi+4]
                mov     ecx, [edi]
                mov     edx, [edi+4]
                mov     [edi], eax
                mov     [edi+4], ebx
                mov     [esi], ecx
                mov     [esi+4], edx
                mov     eax, [esi+8]
                mov     ebx, [esi+0Ch]
                mov     ecx, [edi+8]
                mov     edx, [edi+0Ch]
                mov     [edi+8], eax
                mov     [edi+0Ch], ebx
                mov     [esi+8], ecx
                mov     [esi+0Ch], edx
                add     esi, 10h
                sub     edi, 10h
                cmp     esi, edi
                jnz     loc_10014F38
                call    $+5
                pop     ebp
                lea     edi, [ebp-117Dh]
                lea     ebp, [ebp-1C7Dh]
                mov     esi, [esp+10h+arg_8]
                mov     ecx, [esi+0F0h]
                dec     ecx
                nop
                nop
                nop

loc_10014F98:                           ; CODE XREF: AES_set_decrypt_key+1B0j
                add     esi, 10h
                mov     eax, [esi]
                mov     edx, eax
                movzx   ebx, ah
                shr     edx, 10h
                and     eax, 0FFh
                movzx   eax, byte ptr [ebp+eax*8+2]
                movzx   ebx, byte ptr [ebp+ebx*8+2]
                mov     eax, [edi+eax*8]
                xor     eax, [edi+ebx*8+3]
                movzx   ebx, dh
                and     edx, 0FFh
                movzx   edx, byte ptr [ebp+edx*8+2]
                movzx   ebx, byte ptr [ebp+ebx*8+2]
                xor     eax, [edi+edx*8+2]
                xor     eax, [edi+ebx*8+1]
                mov     [esi], eax
                mov     eax, [esi+4]
                mov     edx, eax
                movzx   ebx, ah
                shr     edx, 10h
                and     eax, 0FFh
                movzx   eax, byte ptr [ebp+eax*8+2]
                movzx   ebx, byte ptr [ebp+ebx*8+2]
                mov     eax, [edi+eax*8]
                xor     eax, [edi+ebx*8+3]
                movzx   ebx, dh
                and     edx, 0FFh
                movzx   edx, byte ptr [ebp+edx*8+2]
                movzx   ebx, byte ptr [ebp+ebx*8+2]
                xor     eax, [edi+edx*8+2]
                xor     eax, [edi+ebx*8+1]
                mov     [esi+4], eax
                mov     eax, [esi+8]
                mov     edx, eax
                movzx   ebx, ah
                shr     edx, 10h
                and     eax, 0FFh
                movzx   eax, byte ptr [ebp+eax*8+2]
                movzx   ebx, byte ptr [ebp+ebx*8+2]
                mov     eax, [edi+eax*8]
                xor     eax, [edi+ebx*8+3]
                movzx   ebx, dh
                and     edx, 0FFh
                movzx   edx, byte ptr [ebp+edx*8+2]
                movzx   ebx, byte ptr [ebp+ebx*8+2]
                xor     eax, [edi+edx*8+2]
                xor     eax, [edi+ebx*8+1]
                mov     [esi+8], eax
                mov     eax, [esi+0Ch]
                mov     edx, eax
                movzx   ebx, ah
                shr     edx, 10h
                and     eax, 0FFh
                movzx   eax, byte ptr [ebp+eax*8+2]
                movzx   ebx, byte ptr [ebp+ebx*8+2]
                mov     eax, [edi+eax*8]
                xor     eax, [edi+ebx*8+3]
                movzx   ebx, dh
                and     edx, 0FFh
                movzx   edx, byte ptr [ebp+edx*8+2]
                movzx   ebx, byte ptr [ebp+ebx*8+2]
                xor     eax, [edi+edx*8+2]
                xor     eax, [edi+ebx*8+1]
                mov     [esi+0Ch], eax
                dec     ecx
                jnz     loc_10014F98
                xor     eax, eax
                pop     edi
                pop     esi
                pop     ebx
                pop     ebp
                retn
f_AES_set_decrypt_key endp




decryptv1       proc near    c           ; DATA XREF: sub_10005500+70o
                                        ; sub_10005500+C0o ...

var_118         = byte ptr -118h
var_24          = byte ptr -24h
var_23          = byte ptr -23h
var_22          = byte ptr -22h
var_21          = byte ptr -21h
var_20          = byte ptr -20h
var_1F          = byte ptr -1Fh
var_1E          = byte ptr -1Eh
var_1D          = byte ptr -1Dh
var_1C          = byte ptr -1Ch
var_1B          = byte ptr -1Bh
var_1A          = byte ptr -1Ah
var_19          = byte ptr -19h
var_18          = byte ptr -18h
var_17          = byte ptr -17h
var_16          = byte ptr -16h
var_15          = byte ptr -15h
var_14          = byte ptr -14h
var_13          = byte ptr -13h
var_4           = dword ptr -4
arg_0           = dword ptr  4

                sub     esp, 118h
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+118h+var_4], eax
                push    esi
                mov     esi, [esp+11Ch+arg_0]
                push    edi
                lea     eax, [esp+120h+var_118]
                push    eax
                lea     ecx, [esi+1824h]
                push    80h
                push    ecx
                mov     [esp+12Ch+var_24], 0Bh
                mov     [esp+12Ch+var_23], 0A0h
                mov     [esp+12Ch+var_22], 0F8h
                mov     [esp+12Ch+var_21], 0DDh
                mov     [esp+12Ch+var_20], 0FEh
                mov     [esp+12Ch+var_1F], 0A6h
                mov     [esp+12Ch+var_1E], 1Fh
                mov     [esp+12Ch+var_1D], 0B3h
                mov     [esp+12Ch+var_1C], 0D8h
                mov     [esp+12Ch+var_1B], 0DFh
                mov     [esp+12Ch+var_1A], 9Fh
                mov     [esp+12Ch+var_19], 56h
                mov     [esp+12Ch+var_18], 6Ah
                mov     [esp+12Ch+var_17], 5
                mov     [esp+12Ch+var_16], 0Fh
                mov     [esp+12Ch+var_15], 78h
                call    AES_set_encrypt_key ; AES_set_encrypt_key-------inline
                lea     edx, [esp+12Ch+var_118]
                push    edx
                lea     eax, [esp+130h+var_14]
                push    eax
                lea     ecx, [esi+20h]
                push    ecx
                call    AES_encrypt   ; AES_encrypt----------inline
                add     esp, 18h
                lea     eax, [esp+120h+var_13]
                lea     ecx, [esi+21h]
                mov     edi, 4
                jmp     short loc_10007860
; ---------------------------------------------------------------------------
                align 10h

loc_10007860:                           ; CODE XREF: decryptv1+DBj
                                        ; decryptv1+103j
                movzx   edx, byte ptr [ecx-1]
                xor     [eax-1], dl
                movzx   edx, byte ptr [ecx]
                xor     [eax], dl
                movzx   edx, byte ptr [ecx+1]
                xor     [eax+1], dl
                movzx   edx, byte ptr [ecx+2]
                xor     [eax+2], dl
                add     ecx, 4
                add     eax, 4
                sub     edi, 1
                jnz     short loc_10007860
                lea     eax, [esp+120h+var_118]
                push    eax
                lea     ecx, [esp+124h+var_14]
                push    80h
                push    ecx
                call    AES_set_decrypt_key ;  AES_set_decrypt_key---inline
                push    edi
                lea     edx, [esp+130h+var_24]
                push    edx
                mov     edx, [esi+1Ch]
                lea     ecx, [esp+134h+var_118]
                push    ecx
                sub     edx, 10h
                lea     eax, [esi+30h]
                push    edx
                push    eax
                push    eax
                call    AES_cbc_encrypt ; AES_cbc_encrypt-----------inline
                mov     ecx, [esp+144h+var_4]
                add     esp, 24h
                pop     edi
                pop     esi
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 118h
                retn
decryptv1       endp



; ---------------------------------------------------------------------------

decryptv2       proc near     c          ; DATA XREF: sub_10005500+69o
                                        ; sub_10007B60+2Eo ...

arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                and     esp, 0FFFFFFF8h
                push    ecx
                push    ebx
                push    esi
                push    edi
                mov     edi, [ebp+arg_0]
                xor     esi, esi
                cmp     [edi+1Ch], esi
                jle     short loc_10007776
                lea     ebx, [edi+1824h]
                lea     ebx, [ebx+0]

loc_10007760:                           ; CODE XREF: decryptv2+34j
                lea     ecx, [edi+esi+20h]
                mov     edx, ebx
                call    sub_10002460
                add     esi, 1800h
                cmp     esi, [edi+1Ch]
                jl      short loc_10007760

loc_10007776:                           ; CODE XREF: decryptv2+12j
                pop     edi
                pop     esi
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn
decryptv2       endp
sub_10002460    proc near               ; CODE XREF: decryptv2+26p

var_38          = byte ptr -38h
var_37          = byte ptr -37h
var_36          = byte ptr -36h
var_35          = byte ptr -35h
var_34          = byte ptr -34h
var_33          = byte ptr -33h
var_32          = byte ptr -32h
var_31          = byte ptr -31h
var_30          = byte ptr -30h
var_2F          = byte ptr -2Fh
var_2E          = byte ptr -2Eh
var_2D          = byte ptr -2Dh
var_2C          = byte ptr -2Ch
var_2B          = byte ptr -2Bh
var_2A          = byte ptr -2Ah
var_29          = byte ptr -29h
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = byte ptr -18h
var_8           = dword ptr -8

                sub     esp, 3Ch
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+3Ch+var_8], eax
                push    esi
                mov     esi, ecx
                mov     eax, [esi]
                mov     ecx, [esi+4]
                mov     [esp+40h+var_28], eax
                mov     eax, [esi+0Ch]
                push    edi
                mov     edi, edx
                mov     edx, [esi+8]
                mov     [esp+44h+var_1C], eax
                lea     eax, [esp+44h+var_28]
                mov     [esp+44h+var_38], 0Bh
                mov     [esp+44h+var_37], 0A0h
                mov     [esp+44h+var_36], 0F8h
                mov     [esp+44h+var_35], 0DDh
                mov     [esp+44h+var_34], 0FEh
                mov     [esp+44h+var_33], 0A6h
                mov     [esp+44h+var_32], 1Fh
                mov     [esp+44h+var_31], 0B3h
                mov     [esp+44h+var_30], 0D8h
                mov     [esp+44h+var_2F], 0DFh
                mov     [esp+44h+var_2E], 9Fh
                mov     [esp+44h+var_2D], 56h
                mov     [esp+44h+var_2C], 6Ah
                mov     [esp+44h+var_2B], 5
                mov     [esp+44h+var_2A], 0Fh
                mov     [esp+44h+var_29], 78h
                mov     [esp+44h+var_24], ecx
                mov     [esp+44h+var_20], edx
                call    sub_10001010
                lea     ecx, [esp+44h+var_18]
                push    ecx
                lea     edx, [esp+48h+var_28]
                push    edx
                mov     eax, edi
                call    sub_10001060
                add     esp, 8
                add     esi, 10h
                mov     edi, 17Fh

loc_10002504:                           ; CODE XREF: sub_10002460+C0j
                lea     eax, [esp+44h+var_38]
                push    eax
                lea     ecx, [esp+48h+var_18]
                push    ecx
                mov     ecx, esi
                mov     edx, esi
                call    sub_10001C50
                add     esp, 8
                add     esi, 10h
                sub     edi, 1
                jnz     short loc_10002504
                mov     ecx, [esp+44h+var_8]
                pop     edi
                pop     esi
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 3Ch
                retn
sub_10002460    endp
sub_10001010    proc near               ; CODE XREF: sub_10001C50+1DAp
                                        ; sub_10002460+83p
                add     eax, 1
                mov     ecx, 4
                jmp     short loc_10001020
; ---------------------------------------------------------------------------
                align 10h

loc_10001020:                           ; CODE XREF: sub_10001010+8j
                                        ; sub_10001010+4Cj
                movzx   edx, byte ptr [eax-1]
                movzx   edx, byte_10080E00[edx]
                mov     [eax-1], dl
                movzx   edx, byte ptr [eax]
                movzx   edx, byte_10080E00[edx]
                mov     [eax], dl
                movzx   edx, byte ptr [eax+1]
                movzx   edx, byte_10080E00[edx]
                mov     [eax+1], dl
                movzx   edx, byte ptr [eax+2]
                movzx   edx, byte_10080E00[edx]
                mov     [eax+2], dl
                add     eax, 4
                sub     ecx, 1
                jnz     short loc_10001020
                retn
sub_10001010    endp
sub_10001060    proc near               ; CODE XREF: sub_10002460+94p

var_124         = dword ptr -124h
var_120         = dword ptr -120h
var_11C         = dword ptr -11Ch
var_118         = dword ptr -118h
var_114         = dword ptr -114h
var_110         = dword ptr -110h
var_10C         = dword ptr -10Ch
var_108         = dword ptr -108h
var_104         = dword ptr -104h
var_100         = dword ptr -100h
var_FC          = dword ptr -0FCh
var_F8          = dword ptr -0F8h
var_F4          = dword ptr -0F4h
var_F0          = dword ptr -0F0h
var_EC          = dword ptr -0ECh
var_E8          = dword ptr -0E8h
var_E4          = dword ptr -0E4h
var_D1          = byte ptr -0D1h
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                sub     esp, 124h
                push    ebx
                push    ebp
                push    esi
                push    edi
                push    0ECh            ; size_t
                mov     esi, eax
                lea     eax, [esp+138h+var_EC]
                push    0               ; int
                push    eax             ; void *
                call    crt_memset
                mov     ecx, [esi]
                mov     eax, [esi+8]
                mov     edx, [esi+4]
                mov     [esp+140h+var_F0], ecx
                mov     ecx, [esi+0Ch]
                mov     [esp+140h+var_E8], eax
                mov     [esp+140h+var_E4], ecx
                add     esp, 0Ch
                mov     [esp+134h+var_EC], edx
                mov     ecx, offset byte_10084804
                lea     eax, [esp+134h+var_D1]

loc_100010A4:                           ; CODE XREF: sub_10001060+38Cj
                movzx   ebp, byte ptr [eax-13h]
                movzx   esi, byte ptr [eax-11h]
                movzx   edx, byte ptr [eax-10h]
                xor     ebx, ebx
                add     edx, edx
                add     edx, edx
                add     esi, esi
                add     esi, esi
                mov     [esp+134h+var_124], esi
                movzx   esi, byte ptr [eax-12h]
                add     ebp, ebp
                mov     bh, ss:byte_10080A03[ebp+ebp]
                add     ebp, ebp
                add     esi, esi
                add     esi, esi
                mov     [esp+134h+var_120], esi
                mov     esi, [esp+134h+var_124]
                movzx   esi, byte_10080A01[esi]
                mov     bl, byte_10080A02[edx]
                shl     ebx, 8
                or      ebx, esi
                mov     esi, [esp+134h+var_120]
                movzx   esi, byte_10080A00[esi]
                shl     ebx, 8
                or      ebx, esi
                xor     ebx, [ecx-4]
                mov     esi, [eax-1Bh]
                mov     edi, ebx
                mov     ebx, [eax-17h]
                xor     esi, ebx
                xor     ebx, ebx
                mov     bh, ss:byte_10080603[ebp]
                xor     edi, [eax-1Fh]
                mov     [eax-0Fh], edi
                xor     esi, edi
                mov     [eax-0Bh], esi
                mov     bl, byte_10080602[edx]
                mov     edx, [esp+134h+var_124]
                movzx   edx, byte_10080601[edx]
                shl     ebx, 8
                or      ebx, edx
                mov     edx, [esp+134h+var_120]
                movzx   edx, byte_10080600[edx]
                shl     ebx, 8
                or      ebx, edx
                xor     ebx, [eax-17h]
                mov     edx, [eax-1Bh]
                xor     ebx, [ecx-4]
                mov     ebp, ebx
                xor     ebp, [eax-1Fh]
                xor     ebx, ebx
                xor     edx, ebp
                xor     edx, [eax-13h]
                mov     [eax-7], ebp
                mov     [esp+134h+var_114], edx
                mov     [eax-3], edx
                movzx   edx, dl
                mov     bh, byte_10080A03[edx*4]
                movzx   edx, byte ptr [eax]
                mov     bl, byte_10080A02[edx*4]
                movzx   edx, byte ptr [eax-1]
                movzx   edx, byte_10080A01[edx*4]
                shl     ebx, 8
                or      ebx, edx
                movzx   edx, byte ptr [eax-2]
                movzx   edx, byte_10080A00[edx*4]
                shl     ebx, 8
                or      ebx, edx
                xor     ebx, [ecx]
                mov     edx, ebx
                xor     edx, edi
                mov     [eax+1], edx
                xor     edx, ebp
                xor     edx, esi
                mov     [eax+5], edx
                movzx   edx, byte ptr [eax-3]
                xor     ebx, ebx
                mov     bh, byte_10080603[edx*4]
                movzx   edx, byte ptr [eax]
                mov     bl, byte_10080602[edx*4]
                shl     ebx, 8
                movzx   edx, byte ptr [eax-1]
                movzx   edx, byte_10080601[edx*4]
                or      ebx, edx
                movzx   edx, byte ptr [eax-2]
                movzx   edx, byte_10080600[edx*4]
                shl     ebx, 8
                or      ebx, edx
                xor     ebx, [ecx]
                xor     ebx, ebp
                mov     edx, ebx
                xor     edx, edi
                mov     [eax+9], edx
                xor     edx, [esp+134h+var_114]
                xor     ebx, ebx
                xor     edx, esi
                mov     [eax+0Dh], edx
                movzx   edx, dl
                mov     bh, byte_10080A03[edx*4]
                movzx   edx, byte ptr [eax+10h]
                mov     esi, [ecx+4]
                mov     edi, [eax+1]
                mov     ebp, [eax+9]
                mov     bl, byte_10080A02[edx*4]
                movzx   edx, byte ptr [eax+0Fh]
                movzx   edx, byte_10080A01[edx*4]
                shl     ebx, 8
                or      ebx, edx
                movzx   edx, byte ptr [eax+0Eh]
                movzx   edx, byte_10080A00[edx*4]
                shl     ebx, 8
                or      ebx, edx
                xor     ebx, esi
                mov     edx, ebx
                xor     edx, edi
                mov     [eax+11h], edx
                mov     ebx, ebp
                xor     ebx, edx
                xor     ebx, [eax+5]
                mov     [eax+15h], ebx
                movzx   edx, byte ptr [eax+0Dh]
                xor     ebx, ebx
                mov     bh, byte_10080603[edx*4]
                movzx   edx, byte ptr [eax+10h]
                mov     bl, byte_10080602[edx*4]
                movzx   edx, byte ptr [eax+0Fh]
                movzx   edx, byte_10080601[edx*4]
                shl     ebx, 8
                or      ebx, edx
                movzx   edx, byte ptr [eax+0Eh]
                movzx   edx, byte_10080600[edx*4]
                shl     ebx, 8
                or      ebx, edx
                xor     ebx, ebp
                xor     ebx, esi
                mov     esi, [eax+0Dh]
                mov     edx, ebx
                xor     edx, edi
                xor     esi, edx
                xor     esi, [eax+5]
                mov     [eax+19h], edx
                mov     [eax+1Dh], esi
                movzx   edx, byte ptr [eax+1Dh]
                xor     ebx, ebx
                mov     bh, byte_10080A03[edx*4]
                movzx   edx, byte ptr [eax+20h]
                mov     esi, [ecx+8]
                mov     edi, [eax+11h]
                mov     ebp, [eax+19h]
                mov     bl, byte_10080A02[edx*4]
                movzx   edx, byte ptr [eax+1Fh]
                movzx   edx, byte_10080A01[edx*4]
                shl     ebx, 8
                or      ebx, edx
                movzx   edx, byte ptr [eax+1Eh]
                movzx   edx, byte_10080A00[edx*4]
                shl     ebx, 8
                or      ebx, edx
                xor     ebx, esi
                mov     edx, ebx
                xor     edx, edi
                mov     [eax+21h], edx
                xor     edx, [eax+15h]
                xor     ebx, ebx
                xor     edx, ebp
                mov     [eax+25h], edx
                movzx   edx, byte ptr [eax+1Dh]
                mov     bh, byte_10080603[edx*4]
                movzx   edx, byte ptr [eax+20h]
                add     ecx, 14h
                add     eax, 50h
                mov     bl, byte_10080602[edx*4]
                movzx   edx, byte ptr [eax-31h]
                movzx   edx, byte_10080601[edx*4]
                shl     ebx, 8
                or      ebx, edx
                movzx   edx, byte ptr [eax-32h]
                movzx   edx, byte_10080600[edx*4]
                shl     ebx, 8
                or      ebx, edx
                xor     ebx, esi
                mov     esi, [eax-33h]
                xor     ebx, edi
                mov     edx, ebx
                xor     edx, ebp
                xor     esi, edx
                xor     esi, [eax-3Bh]
                mov     [eax-27h], edx
                xor     ebx, ebx
                mov     [eax-23h], esi
                movzx   edx, byte ptr [eax-23h]
                mov     bh, byte_10080A03[edx*4]
                movzx   edx, byte ptr [eax-20h]
                mov     esi, [ecx-8]
                mov     edi, [eax-2Fh]
                mov     ebp, [eax-27h]
                mov     bl, byte_10080A02[edx*4]
                movzx   edx, byte ptr [eax-21h]
                movzx   edx, byte_10080A01[edx*4]
                shl     ebx, 8
                or      ebx, edx
                movzx   edx, byte ptr [eax-22h]
                movzx   edx, byte_10080A00[edx*4]
                shl     ebx, 8
                or      ebx, edx
                xor     ebx, esi
                mov     edx, ebx
                xor     edx, edi
                mov     [eax-1Fh], edx
                xor     edx, [eax-2Bh]
                xor     ebx, ebx
                xor     edx, ebp
                mov     [eax-1Bh], edx
                movzx   edx, byte ptr [eax-23h]
                mov     bh, byte_10080603[edx*4]
                movzx   edx, byte ptr [eax-20h]
                mov     bl, byte_10080602[edx*4]
                movzx   edx, byte ptr [eax-21h]
                movzx   edx, byte_10080601[edx*4]
                shl     ebx, 8
                or      ebx, edx
                movzx   edx, byte ptr [eax-22h]
                movzx   edx, byte_10080600[edx*4]
                shl     ebx, 8
                or      ebx, edx
                xor     ebx, esi
                mov     esi, [eax-23h]
                xor     ebx, edi
                mov     edx, ebx
                xor     edx, ebp
                xor     esi, edx
                xor     esi, [eax-2Bh]
                cmp     ecx, offset byte_1008482C
                mov     [eax-17h], edx
                mov     [eax-13h], esi
                jl      loc_100010A4
                mov     ecx, [esp+134h+arg_0]
                mov     eax, [ecx+8]
                mov     ebx, [ecx+4]
                mov     edx, [ecx]
                mov     ecx, [ecx+0Ch]
                mov     [esp+134h+var_100], eax
                xor     eax, [esp+134h+var_EC]
                mov     [esp+134h+var_F8], ebx
                xor     ebx, [esp+134h+var_E8]
                mov     [esp+134h+var_FC], edx
                xor     edx, [esp+134h+var_F0]
                mov     [esp+134h+var_F4], ecx
                xor     ecx, [esp+134h+var_E4]
                lea     esi, [esp+134h+var_F0]
                mov     [esp+134h+var_11C], eax
                mov     [esp+134h+var_120], ebx
                mov     [esp+134h+var_114], 3
                jmp     short loc_10001448
; ---------------------------------------------------------------------------
                align 10h

loc_10001440:                           ; CODE XREF: sub_10001060+70Fj
                mov     ebx, [esp+134h+var_120]
                mov     eax, [esp+134h+var_11C]

loc_10001448:                           ; CODE XREF: sub_10001060+3D8j
                movzx   edi, bh
                mov     edi, dword_10082300[edi*4]
                mov     ebx, eax
                shr     ebx, 10h
                and     ebx, 0FFh
                xor     edi, dword_10081700[ebx*4]
                mov     ebx, ecx
                shr     ebx, 18h
                xor     edi, dword_10081B00[ebx*4]
                mov     ebx, edx
                and     ebx, 0FFh
                xor     edi, dword_10081300[ebx*4]
                movzx   ebx, ch
                mov     ebp, edx
                shr     ebp, 10h
                and     ebp, 0FFh
                mov     [esp+134h+var_124], ebp
                mov     ebp, dword_10082300[ebx*4]
                mov     ebx, [esp+134h+var_124]
                xor     ebp, dword_10081700[ebx*4]
                mov     ebx, [esp+134h+var_120]
                shr     ebx, 18h
                xor     ebp, dword_10081B00[ebx*4]
                mov     ebx, eax
                and     ebx, 0FFh
                xor     ebp, dword_10081300[ebx*4]
                mov     ebx, ecx
                shr     ebx, 10h
                and     ebx, 0FFh
                movzx   eax, ah
                mov     [esp+134h+var_124], eax
                mov     eax, dword_10081700[ebx*4]
                mov     ebx, [esp+134h+var_124]
                xor     eax, dword_10082300[ebx*4]
                xor     ebp, [esi+14h]
                mov     ebx, edx
                shr     ebx, 18h
                xor     eax, dword_10081B00[ebx*4]
                mov     ebx, [esp+134h+var_120]
                and     ebx, 0FFh
                xor     eax, dword_10081300[ebx*4]
                mov     ebx, [esp+134h+var_120]
                xor     eax, [esi+18h]
                xor     edi, [esi+10h]
                shr     ebx, 10h
                and     ebx, 0FFh
                movzx   edx, dh
                mov     [esp+134h+var_124], edx
                mov     edx, dword_10081700[ebx*4]
                mov     ebx, [esp+134h+var_124]
                xor     edx, dword_10082300[ebx*4]
                mov     ebx, [esp+134h+var_11C]
                and     ecx, 0FFh
                shr     ebx, 18h
                xor     edx, dword_10081B00[ebx*4]
                mov     [esp+134h+var_108], ebp
                xor     edx, dword_10081300[ecx*4]
                movzx   ebx, byte ptr [esp+134h+var_108+2]
                xor     edx, [esi+1Ch]
                movzx   ecx, ah
                mov     ecx, dword_10082300[ecx*4]
                xor     ecx, dword_10081700[ebx*4]
                mov     [esp+134h+var_124], edi
                mov     ebx, edx
                shr     ebx, 18h
                xor     ecx, dword_10081B00[ebx*4]
                mov     ebx, [esp+134h+var_124]
                and     edi, 0FFh
                xor     ecx, dword_10081300[edi*4]
                mov     edi, ebx
                xor     ecx, [esi+20h]
                shr     edi, 10h
                mov     [esp+134h+var_110], ecx
                movzx   ecx, dh
                and     edi, 0FFh
                mov     [esp+134h+var_118], edi
                mov     edi, dword_10082300[ecx*4]
                mov     ecx, [esp+134h+var_118]
                mov     [esp+134h+var_104], edx
                mov     [esp+134h+var_11C], ebp
                mov     [esp+134h+var_120], eax
                xor     edi, dword_10081700[ecx*4]
                mov     ecx, eax
                shr     ecx, 18h
                xor     edi, dword_10081B00[ecx*4]
                movzx   ecx, byte ptr [esp+134h+var_104+2]
                mov     ecx, dword_10081700[ecx*4]
                and     ebp, 0FFh
                xor     edi, dword_10081300[ebp*4]
                movzx   ebp, byte ptr [esp+134h+var_11C+1]
                xor     ecx, dword_10082300[ebp*4]
                xor     edi, [esi+24h]
                shr     ebx, 18h
                xor     ecx, dword_10081B00[ebx*4]
                movzx   ebx, byte ptr [esp+134h+var_124+1]
                and     eax, 0FFh
                xor     ecx, dword_10081300[eax*4]
                mov     eax, [esp+134h+var_120]
                xor     ecx, [esi+28h]
                shr     eax, 10h
                and     eax, 0FFh
                mov     eax, dword_10081700[eax*4]
                xor     eax, dword_10082300[ebx*4]
                mov     ebx, [esp+134h+var_11C]
                shr     ebx, 18h
                xor     eax, dword_10081B00[ebx*4]
                mov     ebx, [esp+134h+var_110]
                mov     [esp+134h+var_108], edi
                movzx   ebp, byte ptr [esp+134h+var_108+2]
                and     edx, 0FFh
                xor     eax, dword_10081300[edx*4]
                movzx   edx, ch
                xor     eax, [esi+2Ch]
                mov     edx, dword_10082300[edx*4]
                xor     edx, dword_10081700[ebp*4]
                mov     [esp+134h+var_124], ebx
                and     ebx, 0FFh
                mov     ebp, eax
                shr     ebp, 18h
                xor     edx, dword_10081B00[ebp*4]
                mov     ebp, [esp+134h+var_124]
                xor     edx, dword_10081300[ebx*4]
                shr     ebp, 10h
                and     ebp, 0FFh
                movzx   ebx, ah
                mov     [esp+134h+var_118], ebp
                mov     ebp, dword_10082300[ebx*4]
                mov     ebx, [esp+134h+var_118]
                xor     ebp, dword_10081700[ebx*4]
                mov     ebx, ecx
                mov     [esp+134h+var_11C], edi
                and     edi, 0FFh
                shr     ebx, 18h
                xor     ebp, dword_10081B00[ebx*4]
                movzx   ebx, byte ptr [esp+134h+var_11C+1]
                xor     ebp, dword_10081300[edi*4]
                xor     edx, [esi+30h]
                xor     ebp, [esi+34h]
                mov     [esp+134h+var_104], eax
                movzx   edi, byte ptr [esp+134h+var_104+2]
                mov     edi, dword_10081700[edi*4]
                xor     edi, dword_10082300[ebx*4]
                mov     ebx, [esp+134h+var_124]
                mov     [esp+134h+var_120], ecx
                and     ecx, 0FFh
                shr     ebx, 18h
                xor     edi, dword_10081B00[ebx*4]
                mov     [esp+134h+var_110], edx
                xor     edi, dword_10081300[ecx*4]
                mov     ecx, [esp+134h+var_120]
                xor     edi, [esi+38h]
                shr     ecx, 10h
                mov     [esp+134h+var_10C], edi
                movzx   edi, byte ptr [esp+134h+var_124+1]
                and     ecx, 0FFh
                mov     ecx, dword_10081700[ecx*4]
                xor     ecx, dword_10082300[edi*4]
                mov     edi, [esp+134h+var_11C]
                shr     edi, 18h
                xor     ecx, dword_10081B00[edi*4]
                mov     [esp+134h+var_108], ebp
                and     eax, 0FFh
                xor     ecx, dword_10081300[eax*4]
                mov     eax, ebp
                xor     ecx, [esi+3Ch]
                mov     [esp+134h+var_11C], eax
                mov     eax, [esp+134h+var_10C]
                add     esi, 30h
                sub     [esp+134h+var_114], 1
                mov     [esp+134h+var_104], ecx
                mov     [esp+134h+var_120], eax
                jnz     loc_10001440
                movzx   eax, byte ptr [esp+134h+var_104+3]
                xor     ebx, ebx
                mov     bh, byte_10082703[eax*4]
                movzx   eax, byte ptr [esp+134h+var_108+2]
                mov     edi, [esp+134h+arg_4]
                mov     bl, byte_10082702[eax*4]
                movzx   eax, byte ptr [esp+134h+var_10C+1]
                movzx   eax, byte_10082701[eax*4]
                shl     ebx, 8
                or      ebx, eax
                shl     ebx, 8
                movzx   eax, dl
                movzx   eax, byte_10082700[eax*4]
                or      ebx, eax
                xor     ebx, [esi+10h]
                movzx   eax, byte ptr [esp+134h+var_10C+3]
                xor     ebx, [esp+134h+var_FC]
                movzx   edx, dh
                mov     [edi], ebx
                xor     ebx, ebx
                mov     bh, byte_10082703[eax*4]
                movzx   eax, byte ptr [esp+134h+var_110+2]
                mov     bl, byte_10082702[eax*4]
                movzx   eax, ch
                movzx   eax, byte_10082701[eax*4]
                shl     ebx, 8
                or      ebx, eax
                shl     ebx, 8
                mov     eax, ebp
                movzx   ebp, al
                movzx   ebp, byte_10082700[ebp*4]
                or      ebx, ebp
                xor     ebx, [esi+14h]
                movzx   eax, ah
                xor     ebx, [esp+134h+var_100]
                movzx   eax, byte_10082701[eax*4]
                mov     [edi+4], ebx
                movzx   ebx, byte ptr [esp+134h+var_110+3]
                mov     [esp+134h+var_100], ecx
                xor     ecx, ecx
                mov     ch, byte_10082703[ebx*4]
                movzx   ebx, byte ptr [esp+134h+var_104+2]
                mov     cl, byte_10082702[ebx*4]
                xor     ebx, ebx
                shl     ecx, 8
                or      ecx, eax
                movzx   eax, byte ptr [esp+134h+var_10C]
                movzx   eax, byte_10082700[eax*4]
                shl     ecx, 8
                or      ecx, eax
                movzx   eax, byte ptr [esp+134h+var_108+3]
                mov     bh, byte_10082703[eax*4]
                xor     ecx, [esi+18h]
                movzx   eax, byte ptr [esp+134h+var_10C+2]
                xor     ecx, [esp+134h+var_F8]
                mov     bl, byte_10082702[eax*4]
                movzx   eax, byte_10082701[edx*4]
                mov     [edi+8], ecx
                mov     ecx, [esp+134h+var_100]
                movzx   ecx, cl
                movzx   edx, byte_10082700[ecx*4]
                shl     ebx, 8
                or      ebx, eax
                shl     ebx, 8
                or      ebx, edx
                xor     ebx, [esi+1Ch]
                xor     ebx, [esp+134h+var_F4]
                mov     [edi+0Ch], ebx
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                add     esp, 124h
                retn
sub_10001060    endp
sub_10001C50    proc near               ; CODE XREF: sub_10002460+B2p

var_138         = dword ptr -138h
var_134         = dword ptr -134h
var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_128         = dword ptr -128h
var_124         = dword ptr -124h
var_120         = dword ptr -120h
var_11C         = dword ptr -11Ch
var_118         = byte ptr -118h
var_10A         = byte ptr -10Ah
var_84          = byte ptr -84h
var_7C          = dword ptr -7Ch
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                sub     esp, 13Ch
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+13Ch+var_8], eax
                mov     eax, [esp+13Ch+arg_4]
                push    ebx
                push    ebp
                push    esi
                push    edi
                push    0ECh            ; size_t
                mov     esi, edx
                lea     edx, [esp+150h+var_118]
                push    0               ; int
                push    edx             ; void *
                mov     [esp+158h+var_120], eax
                mov     [esp+158h+var_124], ecx
                mov     [esp+158h+var_11C], 0
                call    crt_memset
                mov     ecx, [esp+158h+arg_0]
                add     esp, 0Ch
                lea     eax, [esp+14Ch+var_11C]
                call    sub_100018B0
                lea     eax, [esp+14Ch+var_10A]
                mov     ecx, 6
                mov     edi, edi

loc_10001CB0:                           ; CODE XREF: sub_10001C50+17Fj
                movzx   edx, byte ptr [eax+1]
                mov     edx, dword_10084400[edx*4]
                movzx   edi, byte ptr [eax-1]
                xor     edx, dword_10083C00[edi*4]
                movzx   edi, byte ptr [eax-2]
                xor     edx, dword_10083800[edi*4]
                movzx   edi, byte ptr [eax]
                xor     edx, dword_10084000[edi*4]
                add     eax, 18h
                mov     [eax-1Ah], edx
                movzx   edx, byte ptr [eax-13h]
                mov     edx, dword_10084400[edx*4]
                movzx   edi, byte ptr [eax-14h]
                xor     edx, dword_10084000[edi*4]
                movzx   edi, byte ptr [eax-15h]
                xor     edx, dword_10083C00[edi*4]
                movzx   edi, byte ptr [eax-16h]
                xor     edx, dword_10083800[edi*4]
                mov     [eax-16h], edx
                movzx   edx, byte ptr [eax-0Fh]
                mov     edx, dword_10084400[edx*4]
                movzx   edi, byte ptr [eax-10h]
                xor     edx, dword_10084000[edi*4]
                movzx   edi, byte ptr [eax-11h]
                xor     edx, dword_10083C00[edi*4]
                movzx   edi, byte ptr [eax-12h]
                xor     edx, dword_10083800[edi*4]
                mov     [eax-12h], edx
                movzx   edx, byte ptr [eax-0Bh]
                mov     edx, dword_10084400[edx*4]
                movzx   edi, byte ptr [eax-0Ch]
                xor     edx, dword_10084000[edi*4]
                movzx   edi, byte ptr [eax-0Dh]
                xor     edx, dword_10083C00[edi*4]
                movzx   edi, byte ptr [eax-0Eh]
                xor     edx, dword_10083800[edi*4]
                mov     [eax-0Eh], edx
                movzx   edx, byte ptr [eax-7]
                mov     edx, dword_10084400[edx*4]
                movzx   edi, byte ptr [eax-8]
                xor     edx, dword_10084000[edi*4]
                movzx   edi, byte ptr [eax-9]
                xor     edx, dword_10083C00[edi*4]
                movzx   edi, byte ptr [eax-0Ah]
                xor     edx, dword_10083800[edi*4]
                mov     [eax-0Ah], edx
                movzx   edx, byte ptr [eax-3]
                movzx   edi, byte ptr [eax-4]
                mov     edx, dword_10084400[edx*4]
                xor     edx, dword_10084000[edi*4]
                movzx   edi, byte ptr [eax-5]
                xor     edx, dword_10083C00[edi*4]
                movzx   edi, byte ptr [eax-6]
                xor     edx, dword_10083800[edi*4]
                sub     ecx, 1
                mov     [eax-6], edx
                jnz     loc_10001CB0
                mov     eax, [esi]
                mov     ecx, [esi+4]
                mov     edx, [esi+8]
                mov     [esp+14Ch+var_18], eax
                mov     eax, [esi+0Ch]
                mov     [esp+14Ch+var_14], ecx
                mov     ecx, [esi]
                mov     [esp+14Ch+var_C], eax
                mov     eax, [esi+8]
                mov     [esp+14Ch+var_10], edx
                mov     edx, [esi+4]
                mov     [esp+14Ch+var_28], ecx
                mov     ecx, [esi+0Ch]
                mov     [esp+14Ch+var_20], eax
                lea     eax, [esp+14Ch+var_28]
                mov     [esp+14Ch+var_24], edx
                mov     [esp+14Ch+var_1C], ecx
                call    sub_10001010
                mov     ecx, [esp+14Ch+var_7C]
                mov     ebx, [esp+14Ch+var_78]
                mov     edi, [esp+14Ch+var_74]
                xor     ecx, [esp+14Ch+var_28]
                xor     edi, [esp+14Ch+var_24]
                mov     eax, [esp+14Ch+var_70]
                xor     ebx, [esp+14Ch+var_20]
                xor     eax, [esp+14Ch+var_1C]
                mov     [esp+14Ch+var_134], ecx
                mov     [esp+14Ch+var_138], edi
                mov     [esp+14Ch+var_130], eax
                lea     ebp, [esp+14Ch+var_84]
                mov     [esp+14Ch+var_128], 3
                jmp     short loc_10001E90
; ---------------------------------------------------------------------------

loc_10001E84:                           ; CODE XREF: sub_10001C50+580j
                mov     edi, [esp+14Ch+var_138]
                mov     ecx, [esp+14Ch+var_134]
                mov     eax, [esp+14Ch+var_130]

loc_10001E90:                           ; CODE XREF: sub_10001C50+232j
                movzx   edx, ah
                mov     esi, ebx
                shr     esi, 10h
                and     esi, 0FFh
                mov     [esp+14Ch+var_12C], esi
                mov     esi, dword_10081F00[edx*4]
                mov     edx, [esp+14Ch+var_12C]
                xor     esi, dword_10082B00[edx*4]
                mov     edx, edi
                shr     edx, 18h
                xor     esi, dword_10082F00[edx*4]
                mov     edx, ecx
                and     edx, 0FFh
                xor     esi, dword_10080F00[edx*4]
                shr     eax, 10h
                and     edi, 0FFh
                and     eax, 0FFh
                mov     eax, dword_10082B00[eax*4]
                movzx   edx, ch
                xor     eax, dword_10081F00[edx*4]
                mov     edx, ebx
                shr     edx, 18h
                xor     eax, dword_10082F00[edx*4]
                movzx   edx, byte ptr [esp+14Ch+var_138+1]
                xor     eax, dword_10080F00[edi*4]
                mov     edi, ecx
                mov     ecx, dword_10081F00[edx*4]
                mov     edx, [esp+14Ch+var_130]
                shr     edi, 10h
                and     edi, 0FFh
                xor     ecx, dword_10082B00[edi*4]
                shr     edx, 18h
                xor     ecx, dword_10082F00[edx*4]
                mov     edx, ebx
                and     edx, 0FFh
                xor     ecx, dword_10080F00[edx*4]
                mov     edx, [esp+14Ch+var_138]
                xor     ecx, [ebp-4]
                xor     eax, [ebp+0]
                xor     esi, [ebp-8]
                shr     edx, 10h
                and     edx, 0FFh
                mov     edx, dword_10082B00[edx*4]
                movzx   edi, bh
                xor     edx, dword_10081F00[edi*4]
                mov     edi, [esp+14Ch+var_134]
                shr     edi, 18h
                xor     edx, dword_10082F00[edi*4]
                mov     edi, [esp+14Ch+var_130]
                and     edi, 0FFh
                xor     edx, dword_10080F00[edi*4]
                mov     [esp+14Ch+var_24], ecx
                xor     edx, [ebp+4]
                movzx   ebx, byte ptr [esp+14Ch+var_24+2]
                movzx   edi, dh
                mov     edi, dword_10081F00[edi*4]
                xor     edi, dword_10082B00[ebx*4]
                mov     [esp+14Ch+var_134], esi
                mov     ebx, eax
                and     esi, 0FFh
                shr     ebx, 18h
                xor     edi, dword_10082F00[ebx*4]
                mov     ebx, [esp+14Ch+var_134]
                xor     edi, dword_10080F00[esi*4]
                mov     [esp+14Ch+var_1C], edx
                xor     edi, [ebp-18h]
                movzx   esi, byte ptr [esp+14Ch+var_1C+2]
                mov     esi, dword_10082B00[esi*4]
                mov     [esp+14Ch+var_28], edi
                movzx   edi, bh
                xor     esi, dword_10081F00[edi*4]
                mov     edi, ecx
                shr     edi, 18h
                xor     esi, dword_10082F00[edi*4]
                mov     [esp+14Ch+var_138], eax
                and     eax, 0FFh
                xor     esi, dword_10080F00[eax*4]
                movzx   eax, byte ptr [esp+14Ch+var_138+1]
                xor     esi, [ebp-10h]
                mov     [esp+14Ch+var_130], ecx
                mov     edi, ebx
                shr     edi, 10h
                and     edi, 0FFh
                mov     [esp+14Ch+var_12C], edi
                mov     edi, dword_10081F00[eax*4]
                mov     eax, [esp+14Ch+var_12C]
                xor     edi, dword_10082B00[eax*4]
                mov     eax, edx
                shr     eax, 18h
                xor     edi, dword_10082F00[eax*4]
                mov     eax, [esp+14Ch+var_138]
                and     ecx, 0FFh
                xor     edi, dword_10080F00[ecx*4]
                movzx   ecx, byte ptr [esp+14Ch+var_130+1]
                xor     edi, [ebp-14h]
                and     edx, 0FFh
                shr     eax, 10h
                and     eax, 0FFh
                mov     eax, dword_10082B00[eax*4]
                xor     eax, dword_10081F00[ecx*4]
                shr     ebx, 18h
                xor     eax, dword_10082F00[ebx*4]
                mov     [esp+14Ch+var_24], edi
                xor     eax, dword_10080F00[edx*4]
                movzx   ebx, byte ptr [esp+14Ch+var_24+2]
                xor     eax, [ebp-0Ch]
                mov     edx, [esp+14Ch+var_28]
                mov     [esp+14Ch+var_134], edx
                and     edx, 0FFh
                movzx   ecx, ah
                mov     ecx, dword_10081F00[ecx*4]
                xor     ecx, dword_10082B00[ebx*4]
                mov     ebx, esi
                shr     ebx, 18h
                xor     ecx, dword_10082F00[ebx*4]
                movzx   ebx, byte ptr [esp+14Ch+var_134+1]
                xor     ecx, dword_10080F00[edx*4]
                mov     [esp+14Ch+var_1C], eax
                movzx   edx, byte ptr [esp+14Ch+var_1C+2]
                mov     edx, dword_10082B00[edx*4]
                xor     edx, dword_10081F00[ebx*4]
                mov     [esp+14Ch+var_138], esi
                and     esi, 0FFh
                mov     ebx, edi
                shr     ebx, 18h
                xor     edx, dword_10082F00[ebx*4]
                mov     ebx, [esp+14Ch+var_138]
                xor     edx, dword_10080F00[esi*4]
                mov     esi, [esp+14Ch+var_134]
                xor     edx, [ebp-20h]
                shr     esi, 10h
                mov     [esp+14Ch+var_20], edx
                movzx   edx, bh
                mov     edx, dword_10081F00[edx*4]
                and     esi, 0FFh
                xor     edx, dword_10082B00[esi*4]
                xor     ecx, [ebp-28h]
                mov     esi, eax
                shr     esi, 18h
                xor     edx, dword_10082F00[esi*4]
                mov     [esp+14Ch+var_130], edi
                movzx   esi, byte ptr [esp+14Ch+var_130+1]
                and     edi, 0FFh
                xor     edx, dword_10080F00[edi*4]
                shr     ebx, 10h
                xor     edx, [ebp-24h]
                and     ebx, 0FFh
                mov     [esp+14Ch+var_24], edx
                mov     edx, dword_10082B00[ebx*4]
                xor     edx, dword_10081F00[esi*4]
                mov     esi, [esp+14Ch+var_134]
                mov     ebx, [esp+14Ch+var_24]
                shr     esi, 18h
                xor     edx, dword_10082F00[esi*4]
                and     eax, 0FFh
                xor     edx, dword_10080F00[eax*4]
                mov     eax, [esp+14Ch+var_20]
                xor     edx, [ebp-1Ch]
                mov     [esp+14Ch+var_28], ecx
                mov     [esp+14Ch+var_1C], edx
                mov     [esp+14Ch+var_134], ecx
                mov     [esp+14Ch+var_138], eax
                sub     ebp, 30h
                sub     [esp+14Ch+var_128], 1
                mov     [esp+14Ch+var_130], edx
                jnz     loc_10001E84
                movzx   eax, byte ptr [esp+14Ch+var_20+3]
                xor     ebx, ebx
                mov     bh, byte_10083303[eax*4]
                movzx   eax, byte ptr [esp+14Ch+var_24+2]
                mov     edi, [esp+14Ch+arg_0]
                mov     ebp, [esp+14Ch+var_124]
                mov     bl, byte_10083302[eax*4]
                movzx   eax, dh
                movzx   eax, byte_10083301[eax*4]
                shl     ebx, 8
                or      ebx, eax
                movzx   eax, cl
                movzx   eax, byte_10083300[eax*4]
                shl     ebx, 8
                or      ebx, eax
                xor     ebx, [edi]
                movzx   ecx, ch
                mov     esi, ebx
                mov     eax, esi
                shr     eax, 10h
                and     eax, 0FFh
                movzx   ebx, byte_10083700[eax]
                mov     [esp+14Ch+var_12C], esi
                mov     eax, [esp+14Ch+var_12C]
                shr     esi, 18h
                mov     bh, byte_10083700[esi]
                movzx   esi, ah
                movzx   esi, byte_10083700[esi]
                shl     ebx, 8
                and     eax, 0FFh
                movzx   eax, byte_10083700[eax]
                or      ebx, esi
                mov     esi, [esp+14Ch+var_120]
                shl     ebx, 8
                or      ebx, eax
                xor     ebx, [esi]
                movzx   eax, byte ptr [esp+14Ch+var_24+3]
                mov     [ebp+0], ebx
                xor     ebx, ebx
                mov     bh, byte_10083303[eax*4]
                movzx   eax, byte ptr [esp+14Ch+var_1C+2]
                mov     bl, byte_10083302[eax*4]
                movzx   eax, byte_10083301[ecx*4]
                movzx   ecx, byte ptr [esp+14Ch+var_20]
                shl     ebx, 8
                or      ebx, eax
                movzx   eax, byte_10083300[ecx*4]
                shl     ebx, 8
                or      ebx, eax
                xor     ebx, [edi+8]
                mov     eax, ebx
                mov     ecx, eax
                shr     ecx, 10h
                and     ecx, 0FFh
                movzx   ecx, byte_10083700[ecx]
                shr     ebx, 18h
                mov     ch, byte_10083700[ebx]
                movzx   ebx, ah
                movzx   ebx, byte_10083700[ebx]
                shl     ecx, 8
                and     eax, 0FFh
                movzx   eax, byte_10083700[eax]
                or      ecx, ebx
                shl     ecx, 8
                or      ecx, eax
                xor     ecx, [esi+4]
                xor     eax, eax
                mov     [ebp+4], ecx
                movzx   ecx, byte ptr [esp+14Ch+var_1C+3]
                mov     ah, byte_10083303[ecx*4]
                movzx   ecx, byte ptr [esp+14Ch+var_28+2]
                mov     al, byte_10083302[ecx*4]
                movzx   ecx, byte ptr [esp+14Ch+var_20+1]
                movzx   ecx, byte_10083301[ecx*4]
                shl     eax, 8
                or      eax, ecx
                movzx   ecx, byte ptr [esp+14Ch+var_24]
                movzx   ecx, byte_10083300[ecx*4]
                shl     eax, 8
                or      eax, ecx
                xor     eax, [edi+4]
                mov     ecx, eax
                shr     ecx, 10h
                and     ecx, 0FFh
                movzx   ecx, byte_10083700[ecx]
                mov     ebx, eax
                shr     ebx, 18h
                mov     ch, byte_10083700[ebx]
                movzx   ebx, ah
                movzx   ebx, byte_10083700[ebx]
                shl     ecx, 8
                or      ecx, ebx
                shl     ecx, 8
                and     eax, 0FFh
                movzx   eax, byte_10083700[eax]
                or      ecx, eax
                xor     ecx, [esi+8]
                xor     eax, eax
                mov     [ebp+8], ecx
                movzx   ecx, byte ptr [esp+14Ch+var_28+3]
                mov     ah, byte_10083303[ecx*4]
                movzx   ecx, byte ptr [esp+14Ch+var_20+2]
                movzx   edx, dl
                mov     al, byte_10083302[ecx*4]
                movzx   ecx, byte ptr [esp+14Ch+var_24+1]
                movzx   ecx, byte_10083301[ecx*4]
                shl     eax, 8
                or      eax, ecx
                movzx   ecx, byte_10083300[edx*4]
                shl     eax, 8
                or      eax, ecx
                xor     eax, [edi+0Ch]
                pop     edi
                mov     edx, eax
                shr     edx, 10h
                and     edx, 0FFh
                movzx   ecx, byte_10083700[edx]
                mov     edx, eax
                shr     edx, 18h
                mov     ch, byte_10083700[edx]
                movzx   edx, ah
                movzx   edx, byte_10083700[edx]
                shl     ecx, 8
                or      ecx, edx
                mov     edx, [esp+148h+var_14]
                shl     ecx, 8
                and     eax, 0FFh
                movzx   eax, byte_10083700[eax]
                or      ecx, eax
                xor     ecx, [esi+0Ch]
                mov     eax, [esp+148h+var_10]
                mov     [ebp+0Ch], ecx
                mov     ecx, [esp+148h+var_18]
                mov     [esi], ecx
                mov     ecx, [esp+148h+var_C]
                mov     [esi+4], edx
                mov     [esi+8], eax
                mov     [esi+0Ch], ecx
                mov     ecx, [esp+148h+var_8]
                pop     esi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 13Ch
                retn
sub_10001C50    endp


; int __cdecl sub_100057F0(LPCSTR lpMultiByteStr)
sub_100057F0    proc near               ; CODE XREF: BDDiscCopy(x)+66p
                                        ; BDDiscCopy(x)+75p ...

lpMultiByteStr  = dword ptr  4

                push    ebx
                push    ebp
                mov     ebp, [esp+8+lpMultiByteStr]
                push    esi
                push    edi
                push    0               ; cchWideChar
                push    0               ; lpWideCharStr
                push    0FFFFFFFFh      ; cbMultiByte
                push    ebp             ; lpMultiByteStr
                push    0               ; dwFlags
                push    0               ; CodePage
                call    ds:MultiByteToWideChar
                mov     edi, eax
                lea     ebx, [edi+edi+2]
                push    ebx             ; size_t
                call    crt_malloc
                push    ebx             ; size_t
                mov     esi, eax
                push    0               ; int
                push    esi             ; void *
                call    crt_memset
                add     esp, 10h
                push    edi             ; cchWideChar
                push    esi             ; lpWideCharStr
                push    0FFFFFFFFh      ; cbMultiByte
                push    ebp             ; lpMultiByteStr
                push    0               ; dwFlags
                push    0               ; CodePage
                call    ds:MultiByteToWideChar
                push    0               ; lpUsedDefaultChar
                push    0               ; lpDefaultChar
                push    0               ; cbMultiByte
                push    0               ; lpMultiByteStr
                push    0FFFFFFFFh      ; cchWideChar
                push    esi             ; lpWideCharStr
                push    0               ; dwFlags
                push    0FDE9h          ; CodePage
                call    ds:WideCharToMultiByte
                mov     ebx, eax
                lea     ebp, [ebx+1]
                push    ebp             ; size_t
                call    crt_malloc
                push    ebp             ; size_t
                mov     edi, eax
                push    0               ; int
                push    edi             ; void *
                call    crt_memset
                add     esp, 10h
                push    0               ; lpUsedDefaultChar
                push    0               ; lpDefaultChar
                push    ebx             ; cbMultiByte
                push    edi             ; lpMultiByteStr
                push    0FFFFFFFFh      ; cchWideChar
                push    esi             ; lpWideCharStr
                push    0               ; dwFlags
                push    0FDE9h          ; CodePage
                call    ds:WideCharToMultiByte
                push    esi             ; void *
                call    crt_free
                add     esp, 4
                mov     eax, edi
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                retn
sub_100057F0    endp

; ---------------------------------------------------------------------------

; int __cdecl new8d24Obj(char *lpMultiByteStr)
new8d24Obj      proc near     c          ; CODE XREF: sub_10012320+CEp
                                        ; DATA XREF: create_bdlib+2Do

lpMultiByteStr  = dword ptr  4

                push    esi
                push    edi
                push    8D24h           ; size_t
                xor     esi, esi
                call    crt_malloc
                push    8D24h           ; size_t
                mov     edi, eax
                push    esi             ; int
                push    edi             ; void *
                call    crt_memset
                mov     eax, [esp+18h+lpMultiByteStr]
                add     esp, 10h
                cmp     dword_10085E18, esi
                jnz     short loc_100048E6
                push    eax             ; lpMultiByteStr
                call    sub_100057F0
                add     esp, 4
                mov     esi, eax

loc_100048E6:                           ; CODE XREF: new8d24Obj+29j
                push    eax             ; char *
                call    crt__strdup
                add     esp, 4
                test    esi, esi
                mov     [edi], eax
                jz      short loc_100048FE
                push    esi             ; void *
                call    crt_free
                add     esp, 4

loc_100048FE:                           ; CODE XREF: new8d24Obj+43j
                mov     eax, edi
                pop     edi
                pop     esi
                retn
new8d24Obj      endp
sub_1000EC60    proc near               ; CODE XREF: createkeyfile_wraper2+A3p
                                        ; sub_10011310+18p

var_11C         = dword ptr -11Ch
var_118         = dword ptr -118h
var_114         = dword ptr -114h
MultiByteStr    = byte ptr -110h
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                sub     esp, 11Ch
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+11Ch+var_4], eax
                mov     eax, [esp+11Ch+arg_0]
                push    ebp
                mov     [esp+120h+var_118], eax
                mov     eax, [esp+120h+arg_4]
                push    esi
                lea     ebp, [esp+14h]
                push    edi
                mov     [esp+128h+var_114], ecx
                mov     [esp+128h+var_11C], 1
                sub     ebp, eax
                jmp     short loc_1000ECA0
; ---------------------------------------------------------------------------
                align 10h

loc_1000ECA0:                           ; CODE XREF: sub_1000EC60+3Bj
                                        ; sub_1000EC60+4Aj
                mov     cl, [eax]
                mov     [eax+ebp], cl
                add     eax, 1
                test    cl, cl
                jnz     short loc_1000ECA0
                lea     edi, [esp+128h+MultiByteStr]
                add     edi, 0FFFFFFFFh

loc_1000ECB3:                           ; CODE XREF: sub_1000EC60+5Bj
                mov     al, [edi+1]
                add     edi, 1
                test    al, al
                jnz     short loc_1000ECB3
                mov     ecx, 5
                mov     esi, offset aAacs_mvMkb_rw_ ; "/AACS_mv/MKB_RW_mv.inf"
                rep movsd
                movsw
                lea     edx, [esp+128h+MultiByteStr]
                push    offset aRb      ; "rb"
                push    edx             ; lpMultiByteStr
                movsb
                call    sub_100084D0
                mov     edi, eax
                add     esp, 8
                test    edi, edi
                jnz     loc_1000EE13
                mov     edi, [esp+128h+arg_4]
                mov     eax, edi

loc_1000ECF1:                           ; CODE XREF: sub_1000EC60+9Bj
                mov     cl, [eax]
                mov     [eax+ebp], cl
                add     eax, 1
                test    cl, cl
                jnz     short loc_1000ECF1
                lea     eax, [esp+128h+MultiByteStr]
                add     eax, 0FFFFFFFFh

loc_1000ED04:                           ; CODE XREF: sub_1000EC60+ACj
                mov     cl, [eax+1]
                add     eax, 1
                test    cl, cl
                jnz     short loc_1000ED04
                mov     ecx, ds:dword_10060244
                mov     edx, ds:dword_10060248
                mov     [eax], ecx
                mov     ecx, ds:dword_1006024C
                mov     [eax+4], edx
                mov     edx, ds:dword_10060250
                mov     [eax+8], ecx
                mov     cl, ds:byte_10060254
                mov     [eax+0Ch], edx
                lea     edx, [esp+128h+MultiByteStr]
                push    offset aRb      ; "rb"
                push    edx             ; lpMultiByteStr
                mov     [eax+10h], cl
                call    sub_100084D0
                add     esp, 8
                test    eax, eax
                jz      short loc_1000EDAA
                push    eax
                mov     eax, [eax+4]
                call    eax
                add     esp, 4
                mov     eax, edi
                jmp     short loc_1000ED60
; ---------------------------------------------------------------------------
                align 10h

loc_1000ED60:                           ; CODE XREF: sub_1000EC60+FBj
                                        ; sub_1000EC60+10Aj
                mov     cl, [eax]
                mov     [eax+ebp], cl
                add     eax, 1
                test    cl, cl
                jnz     short loc_1000ED60
                lea     edi, [esp+128h+MultiByteStr]
                add     edi, 0FFFFFFFFh

loc_1000ED73:                           ; CODE XREF: sub_1000EC60+11Bj
                mov     al, [edi+1]
                add     edi, 1
                test    al, al
                jnz     short loc_1000ED73
                mov     ecx, 7
                mov     esi, offset aAacsAacs_avUni ; "/AACS/AACS_av/Unit_Key_RW.inf"
                rep movsd
                lea     ecx, [esp+128h+MultiByteStr]
                push    offset aRb      ; "rb"
                push    ecx             ; lpMultiByteStr
                movsw
                call    sub_100084D0
                mov     edi, eax
                add     esp, 8
                test    edi, edi
                jnz     short loc_1000EE13
                mov     edi, [esp+128h+arg_4]

loc_1000EDAA:                           ; CODE XREF: sub_1000EC60+EEj
                mov     esi, [esp+128h+var_118]
                mov     byte ptr [esi+0Dh], 0
                mov     eax, edi

loc_1000EDB4:                           ; CODE XREF: sub_1000EC60+15Ej
                mov     cl, [eax]
                mov     [eax+ebp], cl
                add     eax, 1
                test    cl, cl
                jnz     short loc_1000EDB4
                lea     eax, [esp+128h+MultiByteStr]
                add     eax, 0FFFFFFFFh

loc_1000EDC7:                           ; CODE XREF: sub_1000EC60+16Fj
                mov     cl, [eax+1]
                add     eax, 1
                test    cl, cl
                jnz     short loc_1000EDC7
                mov     edx, ds:dword_10060278
                mov     ecx, ds:dword_1006027C
                mov     [eax], edx
                mov     edx, ds:dword_10060280
                mov     [eax+4], ecx
                mov     ecx, ds:dword_10060284
                mov     [eax+8], edx
                mov     dl, ds:byte_10060288
                mov     [eax+0Ch], ecx
                mov     [eax+10h], dl
                lea     eax, [esp+128h+MultiByteStr]
                push    offset aRb      ; "rb"
                push    eax             ; lpMultiByteStr
                call    sub_100084D0
                add     esp, 8
                mov     edi, eax
                jmp     short loc_1000EE21
; ---------------------------------------------------------------------------

loc_1000EE13:                           ; CODE XREF: sub_1000EC60+82j
                                        ; sub_1000EC60+141j
                mov     eax, [esp+128h+var_118]
                mov     byte ptr [eax+0Dh], 1
                mov     byte ptr [eax+0Ch], 1
                mov     esi, eax

loc_1000EE21:                           ; CODE XREF: sub_1000EC60+1B1j
                test    edi, edi
                jnz     short loc_1000EE91
                mov     eax, [esp+128h+arg_4]
                mov     byte ptr [esi+0Ch], 0

loc_1000EE30:                           ; CODE XREF: sub_1000EC60+1DAj
                mov     cl, [eax]
                mov     [eax+ebp], cl
                add     eax, 1
                test    cl, cl
                jnz     short loc_1000EE30
                lea     eax, [esp+128h+MultiByteStr]
                add     eax, 0FFFFFFFFh

loc_1000EE43:                           ; CODE XREF: sub_1000EC60+1EBj
                mov     cl, [eax+1]
                add     eax, 1
                test    cl, cl
                jnz     short loc_1000EE43
                mov     ecx, ds:dword_1006028C
                mov     edx, ds:dword_10060290
                mov     [eax], ecx
                mov     ecx, ds:dword_10060294
                mov     [eax+4], edx
                mov     edx, ds:dword_10060298
                mov     [eax+8], ecx
                mov     cx, ds:word_1006029C
                mov     [eax+0Ch], edx
                lea     edx, [esp+128h+MultiByteStr]
                push    offset aRb      ; "rb"
                push    edx             ; lpMultiByteStr
                mov     [eax+10h], cx
                call    sub_100084D0
                add     esp, 8
                mov     edi, eax
                jmp     short loc_1000EE95
; ---------------------------------------------------------------------------

loc_1000EE91:                           ; CODE XREF: sub_1000EC60+1C3j
                mov     byte ptr [esi+0Ch], 1

loc_1000EE95:                           ; CODE XREF: sub_1000EC60+22Fj
                test    edi, edi
                jnz     short loc_1000EEB4
                or      eax, 0FFFFFFFFh
                pop     edi
                pop     esi
                pop     ebp
                mov     ecx, [esp+11Ch+var_4]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 11Ch
                retn
; ---------------------------------------------------------------------------

loc_1000EEB4:                           ; CODE XREF: sub_1000EC60+237j
                lea     eax, [esp+128h+MultiByteStr]
                push    2Fh             ; int
                push    eax             ; char *
                call    crt_strrchr
                add     esp, 8
                test    eax, eax
                jz      short loc_1000EECA
                mov     byte ptr [eax], 0

loc_1000EECA:                           ; CODE XREF: sub_1000EC60+265j
                mov     edx, [esp+128h+var_114]
                lea     eax, [esp+128h+MultiByteStr]
                mov     ecx, eax
                sub     edx, ecx

loc_1000EED6:                           ; CODE XREF: sub_1000EC60+280j
                mov     cl, [eax]
                mov     [edx+eax], cl
                add     eax, 1
                test    cl, cl
                jnz     short loc_1000EED6
                mov     edx, [edi+8]
                push    2
                push    0
                push    0
                push    edi
                call    edx
                mov     eax, [edi+0Ch]
                push    edi
                call    eax
                push    0
                push    0
                mov     [esi+4], eax
                mov     ecx, [edi+8]
                push    0
                push    edi
                call    ecx
                mov     edx, [esi+4]
                push    edx             ; size_t
                call    crt_malloc
                add     esp, 28h
                test    eax, eax
                mov     [esi], eax
                jnz     short loc_1000EF1F
                mov     [esp+128h+var_11C], 0FFFFFFFEh
                jmp     short loc_1000EF43
; ---------------------------------------------------------------------------

loc_1000EF1F:                           ; CODE XREF: sub_1000EC60+2B3j
                mov     ecx, [esi+4]
                mov     edx, [edi+14h]
                push    0
                push    ecx
                push    eax
                push    edi
                call    edx
                add     esp, 10h
                cmp     eax, [esi+4]
                jz      short loc_1000EF3E
                mov     [esp+128h+var_11C], 0FFFFFFFDh
                jmp     short loc_1000EF43
; ---------------------------------------------------------------------------

loc_1000EF3E:                           ; CODE XREF: sub_1000EC60+2D2j
                call    sub_1000EBD0

loc_1000EF43:                           ; CODE XREF: sub_1000EC60+2BDj
                                        ; sub_1000EC60+2DCj
                mov     eax, [edi+4]
                push    edi
                call    eax
                mov     ecx, [esp+12Ch+var_4]
                mov     eax, [esp+12Ch+var_11C]
                add     esp, 4
                pop     edi
                pop     esi
                pop     ebp
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 11Ch
                retn
sub_1000EC60    endp

; ---------------------------------------------------------------------------

createkeyfile_wraper2 proc near     c    ; CODE XREF: FillKeyInObj8d24+2Cj

var_180         = dword ptr -180h
var_17C         = dword ptr -17Ch
var_178         = dword ptr -178h
var_174         = dword ptr -174h
var_170         = dword ptr -170h
var_16C         = dword ptr -16Ch
var_168         = dword ptr -168h
var_164         = qword ptr -164h
var_157         = word ptr -157h
var_155         = byte ptr -155h
var_154         = qword ptr -154h
var_147         = word ptr -147h
var_145         = byte ptr -145h
var_144         = dword ptr -144h
var_140         = dword ptr -140h
var_13C         = dword ptr -13Ch
var_138         = dword ptr -138h
var_134         = byte ptr -134h
var_133         = dword ptr -133h
var_12F         = dword ptr -12Fh
var_12B         = dword ptr -12Bh
var_127         = dword ptr -127h
var_123         = dword ptr -123h
var_11F         = dword ptr -11Fh
var_11B         = dword ptr -11Bh
var_117         = dword ptr -117h
var_113         = word ptr -113h
var_111         = byte ptr -111h
var_110         = byte ptr -110h
var_10F         = byte ptr -10Fh
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                and     esp, 0FFFFFFF8h
                sub     esp, 184h
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+184h+var_4], eax
                push    ebx
                push    esi
                push    edi
                xor     esi, esi
                push    103h            ; size_t
                lea     eax, [esp+194h+var_10F]
                mov     edi, ecx
                push    esi             ; int
                push    eax             ; void *
                mov     [esp+19Ch+var_168], edi
                mov     [esp+19Ch+var_178], esi
                mov     [esp+19Ch+var_174], 1
                mov     [esp+19Ch+var_170], esi
                mov     [esp+19Ch+var_110], 0
                call    crt_memset
                add     esp, 0Ch
                xor     eax, eax
                lea     ecx, [edi+4]
                mov     [esp+190h+var_134], 0
                mov     [esp+190h+var_133], eax
                mov     [esp+190h+var_12F], eax
                mov     [esp+190h+var_12B], eax
                mov     [esp+190h+var_127], eax
                mov     [esp+190h+var_123], eax
                mov     [esp+190h+var_11F], eax
                mov     [esp+190h+var_11B], eax
                mov     [esp+190h+var_117], eax
                mov     [esp+190h+var_113], ax
                mov     [esp+190h+var_111], al
                mov     [esp+190h+var_180], esi
                mov     [esp+190h+var_16C], ecx
                jmp     short loc_10005094
; ---------------------------------------------------------------------------

loc_10005090:                           ; CODE XREF: createkeyfile_wraper2+304j
                                        ; createkeyfile_wraper2+324j
                mov     esi, [esp+190h+var_180]

loc_10005094:                           ; CODE XREF: createkeyfile_wraper2+8Ej
                mov     edx, [edi]
                mov     eax, [esp+190h+var_16C]
                push    edx
                push    eax
                lea     ecx, [esp+198h+var_110]
                call    sub_1000EC60
                add     esp, 8
                cmp     eax, 0FFFFFFFFh
                jnz     short loc_100050BA
                mov     [esp+190h+var_17C], 0
                jmp     short loc_10005103
; ---------------------------------------------------------------------------

loc_100050BA:                           ; CODE XREF: createkeyfile_wraper2+AEj
                test    eax, eax
                jle     short loc_10005107
                movzx   ecx, byte ptr [edi+11h]
                movzx   edx, byte ptr [edi+10h]
                push    ecx
                mov     ecx, [edi]
                push    edx
                lea     ebx, [edi+34h]
                push    ebx
                call    sub_1000FE30
                add     esp, 0Ch
                cmp     eax, 0FFFFFFFFh
                mov     [esp+190h+var_17C], eax
                jnz     short loc_100050E9
                mov     [esp+190h+var_17C], 0
                jmp     short loc_10005103
; ---------------------------------------------------------------------------

loc_100050E9:                           ; CODE XREF: createkeyfile_wraper2+DDj
                test    eax, eax
                jle     short loc_10005103
                mov     edi, [edi+38h]
                mov     ebx, [ebx]
                lea     esi, [esp+190h+var_134]
                call    sub_1000B250
                mov     edi, [esp+190h+var_168]
                mov     esi, [esp+190h+var_180]

loc_10005103:                           ; CODE XREF: createkeyfile_wraper2+B8j
                                        ; createkeyfile_wraper2+E7j ...
                mov     eax, [esp+190h+var_17C]

loc_10005107:                           ; CODE XREF: createkeyfile_wraper2+BCj
                test    eax, eax
                mov     ebx, eax
                jle     loc_1000535A
                test    esi, esi
                jnz     short loc_1000515E
                push    49h             ; size_t
                call    crt_malloc
                add     esp, 4
                mov     [esp+190h+var_180], eax
                mov     [esp+190h+var_17C], eax

loc_10005127:                           ; CODE XREF: createkeyfile_wraper2+14Aj
                movzx   eax, [esp+esi+190h+var_134]
                mov     ecx, [esp+190h+var_17C]
                push    eax
                push    offset a02x     ; "%02x"
                push    ecx             ; char *
                call    crt_sprintf
                add     [esp+19Ch+var_17C], 2
                add     esi, 1
                add     esp, 0Ch
                cmp     esi, 24h
                jb      short loc_10005127
                mov     eax, [esp+190h+var_180]
                test    eax, eax
                mov     [esp+190h+var_180], eax
                mov     esi, eax
                jz      loc_10005329

loc_1000515E:                           ; CODE XREF: createkeyfile_wraper2+113j
                mov     ecx, [esp+190h+var_174]
                test    ecx, ecx
                jz      short loc_10005181
                mov     edx, edi
                mov     ecx, esi
                call    sub_10004C90
                test    eax, eax
                jz      short loc_1000517D
                mov     esi, 10h
                jmp     loc_100052E3
; ---------------------------------------------------------------------------

loc_1000517D:                           ; CODE XREF: createkeyfile_wraper2+171j
                mov     ecx, [esp+190h+var_174]

loc_10005181:                           ; CODE XREF: createkeyfile_wraper2+164j
                cmp     dword ptr [edi+0Ch], 0Ah
                jg      loc_10005280
                xor     eax, eax
                mov     dword ptr [esp+190h+var_164+1], eax
                mov     dword ptr [esp+190h+var_164+5], eax
                mov     [esp+35h], eax
                mov     [esp+190h+var_157], ax
                mov     [esp+190h+var_155], al
                mov     byte ptr [esp+190h+var_154], al
                mov     dword ptr [esp+190h+var_154+1], eax
                mov     dword ptr [esp+190h+var_154+5], eax
                mov     [esp+45h], eax
                mov     [esp+190h+var_147], ax
                mov     [esp+190h+var_145], al
                push    ecx
                lea     eax, [esp+194h+var_178]
                mov     ecx, esi
                mov     edx, edi
                mov     byte ptr [esp+194h+var_164], 0
                mov     byte ptr [edi+8D18h], 1
                call    sub_10004F90
                mov     ebx, eax
                add     esp, 4
                test    ebx, ebx
                jl      loc_1000532E
                mov     eax, [edi+8D1Ch]
                test    eax, eax
                jz      loc_10005329
                mov     ecx, [esp+190h+var_16C]
                lea     edx, [esp+190h+var_164]
                push    edx
                push    ecx
                call    eax
                add     esp, 8
                test    eax, eax
                jle     loc_10005329
                lea     edx, [esp+190h+var_144]
                push    edx
                lea     edx, [edi+8D04h]
                lea     eax, [esp+194h+var_154]
                lea     ecx, [esp+194h+var_164]
                call    sub_1000B090
                movzx   ecx, byte ptr [edi+11h]
                movzx   edx, byte ptr [edi+10h]
                xor     eax, eax
                add     esp, 4
                mov     dword ptr [esp+190h+var_164], eax
                mov     [esp+30h], eax
                mov     [esp+34h], eax
                mov     [esp+38h], eax
                mov     dword ptr [esp+190h+var_154], eax
                mov     [esp+40h], eax
                mov     [esp+44h], eax
                mov     [esp+48h], eax
                lea     eax, [esp+190h+var_110]
                push    eax
                push    ecx
                push    edx
                lea     eax, [edi+34h]
                push    eax
                lea     ecx, [esp+1A0h+var_144]
                call    sub_10010300
                mov     esi, [esp+1A0h+var_178]
                add     esp, 10h
                mov     ebx, eax
                xor     eax, eax
                mov     [esp+190h+var_144], eax
                mov     [esp+190h+var_140], eax
                mov     [esp+190h+var_13C], eax
                mov     [esp+190h+var_138], eax
                jmp     short loc_100052CE
; ---------------------------------------------------------------------------

loc_10005280:                           ; CODE XREF: createkeyfile_wraper2+185j
                test    ecx, ecx
                jz      short loc_10005298
                push    esi
                push    edi
                call    sub_10011B70
                mov     ebx, eax
                add     esp, 8
                test    ebx, ebx
                jge     short loc_100052C9
                mov     ecx, [esp+190h+var_174]

loc_10005298:                           ; CODE XREF: createkeyfile_wraper2+282j
                push    ecx
                lea     eax, [esp+194h+var_178]
                mov     ecx, esi
                mov     edx, edi
                mov     byte ptr [edi+8D18h], 1
                call    sub_10004F90
                mov     ebx, eax
                add     esp, 4
                test    ebx, ebx
                jl      short loc_1000532E
                push    esi
                mov     eax, edi
                call    sub_10011AA0
                mov     esi, [esp+194h+var_178]
                add     esp, 4
                mov     ebx, eax
                jmp     short loc_100052CE
; ---------------------------------------------------------------------------

loc_100052C9:                           ; CODE XREF: createkeyfile_wraper2+292j
                mov     esi, 20h

loc_100052CE:                           ; CODE XREF: createkeyfile_wraper2+27Ej
                                        ; createkeyfile_wraper2+2C7j
                test    ebx, ebx
                jle     short loc_100052DF
                mov     ecx, [esp+190h+var_180]
                push    edi
                call    createkeyfile_wraper1
                add     esp, 4

loc_100052DF:                           ; CODE XREF: createkeyfile_wraper2+2D0j
                test    esi, esi
                jz      short loc_1000533B

loc_100052E3:                           ; CODE XREF: createkeyfile_wraper2+178j
                push    edi
                call    sub_10005890
                add     esp, 4
                test    eax, eax
                jg      short loc_1000533B
                xor     eax, eax
                cmp     [edi+8CDCh], eax
                mov     [esp+190h+var_170], esi
                mov     [esp+190h+var_178], eax
                mov     [esp+190h+var_174], eax
                jle     loc_10005090
                lea     ecx, [edi+3Ch]
                lea     ecx, [ecx+0]

loc_10005310:                           ; CODE XREF: createkeyfile_wraper2+322j
                mov     dword ptr [ecx], 1
                add     eax, 1
                add     ecx, 24h
                cmp     eax, [edi+8CDCh]
                jl      short loc_10005310
                jmp     loc_10005090
; ---------------------------------------------------------------------------

loc_10005329:                           ; CODE XREF: createkeyfile_wraper2+158j
                                        ; createkeyfile_wraper2+1EAj ...
                or      ebx, 0FFFFFFFFh
                jmp     short loc_1000535A
; ---------------------------------------------------------------------------

loc_1000532E:                           ; CODE XREF: createkeyfile_wraper2+1DCj
                                        ; createkeyfile_wraper2+2B4j
                cmp     byte ptr [edi+8D18h], 0
                jnz     short loc_1000535A
                xor     ebx, ebx
                jmp     short loc_1000535A
; ---------------------------------------------------------------------------

loc_1000533B:                           ; CODE XREF: createkeyfile_wraper2+2E1j
                                        ; createkeyfile_wraper2+2EEj
                mov     eax, [esp+190h+var_170]
                test    eax, eax
                jz      short loc_10005356
                test    ebx, ebx
                jle     short loc_10005356
                mov     ecx, [esp+190h+var_180]
                push    eax
                push    ecx
                push    edi
                call    sub_100121C0
                add     esp, 0Ch

loc_10005356:                           ; CODE XREF: createkeyfile_wraper2+341j
                                        ; createkeyfile_wraper2+345j
                mov     esi, [esp+190h+var_180]

loc_1000535A:                           ; CODE XREF: createkeyfile_wraper2+10Bj
                                        ; createkeyfile_wraper2+32Cj ...
                test    esi, esi
                jz      short loc_10005367
                push    esi             ; void *
                call    crt_free
                add     esp, 4

loc_10005367:                           ; CODE XREF: createkeyfile_wraper2+35Cj
                mov     ecx, [esp+190h+var_4]
                pop     edi
                pop     esi
                mov     eax, ebx
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                mov     esp, ebp
                pop     ebp
                retn
createkeyfile_wraper2 endp
; int __cdecl sub_100084D0(LPCSTR lpMultiByteStr, int)
sub_100084D0    proc near               ; CODE XREF: sub_10002B40+18Fp
                                        ; sub_10002E10+58p ...

cchWideChar     = dword ptr -4
lpMultiByteStr  = dword ptr  4
arg_4           = dword ptr  8

                push    ecx
                push    ebx
                push    ebp
                push    esi
                push    edi
                push    1Ch             ; size_t
                call    crt_malloc
                mov     ebp, ds:MultiByteToWideChar
                add     esp, 4
                push    0               ; cchWideChar
                mov     esi, eax
                mov     eax, [esp+18h+lpMultiByteStr]
                push    0               ; lpWideCharStr
                push    0FFFFFFFFh      ; cbMultiByte
                push    eax             ; lpMultiByteStr
                push    0               ; dwFlags
                push    0FDE9h          ; CodePage
                mov     dword ptr [esi+4], offset sub_10008430
                mov     dword ptr [esi+8], offset sub_10008450
                mov     dword ptr [esi+14h], offset sub_10008490
                mov     dword ptr [esi+18h], offset sub_100084B0
                mov     dword ptr [esi+0Ch], offset sub_10008470
                mov     dword ptr [esi+10h], offset sub_10008480
                call    ebp ; MultiByteToWideChar
                mov     ebx, eax
                lea     eax, [ebx+ebx+2]
                push    eax             ; size_t
                call    crt_malloc
                mov     edi, eax
                lea     eax, [ebx+ebx+2]
                push    eax             ; size_t
                push    0               ; int
                push    edi             ; void *
                call    crt_memset
                mov     ecx, [esp+24h+lpMultiByteStr]
                add     esp, 10h
                push    ebx             ; cchWideChar
                push    edi             ; lpWideCharStr
                push    0FFFFFFFFh      ; cbMultiByte
                push    ecx             ; lpMultiByteStr
                push    0               ; dwFlags
                push    0FDE9h          ; CodePage
                call    ebp ; MultiByteToWideChar
                mov     edx, [esp+14h+arg_4]
                push    0               ; cchWideChar
                push    0               ; lpWideCharStr
                push    0FFFFFFFFh      ; cbMultiByte
                push    edx             ; lpMultiByteStr
                push    0               ; dwFlags
                push    0FDE9h          ; CodePage
                call    ebp ; MultiByteToWideChar
                mov     [esp+14h+cchWideChar], eax
                lea     eax, [eax+eax+2]
                push    eax             ; size_t
                call    crt_malloc
                mov     ebx, eax
                mov     eax, [esp+18h+cchWideChar]
                lea     eax, [eax+eax+2]
                push    eax             ; size_t
                push    0               ; int
                push    ebx             ; void *
                call    crt_memset
                mov     eax, [esp+24h+cchWideChar]
                mov     ecx, [esp+24h+arg_4]
                add     esp, 10h
                push    eax             ; cchWideChar
                push    ebx             ; lpWideCharStr
                push    0FFFFFFFFh      ; cbMultiByte
                push    ecx             ; lpMultiByteStr
                push    0               ; dwFlags
                push    0FDE9h          ; CodePage
                call    ebp ; MultiByteToWideChar
                push    ebx             ; wchar_t *
                push    edi             ; wchar_t *
                call    crt__wfopen
                push    edi             ; void *
                mov     ebp, eax
                call    crt_free
                push    ebx             ; void *
                call    crt_free
                add     esp, 10h
                test    ebp, ebp
                jz      short loc_100085C9
                pop     edi
                mov     [esi], ebp
                mov     eax, esi
                pop     esi
                pop     ebp
                pop     ebx
                pop     ecx
                retn
; ---------------------------------------------------------------------------

loc_100085C9:                           ; CODE XREF: sub_100084D0+EDj
                push    esi             ; void *
                call    crt_free
                add     esp, 4
                pop     edi
                pop     esi
                pop     ebp
                xor     eax, eax
                pop     ebx
                pop     ecx
                retn
sub_100084D0    endp
sub_1000EBD0    proc near               ; CODE XREF: sub_1000EC60:loc_1000EF3Ep

var_4           = dword ptr -4

                push    ecx
                push    ebx
                push    0
                mov     bl, 81h
                mov     edx, esi
                call    sub_1000EB20
                add     esp, 4
                test    eax, eax
                jz      short loc_1000EC01
                mov     ecx, [eax+4]
                add     eax, 4
                mov     [esi+0Eh], ecx
                mov     edx, [eax+4]
                mov     [esi+12h], edx
                mov     ecx, [eax+8]
                mov     [esi+16h], ecx
                mov     edx, [eax+0Ch]
                mov     [esi+1Ah], edx
                jmp     short loc_1000EC0F
; ---------------------------------------------------------------------------

loc_1000EC01:                           ; CODE XREF: sub_1000EBD0+12j
                xor     eax, eax
                mov     [esi+0Eh], eax
                mov     [esi+12h], eax
                mov     [esi+16h], eax
                mov     [esi+1Ah], eax

loc_1000EC0F:                           ; CODE XREF: sub_1000EBD0+2Fj
                lea     eax, [esp+8+var_4]
                push    eax
                mov     bl, 10h
                mov     edx, esi
                mov     [esp+0Ch+var_4], 0
                call    sub_1000EB20
                add     esp, 4
                test    eax, eax
                pop     ebx
                jz      short loc_1000EC50
                cmp     [esp+4+var_4], 0Ch
                jb      short loc_1000EC50
                movzx   edx, byte ptr [eax+0Ah]
                xor     ecx, ecx
                mov     ch, [eax+8]
                mov     cl, [eax+9]
                movzx   eax, byte ptr [eax+0Bh]
                shl     ecx, 8
                or      ecx, edx
                shl     ecx, 8
                or      ecx, eax
                mov     [esi+8], ecx

loc_1000EC50:                           ; CODE XREF: sub_1000EBD0+5Bj
                                        ; sub_1000EBD0+61j
                pop     ecx
                retn
sub_1000EBD0    endp
sub_1000FE30    proc near               ; CODE XREF: createkeyfile_wraper2+CEp
                                        ; sub_10011310+48p

var_528         = dword ptr -528h
var_524         = dword ptr -524h
var_520         = byte ptr -520h
var_51C         = byte ptr -51Ch
var_51B         = byte ptr -51Bh
var_51A         = byte ptr -51Ah
var_519         = byte ptr -519h
var_120         = dword ptr -120h
var_11C         = dword ptr -11Ch
var_118         = dword ptr -118h
var_114         = byte ptr -114h
MultiByteStr    = byte ptr -110h
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = byte ptr  8
arg_8           = byte ptr  0Ch

                sub     esp, 530h
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+530h+var_4], eax
                cmp     [esp+530h+arg_4], 0
                mov     eax, [esp+530h+arg_0]
                push    ebx
                push    ebp
                push    esi
                mov     ebx, ecx
                mov     [esp+53Ch+var_524], eax
                push    edi
                mov     [esp+540h+var_528], 1
                mov     eax, ebx
                jz      loc_1000FFA3
                cmp     [esp+540h+arg_8], 0
                jz      loc_1000FF23
                lea     ebp, [esp+540h+MultiByteStr]
                sub     ebp, ebx

loc_1000FE84:                           ; CODE XREF: sub_1000FE30+5Ej
                mov     cl, [eax]
                mov     [eax+ebp], cl
                add     eax, 1
                test    cl, cl
                jnz     short loc_1000FE84
                lea     edi, [esp+540h+MultiByteStr]
                add     edi, 0FFFFFFFFh
                lea     ebx, [ebx+0]

loc_1000FEA0:                           ; CODE XREF: sub_1000FE30+78j
                mov     al, [edi+1]
                add     edi, 1
                test    al, al
                jnz     short loc_1000FEA0
                mov     ecx, 7
                mov     esi, offset aAacsAacs_avUni ; "/AACS/AACS_av/Unit_Key_RW.inf"
                rep movsd
                lea     ecx, [esp+540h+MultiByteStr]
                push    offset aRb      ; "rb"
                push    ecx             ; lpMultiByteStr
                movsw
                call    sub_100084D0
                add     esp, 8
                test    eax, eax
                jnz     loc_10010255
                mov     eax, ebx

loc_1000FED7:                           ; CODE XREF: sub_1000FE30+B1j
                mov     cl, [eax]
                mov     [eax+ebp], cl
                add     eax, 1
                test    cl, cl
                jnz     short loc_1000FED7
                lea     edi, [esp+540h+MultiByteStr]
                add     edi, 0FFFFFFFFh
                lea     ecx, [ecx+0]

loc_1000FEF0:                           ; CODE XREF: sub_1000FE30+C8j
                mov     al, [edi+1]
                add     edi, 1
                test    al, al
                jnz     short loc_1000FEF0
                mov     ecx, 6
                mov     esi, offset aAacs_mvUnit_ke ; "/AACS_mv/Unit_Key_RW.inf"
                rep movsd
                lea     edx, [esp+540h+MultiByteStr]
                push    offset aRb      ; "rb"
                push    edx             ; lpMultiByteStr
                movsb
                call    sub_100084D0
                add     esp, 8
                mov     ebp, eax
                jmp     loc_10010249
; ---------------------------------------------------------------------------

loc_1000FF23:                           ; CODE XREF: sub_1000FE30+45j
                lea     edx, [esp+540h+MultiByteStr]
                sub     edx, ebx
                lea     esp, [esp+0]

loc_1000FF30:                           ; CODE XREF: sub_1000FE30+10Aj
                mov     cl, [eax]
                mov     [edx+eax], cl
                add     eax, 1
                test    cl, cl
                jnz     short loc_1000FF30
                lea     eax, [esp+540h+MultiByteStr]
                add     eax, 0FFFFFFFFh

loc_1000FF46:                           ; CODE XREF: sub_1000FE30+11Ej
                mov     cl, [eax+1]
                add     eax, 1
                test    cl, cl
                jnz     short loc_1000FF46
                mov     ecx, ds:dword_100602C8
                mov     edx, ds:dword_100602CC
                mov     [eax], ecx
                mov     ecx, ds:dword_100602D0
                mov     [eax+4], edx
                mov     edx, ds:dword_100602D4
                mov     [eax+8], ecx
                mov     ecx, ds:dword_100602D8
                mov     [eax+0Ch], edx
                mov     dx, ds:word_100602DC
                mov     [eax+10h], ecx
                mov     [eax+14h], dx
                lea     eax, [esp+540h+MultiByteStr]
                push    offset aRb      ; "rb"
                push    eax             ; lpMultiByteStr
                call    sub_100084D0
                add     esp, 8
                mov     ebp, eax
                jmp     loc_10010249
; ---------------------------------------------------------------------------

loc_1000FFA3:                           ; CODE XREF: sub_1000FE30+37j
                lea     esi, [esp+540h+MultiByteStr]
                sub     esi, ebx
                lea     esp, [esp+0]

loc_1000FFB0:                           ; CODE XREF: sub_1000FE30+18Aj
                mov     cl, [eax]
                mov     [esi+eax], cl
                add     eax, 1
                test    cl, cl
                jnz     short loc_1000FFB0
                lea     eax, [esp+540h+MultiByteStr]
                add     eax, 0FFFFFFFFh

loc_1000FFC6:                           ; CODE XREF: sub_1000FE30+19Ej
                mov     cl, [eax+1]
                add     eax, 1
                test    cl, cl
                jnz     short loc_1000FFC6
                mov     ecx, ds:dword_100602E0
                mov     edx, ds:dword_100602E4
                mov     [eax], ecx
                mov     ecx, ds:dword_100602E8
                mov     [eax+4], edx
                mov     edx, ds:dword_100602EC
                mov     [eax+8], ecx
                mov     [eax+0Ch], edx
                lea     eax, [esp+540h+MultiByteStr]
                push    offset aRb      ; "rb"
                push    eax             ; lpMultiByteStr
                call    sub_100084D0
                mov     ebp, eax
                add     esp, 8
                mov     eax, ebx
                lea     esp, [esp+0]

loc_10010010:                           ; CODE XREF: sub_1000FE30+1EAj
                mov     cl, [eax]
                mov     [esi+eax], cl
                add     eax, 1
                test    cl, cl
                jnz     short loc_10010010
                lea     eax, [esp+540h+MultiByteStr]
                add     eax, 0FFFFFFFFh

loc_10010026:                           ; CODE XREF: sub_1000FE30+1FEj
                mov     cl, [eax+1]
                add     eax, 1
                test    cl, cl
                jnz     short loc_10010026
                mov     ecx, ds:dword_100602F0
                mov     dx, ds:word_100602F4
                mov     [eax], ecx
                push    0Ch             ; size_t
                mov     [eax+4], dx
                call    crt_malloc
                mov     ebx, eax
                add     esp, 4
                lea     ecx, [esp+540h+MultiByteStr]
                mov     dword ptr [ebx+4], offset loc_100076F0
                mov     dword ptr [ebx+8], offset loc_10007710
                call    sub_10010CF0
                test    eax, eax
                jz      loc_10010174
                mov     [ebx], eax
                mov     ecx, ds:dword_100602FC
                mov     eax, ds:dword_100602F8
                mov     edx, ds:dword_10060300
                mov     [esp+540h+var_11C], ecx
                lea     ecx, [esp+540h+var_520]
                mov     [esp+540h+var_120], eax
                mov     al, ds:byte_10060304
                push    ecx
                mov     [esp+544h+var_118], edx
                mov     edx, [ebx+8]
                push    ebx
                mov     [esp+548h+var_114], al
                call    edx
                add     esp, 8
                test    eax, eax
                jl      loc_100101B8
                jmp     short loc_100100C0
; ---------------------------------------------------------------------------
                align 10h

loc_100100C0:                           ; CODE XREF: sub_1000FE30+28Bj
                                        ; sub_1000FE30+382j
                lea     eax, [esp+540h+var_520]
                lea     edx, [eax+1]

loc_100100C7:                           ; CODE XREF: sub_1000FE30+29Ej
                mov     cl, [eax]
                add     eax, 1
                test    cl, cl
                jnz     short loc_100100C7
                sub     eax, edx
                cmp     eax, 0Ch
                jnz     loc_100101A2
                push    4               ; size_t
                lea     eax, [esp+544h+var_520]
                push    offset aVtkf    ; "VTKF"
                push    eax             ; char *
                call    crt_strncmp
                add     esp, 0Ch
                test    eax, eax
                jnz     loc_100101A2
                movsx   ecx, [esp+540h+var_51C]
                push    ecx             ; int
                call    crt_isdigit
                add     esp, 4
                test    eax, eax
                jz      loc_100101A2
                movsx   edx, [esp+540h+var_51B]
                push    edx             ; int
                call    crt_isdigit
                add     esp, 4
                test    eax, eax
                jz      loc_100101A2
                movsx   eax, [esp+540h+var_51A]
                push    eax             ; int
                call    crt_isdigit
                add     esp, 4
                test    eax, eax
                jz      short loc_100101A2
                mov     edi, offset a_aacs ; ".AACS"
                lea     esi, [esp+540h+var_519]
                mov     ecx, 6
                xor     edx, edx
                repe cmpsb
                jnz     short loc_100101A2
                lea     ecx, [esp+540h+var_120]
                lea     eax, [esp+540h+var_520]

loc_10010154:                           ; CODE XREF: sub_1000FE30+33Ej
                mov     dl, [eax]
                cmp     dl, [ecx]
                jnz     short loc_10010182
                test    dl, dl
                jz      short loc_10010170
                mov     dl, [eax+1]
                cmp     dl, [ecx+1]
                jnz     short loc_10010182
                add     eax, 2
                add     ecx, 2
                test    dl, dl
                jnz     short loc_10010154

loc_10010170:                           ; CODE XREF: sub_1000FE30+32Cj
                xor     eax, eax
                jmp     short loc_10010187
; ---------------------------------------------------------------------------

loc_10010174:                           ; CODE XREF: sub_1000FE30+23Bj
                push    ebx             ; void *
                call    crt_free
                add     esp, 4
                jmp     loc_10010249
; ---------------------------------------------------------------------------

loc_10010182:                           ; CODE XREF: sub_1000FE30+328j
                                        ; sub_1000FE30+334j
                sbb     eax, eax
                sbb     eax, 0FFFFFFFFh

loc_10010187:                           ; CODE XREF: sub_1000FE30+342j
                test    eax, eax
                jge     short loc_100101A2
                xor     eax, eax
                lea     ecx, [ecx+0]

loc_10010190:                           ; CODE XREF: sub_1000FE30+370j
                mov     cl, [esp+eax+540h+var_520]
                mov     byte ptr [esp+eax+540h+var_120], cl
                add     eax, 1
                test    cl, cl
                jnz     short loc_10010190

loc_100101A2:                           ; CODE XREF: sub_1000FE30+2A5j
                                        ; sub_1000FE30+2C1j ...
                mov     ecx, [ebx+8]
                lea     eax, [esp+540h+var_520]
                push    eax
                push    ebx
                call    ecx
                add     esp, 8
                test    eax, eax
                jge     loc_100100C0

loc_100101B8:                           ; CODE XREF: sub_1000FE30+285j
                mov     edx, [ebx+4]
                push    ebx
                call    edx
                lea     edi, [esp+544h+MultiByteStr]
                add     esp, 4
                add     edi, 0FFFFFFFFh
                jmp     short loc_100101D0
; ---------------------------------------------------------------------------
                align 10h

loc_100101D0:                           ; CODE XREF: sub_1000FE30+39Bj
                                        ; sub_1000FE30+3A8j
                mov     al, [edi+1]
                add     edi, 1
                test    al, al
                jnz     short loc_100101D0
                mov     ax, ds:word_1005D280
                mov     [edi], ax
                lea     eax, [esp+540h+var_120]
                mov     edx, eax
                lea     esp, [esp+0]

loc_100101F0:                           ; CODE XREF: sub_1000FE30+3C7j
                mov     cl, [eax]
                add     eax, 1
                test    cl, cl
                jnz     short loc_100101F0
                lea     edi, [esp+540h+MultiByteStr]
                sub     eax, edx
                add     edi, 0FFFFFFFFh

loc_10010205:                           ; CODE XREF: sub_1000FE30+3DDj
                mov     cl, [edi+1]
                add     edi, 1
                test    cl, cl
                jnz     short loc_10010205
                mov     ecx, eax
                shr     ecx, 2
                mov     esi, edx
                rep movsd
                mov     ecx, eax
                and     ecx, 3
                rep movsb
                lea     ecx, [esp+540h+MultiByteStr]
                push    offset aRb      ; "rb"
                push    ecx             ; lpMultiByteStr
                call    sub_100084D0
                add     esp, 8
                test    ebp, ebp
                mov     esi, eax
                jz      short loc_10010247
                test    esi, esi
                jz      short loc_10010249
                mov     edx, [ebp+4]
                push    ebp
                call    edx
                add     esp, 4

loc_10010247:                           ; CODE XREF: sub_1000FE30+408j
                mov     ebp, esi

loc_10010249:                           ; CODE XREF: sub_1000FE30+EEj
                                        ; sub_1000FE30+16Ej ...
                test    ebp, ebp
                jnz     short loc_10010257
                or      eax, 0FFFFFFFFh
                jmp     loc_100102DD
; ---------------------------------------------------------------------------

loc_10010255:                           ; CODE XREF: sub_1000FE30+9Fj
                mov     ebp, eax

loc_10010257:                           ; CODE XREF: sub_1000FE30+41Bj
                mov     eax, [ebp+8]
                push    2
                push    0
                push    0
                push    ebp
                call    eax
                mov     ecx, [ebp+0Ch]
                push    ebp
                call    ecx
                mov     edi, [esp+554h+var_524]
                push    0
                push    0
                mov     [edi+4], eax
                mov     edx, [ebp+8]
                push    0
                push    ebp
                call    edx
                mov     eax, [edi+4]
                push    eax             ; size_t
                call    crt_malloc
                add     esp, 28h
                test    eax, eax
                mov     [edi], eax
                jnz     short loc_10010293
                lea     esi, [eax-2]
                jmp     short loc_100102D2
; ---------------------------------------------------------------------------

loc_10010293:                           ; CODE XREF: sub_1000FE30+45Cj
                mov     ecx, [edi+4]
                mov     edx, [ebp+14h]
                push    0
                push    ecx
                push    eax
                push    ebp
                call    edx
                add     esp, 10h
                cmp     eax, [edi+4]
                jz      short loc_100102AF
                mov     esi, 0FFFFFFFDh
                jmp     short loc_100102D2
; ---------------------------------------------------------------------------

loc_100102AF:                           ; CODE XREF: sub_1000FE30+476j
                cmp     [esp+540h+arg_4], 0
                jz      short loc_100102C2
                mov     edx, edi
                call    sub_1000FCA0
                jmp     short loc_100102CE
; ---------------------------------------------------------------------------

loc_100102C2:                           ; CODE XREF: sub_1000FE30+487j
                call    sub_1000FD70
                mov     ecx, edi
                call    sub_1000FDE0

loc_100102CE:                           ; CODE XREF: sub_1000FE30+490j
                mov     esi, [esp+540h+var_528]

loc_100102D2:                           ; CODE XREF: sub_1000FE30+461j
                                        ; sub_1000FE30+47Dj
                mov     eax, [ebp+4]
                push    ebp
                call    eax
                add     esp, 4
                mov     eax, esi

loc_100102DD:                           ; CODE XREF: sub_1000FE30+420j
                mov     ecx, [esp+540h+var_4]
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 530h
                retn
sub_1000FE30    endp

; ---------------------------------------------------------------------------
                align 10h
sub_1000B250    proc near               ; CODE XREF: createkeyfile_wraper2+F6p
                                        ; sub_10011310+78p

var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = byte ptr -14h

                sub     esp, 1Ch
                xor     eax, eax
                mov     [esp+1Ch+var_1C], eax
                mov     [esp+1Ch+var_18], eax
                lea     eax, [esp+1Ch+var_14]
                push    eax
                call    EVP_MD_CTX_init
                call    EVP_sha1
                push    eax
                lea     ecx, [esp+24h+var_14]
                push    ecx
                call    EVP_DigestInit
                push    edi
                lea     edx, [esp+2Ch+var_14]
                push    ebx
                push    edx
                call    EVP_DigestUpdate
                lea     eax, [esp+34h+var_1C]
                push    eax
                lea     ecx, [esp+38h+var_14]
                push    esi
                push    ecx
                call    EVP_DigestFinal_ex
                lea     edx, [esp+40h+var_14]
                push    edx
                call    EVP_MD_CTX_init
                call    EVP_md5
                push    eax
                lea     eax, [esp+48h+var_14]
                push    eax
                call    EVP_DigestInit
                push    edi
                lea     ecx, [esp+50h+var_14]
                push    ebx
                push    ecx
                call    EVP_DigestUpdate
                mov     eax, [esp+58h+var_1C]
                lea     edx, [esp+58h+var_18]
                push    edx
                add     eax, esi
                push    eax
                lea     ecx, [esp+60h+var_14]
                push    ecx
                call    EVP_DigestFinal_ex
                mov     edx, [esp+64h+var_1C]
                mov     eax, [esp+64h+var_18]
                add     esp, 48h
                add     eax, edx
                add     esp, 1Ch
                retn
sub_1000B250    endp

sub_10004C90    proc near               ; CODE XREF: createkeyfile_wraper2+16Ap

var_410         = dword ptr -410h
MultiByteStr    = byte ptr -40Ch
var_40B         = byte ptr -40Bh
var_8           = dword ptr -8

                sub     esp, 410h
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+410h+var_8], eax
                push    ebx
                push    esi
                push    edi
                xor     ebx, ebx
                push    3FFh            ; size_t
                lea     eax, [esp+420h+var_40B]
                push    ebx             ; int
                push    eax             ; void *
                mov     esi, ecx
                mov     edi, edx
                mov     [esp+428h+var_410], ebx
                mov     [esp+428h+MultiByteStr], bl
                call    crt_memset
                add     esp, 0Ch
                push    esi
                mov     edx, offset aTks ; "\\xlk\\"
                lea     ecx, [esp+420h+MultiByteStr] ; lpMultiByteStr
                call    f_CreateDirectory
                lea     ecx, [esp+420h+var_410]
                add     esp, 4
                push    ecx
                mov     ecx, 3E80h
                lea     eax, [esp+420h+MultiByteStr]
                call    sub_10011750
                add     esp, 4
                cmp     eax, ebx
                jle     short loc_10004D5D
                cdq
                and     edx, 0Fh
                add     eax, edx
                sar     eax, 4
                cmp     eax, 3E8h
                jl      short loc_10004D09
                mov     eax, 3E8h

loc_10004D09:                           ; CODE XREF: sub_10004C90+72j
                cmp     eax, ebx
                mov     [edi+8CDCh], eax
                jle     short loc_10004D5F
                mov     edx, [esp+41Ch+var_410]
                lea     ecx, [edi+50h]
                mov     esi, eax
                mov     edi, 2

loc_10004D21:                           ; CODE XREF: sub_10004C90+B3j
                mov     [ecx-14h], edi
                mov     ebx, [edx]
                mov     [ecx], ebx
                mov     ebx, [edx+4]
                mov     [ecx+4], ebx
                mov     ebx, [edx+8]
                mov     [ecx+8], ebx
                mov     ebx, [edx+0Ch]
                mov     [ecx+0Ch], ebx
                add     edx, 10h
                add     ecx, 24h
                sub     esi, 1
                jnz     short loc_10004D21
                pop     edi
                pop     esi
                pop     ebx
                mov     ecx, [esp+410h+var_8]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 410h
                retn
; ---------------------------------------------------------------------------

loc_10004D5D:                           ; CODE XREF: sub_10004C90+62j
                mov     eax, ebx

loc_10004D5F:                           ; CODE XREF: sub_10004C90+81j
                mov     ecx, [esp+41Ch+var_8]
                pop     edi
                pop     esi
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 410h
                retn
sub_10004C90    endp
sub_10004F90    proc near               ; CODE XREF: createkeyfile_wraper2+1D0p
                                        ; createkeyfile_wraper2+2A8p

arg_0           = dword ptr  4

                push    ebx
                push    ebp
                push    esi
                xor     ebp, ebp
                cmp     [esp+0Ch+arg_0], ebp
                push    edi
                mov     ebx, eax
                mov     edi, ecx
                mov     esi, edx
                jz      short loc_10004FD6
                call    sub_10004E40
                test    eax, eax
                jz      short loc_10004FB5
                or      dword ptr [ebx], 1
                mov     eax, ebp
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                retn
; ---------------------------------------------------------------------------

loc_10004FB5:                           ; CODE XREF: sub_10004F90+19j
                push    edi
                push    esi
                call    sub_10011C30
                add     esp, 8
                test    eax, eax
                jl      short loc_10004FD6
                or      dword ptr [ebx], 2
                mov     edx, edi
                mov     ecx, esi
                call    sub_10004F00
                mov     eax, ebp
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                retn
; ---------------------------------------------------------------------------

loc_10004FD6:                           ; CODE XREF: sub_10004F90+10j
                                        ; sub_10004F90+31j
                push    esi
                call    sub_10004AA0
                mov     ebp, eax
                add     esp, 4
                test    ebp, ebp
                jl      short loc_10004FF7
                mov     ecx, edi
                mov     ebx, esi
                call    sub_10011D10
                mov     edx, edi
                mov     ecx, esi
                call    sub_10004F00

loc_10004FF7:                           ; CODE XREF: sub_10004F90+53j
                pop     edi
                pop     esi
                mov     eax, ebp
                pop     ebp
                pop     ebx
                retn
sub_10004F90    endp

sub_1000B090    proc near               ; CODE XREF: createkeyfile_wraper2+21Ap

var_F8          = dword ptr -0F8h
var_F4          = byte ptr -0F4h
arg_0           = dword ptr  4

                sub     esp, 0F8h
                push    ebx
                push    ebp
                push    esi
                push    edi
                mov     edi, eax
                lea     eax, [esp+108h+var_F4]
                push    eax
                push    80h
                push    ecx
                mov     ebx, edx
                call    AES_set_decrypt_key
                lea     edx, [esp+114h+var_F4]
                push    edx
                push    edi
                push    ebx
                call    AES_decrypt
                mov     edx, [esp+120h+arg_0]
                mov     ebp, ebx
                lea     ecx, [edx+1]
                mov     eax, edi
                sub     ebp, edi
                sub     edx, edi
                mov     edi, ebx
                add     esp, 18h
                sub     edi, [esp+108h+arg_0]
                lea     esi, [ebx+3]
                mov     [esp+108h+var_F8], 4

loc_1000B0E3:                           ; CODE XREF: sub_1000B090+89j
                movzx   ebx, byte ptr [eax+ebp]
                xor     bl, [eax]
                add     eax, 4
                mov     [edx+eax-4], bl
                movzx   ebx, byte ptr [edi+ecx]
                xor     bl, [eax-3]
                add     ecx, 4
                mov     [ecx-4], bl
                movzx   ebx, byte ptr [eax-2]
                xor     bl, [esi-1]
                add     esi, 4
                mov     [ecx-3], bl
                movzx   ebx, byte ptr [eax-1]
                xor     bl, [esi-4]
                sub     [esp+108h+var_F8], 1
                mov     [ecx-2], bl
                jnz     short loc_1000B0E3
                pop     edi
                pop     esi
                pop     ebp
                mov     eax, 1
                pop     ebx
                add     esp, 0F8h
                retn
sub_1000B090    endp

sub_10010300    proc near               ; CODE XREF: createkeyfile_wraper2+25Ep

var_230         = dword ptr -230h
var_22C         = dword ptr -22Ch
var_228         = dword ptr -228h
var_224         = dword ptr -224h
var_220         = dword ptr -220h
var_21C         = byte ptr -21Ch
var_124         = byte ptr -124h
var_114         = byte ptr -114h
var_8           = dword ptr -8
arg_0           = dword ptr  4
arg_4           = byte ptr  8
arg_8           = byte ptr  0Ch
arg_C           = dword ptr  10h

                sub     esp, 234h
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+234h+var_8], eax
                push    ebx
                push    ebp
                mov     ebp, [esp+23Ch+arg_0]
                push    esi
                xor     eax, eax
                push    edi
                xor     edi, edi
                cmp     [esp+244h+arg_4], al
                mov     [esp+244h+var_224], ebp
                mov     [esp+244h+var_228], ecx
                mov     [esp+244h+var_230], eax
                jnz     loc_1001044C
                mov     edx, [ebp+4]
                lea     eax, [esp+244h+var_124]
                push    eax
                mov     eax, [ebp+0]
                sub     edx, 10h
                push    edx
                push    eax
                call    calculate_volume_id_mac
                add     esp, 0Ch
                lea     edx, [edi+10h]
                lea     eax, [ebp+8CACh]
                lea     ecx, [esp+244h+var_124]

loc_10010367:                           ; CODE XREF: sub_10010300+79j
                mov     esi, [ecx]
                cmp     esi, [eax]
                jnz     short loc_1001037F
                sub     edx, 4
                add     eax, 4
                add     ecx, 4
                cmp     edx, 4
                jnb     short loc_10010367
                cmp     edx, edi
                jz      short loc_100103DC

loc_1001037F:                           ; CODE XREF: sub_10010300+6Bj
                movzx   edi, byte ptr [eax]
                movzx   esi, byte ptr [ecx]
                sub     esi, edi
                jnz     short loc_100103CE
                sub     edx, 1
                add     eax, 1
                add     ecx, 1
                test    edx, edx
                jz      short loc_100103DC
                movzx   edi, byte ptr [eax]
                movzx   esi, byte ptr [ecx]
                sub     esi, edi
                jnz     short loc_100103CE
                sub     edx, 1
                add     eax, 1
                add     ecx, 1
                test    edx, edx
                jz      short loc_100103DC
                movzx   edi, byte ptr [eax]
                movzx   esi, byte ptr [ecx]
                sub     esi, edi
                jnz     short loc_100103CE
                sub     edx, 1
                add     eax, 1
                add     ecx, 1
                test    edx, edx
                jz      short loc_100103DC
                movzx   edx, byte ptr [eax]
                movzx   esi, byte ptr [ecx]
                sub     esi, edx
                jz      short loc_100103DC

loc_100103CE:                           ; CODE XREF: sub_10010300+87j
                                        ; sub_10010300+9Ej ...
                test    esi, esi
                mov     eax, 1
                jg      short loc_100103DE
                or      eax, 0FFFFFFFFh
                jmp     short loc_100103DE
; ---------------------------------------------------------------------------

loc_100103DC:                           ; CODE XREF: sub_10010300+7Dj
                                        ; sub_10010300+94j ...
                xor     eax, eax

loc_100103DE:                           ; CODE XREF: sub_10010300+D5j
                                        ; sub_10010300+DAj
                test    eax, eax
                jz      short loc_100103EA
                or      eax, 0FFFFFFFFh
                jmp     loc_1001060E
; ---------------------------------------------------------------------------

loc_100103EA:                           ; CODE XREF: sub_10010300+E0j
                xor     edi, edi
                cmp     [ebp+8CA8h], edi
                jle     loc_1001060A
                lea     esi, [ebp+8]
                mov     ebx, 1

loc_10010400:                           ; CODE XREF: sub_10010300+145j
                cmp     [esi], ebx
                jnz     short loc_1001043A
                mov     ecx, [esp+244h+var_228]
                lea     eax, [esp+244h+var_21C]
                push    eax
                push    80h
                push    ecx
                call    AES_set_decrypt_key
                add     esp, 0Ch
                lea     eax, [esi+4]
                lea     edx, [esp+244h+var_21C]
                push    edx
                lea     ecx, [eax+10h]
                push    ecx
                push    eax
                call    AES_decrypt
                add     esp, 0Ch
                add     [esp+244h+var_230], ebx
                mov     dword ptr [esi], 2

loc_1001043A:                           ; CODE XREF: sub_10010300+102j
                add     edi, ebx
                add     esi, 24h
                cmp     edi, [ebp+8CA8h]
                jl      short loc_10010400
                jmp     loc_1001060A
; ---------------------------------------------------------------------------

loc_1001044C:                           ; CODE XREF: sub_10010300+36j
                xor     ebx, ebx
                cmp     [ebp+8CA8h], edi
                mov     [esp+244h+var_22C], edi
                mov     [esp+244h+var_220], edi
                jle     loc_1001060E
                lea     esi, [ebp+1Ch]
                jmp     short loc_10010474
; ---------------------------------------------------------------------------
                jmp     short loc_10010470
; ---------------------------------------------------------------------------
                align 10h

loc_10010470:                           ; CODE XREF: sub_10010300+167j
                                        ; sub_10010300+2F7j
                mov     ecx, [esp+244h+var_228]

loc_10010474:                           ; CODE XREF: sub_10010300+165j
                cmp     dword ptr [esi-14h], 1
                jnz     loc_100105E3
                cmp     [esp+244h+arg_8], 0
                jnz     short loc_100104BE
                lea     edx, [esp+244h+var_21C]
                push    edx
                push    80h
                push    ecx
                call    AES_set_decrypt_key
                add     esp, 0Ch
                lea     eax, [esp+244h+var_21C]
                push    eax
                lea     ecx, [esi-10h]
                push    esi
                push    ecx
                call    AES_decrypt
                add     esp, 0Ch
                add     [esp+244h+var_230], 1
                mov     dword ptr [esi-14h], 2
                jmp     loc_100105E3
; ---------------------------------------------------------------------------

loc_100104BE:                           ; CODE XREF: sub_10010300+186j
                xor     eax, eax
                mov     [esi], eax
                mov     [esi+4], eax
                mov     [esi+8], eax
                mov     [esi+0Ch], eax
                mov     eax, [esp+244h+arg_C]
                lea     edx, [esp+244h+var_114]
                sub     edx, eax
                jmp     short loc_100104E0
; ---------------------------------------------------------------------------
                align 10h

loc_100104E0:                           ; CODE XREF: sub_10010300+1DBj
                                        ; sub_10010300+1EAj
                mov     cl, [eax]
                mov     [edx+eax], cl
                add     eax, 1
                test    cl, cl
                jnz     short loc_100104E0
                lea     eax, [esp+244h+var_114]
                lea     edx, [eax+1]

loc_100104F6:                           ; CODE XREF: sub_10010300+1FDj
                mov     cl, [eax]
                add     eax, 1
                test    cl, cl
                jnz     short loc_100104F6
                add     edi, 1
                sub     eax, edx
                push    edi
                lea     edx, [esp+eax+248h+var_114]
                push    offset aCpsunit05d_cci ; "/CPSUnit%05d.cci"
                push    edx             ; char *
                call    crt_sprintf
                add     esp, 0Ch
                lea     eax, [esp+244h+var_114]
                push    offset aRb      ; "rb"
                push    eax             ; char *
                call    crt_fopen
                mov     edi, eax
                add     esp, 8
                test    edi, edi
                jz      loc_100105E3
                push    2               ; int
                push    0               ; __int32
                push    edi             ; FILE *
                call    crt_fseek
                add     esp, 0Ch
                push    edi             ; FILE *
                call    crt_ftell
                add     esp, 4
                push    edi             ; FILE *
                mov     ebp, eax
                call    crt_rewind
                add     esp, 4
                cmp     [esp+244h+var_22C], ebp
                jnb     short loc_10010574
                push    ebp             ; size_t
                push    ebx             ; void *
                call    crt_realloc
                add     esp, 8
                test    eax, eax
                jz      short loc_100105D6
                mov     ebx, eax
                mov     [esp+244h+var_22C], ebp

loc_10010574:                           ; CODE XREF: sub_10010300+25Ej
                mov     ecx, [esp+244h+var_22C]
                push    edi             ; FILE *
                push    ecx             ; size_t
                push    1               ; size_t
                push    ebx             ; void *
                call    crt_fread
                mov     ebp, [esp+254h+var_22C]
                add     esp, 10h
                cmp     eax, ebp
                jnz     short loc_100105D6
                mov     eax, [esp+244h+var_228]
                lea     edx, [esp+244h+var_21C]
                push    edx
                push    80h
                push    eax
                call    AES_set_decrypt_key
                add     esp, 0Ch
                lea     ecx, [esp+244h+var_21C]
                push    ecx
                lea     edx, [esi-10h]
                push    esi
                push    edx
                call    AES_decrypt
                add     esp, 0Ch
                test    ebx, ebx
                jz      short loc_100105CA
                push    ebp
                push    ebx
                lea     edx, [esp+24Ch+var_21C]
                mov     ecx, esi
                call    sub_1000B130
                add     esp, 8

loc_100105CA:                           ; CODE XREF: sub_10010300+2B8j
                add     [esp+244h+var_230], 1
                mov     dword ptr [esi-14h], 2

loc_100105D6:                           ; CODE XREF: sub_10010300+26Cj
                                        ; sub_10010300+28Bj
                push    edi             ; FILE *
                call    crt_fclose
                mov     ebp, [esp+248h+var_224]
                add     esp, 4

loc_100105E3:                           ; CODE XREF: sub_10010300+178j
                                        ; sub_10010300+1B9j ...
                mov     edi, [esp+244h+var_220]
                add     edi, 1
                add     esi, 24h
                cmp     edi, [ebp+8CA8h]
                mov     [esp+244h+var_220], edi
                jl      loc_10010470
                test    ebx, ebx
                jz      short loc_1001060A
                push    ebx             ; void *
                call    crt_free
                add     esp, 4

loc_1001060A:                           ; CODE XREF: sub_10010300+F2j
                                        ; sub_10010300+147j ...
                mov     eax, [esp+244h+var_230]

loc_1001060E:                           ; CODE XREF: sub_10010300+E5j
                                        ; sub_10010300+15Cj
                mov     ecx, [esp+244h+var_8]
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 234h
                retn
sub_10010300    endp

sub_10011B70    proc near               ; CODE XREF: createkeyfile_wraper2+286p

var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                sub     esp, 8
                push    ebx
                push    esi
                push    edi
                push    50h             ; size_t
                or      edi, 0FFFFFFFFh
                mov     [esp+18h+var_8], 0
                mov     [esp+18h+var_4], 0
                call    crt_malloc
                mov     edx, [esp+18h+arg_4]
                mov     esi, eax
                mov     eax, ds:dword_10060398
                mov     [esi], eax
                mov     ecx, ds:dword_1006039C
                push    48h
                push    edx
                lea     eax, [esi+8]
                push    eax
                mov     [esi+4], ecx
                call    crt_memcpy;---------------------------crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                lea     ecx, [esp+24h+var_4]
                push    ecx
                lea     eax, [edi+51h]
                mov     ecx, esi
                call    sub_100114F0
                push    esi             ; void *
                mov     ebx, eax
                call    crt_free
                add     esp, 18h
                test    ebx, ebx
                jle     short loc_10011C15
                lea     edx, [esp+14h+var_8]
                push    edx
                push    ebx
                mov     ebx, [esp+1Ch+var_4]
                push    ebx
                push    offset aHttps75_126__0 ; "https://75.126.159.226/api/v3/title_loa"...
                call    AskNetFileContent_xlsvr_title_load
                mov     edi, eax
                add     esp, 10h
                test    edi, edi
                jle     short loc_10011BFD
                mov     ecx, [esp+14h+var_8]
                mov     esi, [esp+14h+arg_0]
                call    sub_10011A50
                jmp     short loc_10011C02
; ---------------------------------------------------------------------------

loc_10011BFD:                           ; CODE XREF: sub_10011B70+7Cj
                jnz     short loc_10011C02
                or      edi, 0FFFFFFFFh

loc_10011C02:                           ; CODE XREF: sub_10011B70+8Bj
                                        ; sub_10011B70:loc_10011BFDj
                mov     eax, [esp+14h+var_8]
                test    eax, eax
                jz      short loc_10011C19
                push    eax             ; void *
                call    crt_free
                add     esp, 4
                jmp     short loc_10011C19
; ---------------------------------------------------------------------------

loc_10011C15:                           ; CODE XREF: sub_10011B70+5Ej
                mov     ebx, [esp+14h+var_4]

loc_10011C19:                           ; CODE XREF: sub_10011B70+98j
                                        ; sub_10011B70+A3j
                test    ebx, ebx
                jz      short loc_10011C26
                push    ebx             ; void *
                call    crt_free
                add     esp, 4

loc_10011C26:                           ; CODE XREF: sub_10011B70+ABj
                mov     eax, edi
                pop     edi
                pop     esi
                pop     ebx
                add     esp, 8
                retn
sub_10011B70    endp

sub_10011AA0    proc near               ; CODE XREF: createkeyfile_wraper2+2B9p

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4

                sub     esp, 10h
                push    ebx
                push    ebp
                push    esi
                push    edi
                mov     edi, eax
                xor     eax, eax
                mov     [esp+20h+var_C], eax
                mov     [esp+20h+var_10], eax
                lea     eax, [esp+20h+var_8]
                push    eax
                lea     ecx, [esp+24h+var_4]
                push    ecx
                or      ebp, 0FFFFFFFFh
                call    sub_100116B0
                mov     edx, [esp+28h+arg_0]
                mov     ecx, [esp+28h+var_4]
                mov     esi, eax
                mov     eax, [esp+28h+var_8]
                push    edx
                push    eax
                push    ecx
                push    edi
                mov     eax, esi
                call    sub_100118E0
                mov     ebx, eax
                add     esp, 18h
                test    ebx, ebx
                jz      short loc_10011B57
                lea     edx, [esp+20h+var_10]
                push    edx
                mov     eax, esi
                mov     ecx, ebx
                call    sub_100114F0
                add     esp, 4
                push    ebx             ; void *
                mov     esi, eax
                call    crt_free
                add     esp, 4
                test    esi, esi
                jle     short loc_10011B46
                mov     ecx, [esp+20h+var_10]
                lea     eax, [esp+20h+var_C]
                push    eax
                push    esi
                push    ecx
                push    offset aHttps75_126_15 ; "https://75.126.159.226/api/v3/title_sav"...
                call    AskNetFileContent_xlsvr_title_save;----------call    sub_10011580
                mov     ebx, [esp+30h+var_C]
                mov     ebp, eax
                add     esp, 10h
                test    ebp, ebp
                jle     short loc_10011B34
                mov     ecx, ebx
                mov     esi, edi
                call    sub_10011A50
                jmp     short loc_10011B39
; ---------------------------------------------------------------------------

loc_10011B34:                           ; CODE XREF: sub_10011AA0+87j
                jnz     short loc_10011B39
                or      ebp, 0FFFFFFFFh

loc_10011B39:                           ; CODE XREF: sub_10011AA0+92j
                                        ; sub_10011AA0:loc_10011B34j
                test    ebx, ebx
                jz      short loc_10011B46
                push    ebx             ; void *
                call    crt_free
                add     esp, 4

loc_10011B46:                           ; CODE XREF: sub_10011AA0+65j
                                        ; sub_10011AA0+9Bj
                mov     eax, [esp+20h+var_10]
                test    eax, eax
                jz      short loc_10011B57
                push    eax             ; void *
                call    crt_free
                add     esp, 4

loc_10011B57:                           ; CODE XREF: sub_10011AA0+45j
                                        ; sub_10011AA0+ACj
                pop     edi
                pop     esi
                mov     eax, ebp
                pop     ebp
                pop     ebx
                add     esp, 10h
                retn
sub_10011AA0    endp
sub_10005890    proc near               ; CODE XREF: createkeyfile_wraper2+2E4p

var_40C         = dword ptr -40Ch
var_408         = byte ptr -408h
var_407         = byte ptr -407h
var_4           = dword ptr -4
arg_0           = dword ptr  4

                sub     esp, 410h
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+410h+var_4], eax
                push    ebx
                push    ebp
                mov     ebp, [esp+418h+arg_0]
                push    esi
                push    edi
                xor     ebx, ebx
                push    3FFh            ; size_t
                lea     eax, [esp+424h+var_407]
                push    ebx             ; int
                push    eax             ; void *
                xor     edi, edi
                mov     [esp+42Ch+var_408], bl
                call    crt_memset
                add     esp, 0Ch
                xor     esi, esi
                lea     esp, [esp+0]

loc_100058D0:                           ; CODE XREF: sub_10005890+BCj
                mov     ecx, [ebp+0]
                push    esi
                push    ecx
                lea     edx, [esp+428h+var_408]
                push    offset aSBdmvStream05d ; "%s\\BDMV\\STREAM\\%05d.m2ts"
                push    edx             ; char *
                mov     [esp+430h+var_40C], ebx
                call    crt_sprintf
                lea     eax, [esp+430h+var_40C]
                push    eax
                mov     ecx, 1800h
                lea     eax, [esp+434h+var_408]
                call    sub_10011750
                mov     edx, [esp+434h+var_40C]
                add     esp, 14h
                test    eax, eax
                jle     short loc_10005935
                cmp     byte ptr [edx+4], 47h
                lea     eax, [edx+4]
                jnz     short loc_10005930
                lea     ecx, [edx+1800h]
                cmp     eax, ecx
                jnb     short loc_10005935
                lea     esp, [esp+0]

loc_10005920:                           ; CODE XREF: sub_10005890+9Cj
                cmp     byte ptr [eax], 47h
                jnz     short loc_10005930
                add     eax, 0C0h
                cmp     eax, ecx
                jb      short loc_10005920
                jmp     short loc_10005935
; ---------------------------------------------------------------------------

loc_10005930:                           ; CODE XREF: sub_10005890+7Dj
                                        ; sub_10005890+93j
                mov     edi, 1800h

loc_10005935:                           ; CODE XREF: sub_10005890+74j
                                        ; sub_10005890+87j ...
                cmp     edx, ebx
                jz      short loc_10005942
                push    edx             ; void *
                call    crt_free
                add     esp, 4

loc_10005942:                           ; CODE XREF: sub_10005890+A7j
                cmp     edi, ebx
                jnz     short loc_10005955
                add     esi, 1
                cmp     esi, 64h
                jl      short loc_100058D0
                mov     eax, edi
                jmp     loc_100059F9
; ---------------------------------------------------------------------------

loc_10005955:                           ; CODE XREF: sub_10005890+B4j
                push    esi
                lea     ecx, [esp+424h+var_408]
                push    offset a05d_m2ts ; "%05d.m2ts"
                push    ecx             ; char *
                call    crt_sprintf
                mov     eax, [ebp+0]
                add     esp, 0Ch
                xor     esi, esi
                cmp     dword_10085E18, ebx
                jnz     short loc_10005980
                push    eax             ; lpMultiByteStr
                call    sub_100057F0
                add     esp, 4
                mov     esi, eax

loc_10005980:                           ; CODE XREF: sub_10005890+E3j
                lea     edx, [esp+420h+var_408]
                push    edx
                push    eax             ; char
                push    offset aSBdmvStreamS ; "%s/BDMV/STREAM/%s"
                call    sub_1000AE20
                add     esp, 0Ch
                cmp     esi, ebx
                mov     edi, eax
                jz      short loc_100059A2
                push    esi             ; void *
                call    crt_free
                add     esp, 4

loc_100059A2:                           ; CODE XREF: sub_10005890+107j
                mov     eax, edi
                call    sub_10007A00
                cmp     edi, ebx
                mov     esi, eax
                jz      short loc_100059B8
                push    edi             ; void *
                call    crt_free
                add     esp, 4

loc_100059B8:                           ; CODE XREF: sub_10005890+11Dj
                cmp     esi, ebx
                jz      short loc_100059F7
                lea     eax, [esp+420h+var_408]
                push    eax             ; char *
                call    j__atol
                add     esp, 4
                push    esi
                push    ebp
                mov     [esi+1838h], eax
                call    sub_10005500    ; call by 100059d6
                mov     edi, eax
                mov     eax, [esi]
                add     esp, 8
                cmp     eax, ebx
                jz      short loc_100059EA
                mov     ecx, [eax+4]
                push    eax
                call    ecx
                add     esp, 4

loc_100059EA:                           ; CODE XREF: sub_10005890+14Fj
                push    esi             ; void *
                call    crt_free
                add     esp, 4
                mov     eax, edi
                jmp     short loc_100059F9
; ---------------------------------------------------------------------------

loc_100059F7:                           ; CODE XREF: sub_10005890+12Aj
                mov     eax, ebx

loc_100059F9:                           ; CODE XREF: sub_10005890+C0j
                                        ; sub_10005890+165j
                mov     ecx, [esp+420h+var_4]
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 410h
                retn
sub_10005890    endp
sub_100121C0    proc near               ; CODE XREF: createkeyfile_wraper2+34Ep

var_408         = dword ptr -408h
var_404         = byte ptr -404h
var_403         = byte ptr -403h
var_402         = byte ptr -402h
var_3BA         = dword ptr -3BAh
var_3B6         = dword ptr -3B6h
var_3B2         = dword ptr -3B2h
var_3AE         = dword ptr -3AEh
var_3AA         = byte ptr -3AAh
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = byte ptr  0Ch

                sub     esp, 408h
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+408h+var_4], eax
                push    ebx
                push    ebp
                mov     ebp, [esp+410h+arg_0]
                push    esi
                push    edi
                push    3FFh            ; size_t
                lea     eax, [esp+41Ch+var_403]
                push    0               ; int
                push    eax             ; void *
                mov     [esp+424h+var_408], 0
                mov     [esp+424h+var_404], 0
                call    crt_memset
                movsx   ecx, [esp+424h+arg_8]
                push    ecx
                lea     edx, [esp+428h+var_404]
                push    offset a02x     ; "%02x"
                push    edx             ; char *
                call    crt_sprintf
                mov     esi, [esp+430h+arg_4]
                mov     edx, [ebp+8D0Ch]
                mov     eax, [ebp+8D04h]
                mov     ecx, 12h
                lea     edi, [esp+430h+var_402]
                rep movsd
                mov     ecx, [ebp+8D08h]
                mov     [esp+430h+var_3B2], edx
                mov     edx, [ebp+8CDCh]
                mov     [esp+430h+var_3BA], eax
                mov     eax, [ebp+8D10h]
                add     esp, 18h
                test    edx, edx
                mov     [esp+418h+var_3B6], ecx
                mov     [esp+418h+var_3AE], eax
                mov     ebx, 5Ah
                jle     short loc_10012299
                lea     ecx, [esp+418h+var_3AA]
                lea     eax, [ebp+50h]
                mov     esi, 2
                lea     ecx, [ecx+0]

loc_10012270:                           ; CODE XREF: sub_100121C0+D7j
                cmp     [eax-14h], esi
                jnz     short loc_10012291
                mov     edi, [eax]
                mov     [ecx], edi
                mov     edi, [eax+4]
                mov     [ecx+4], edi
                mov     edi, [eax+8]
                mov     [ecx+8], edi
                mov     edi, [eax+0Ch]
                mov     [ecx+0Ch], edi
                add     ebx, 10h
                add     ecx, 10h

loc_10012291:                           ; CODE XREF: sub_100121C0+B3j
                add     eax, 24h
                sub     edx, 1
                jnz     short loc_10012270

loc_10012299:                           ; CODE XREF: sub_100121C0+9Fj
                lea     edi, [ebx+8]
                push    edi             ; size_t
                call    crt_malloc
                mov     ecx, ds:dword_10060398
                mov     esi, eax
                mov     [esi], ecx
                mov     edx, ds:dword_1006039C
                push    ebx
                lea     eax, [esp+420h+var_404]
                push    eax
                lea     ecx, [esi+8]
                push    ecx
                mov     [esi+4], edx
                call    crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                lea     edx, [esp+428h+var_408]
                push    edx
                mov     eax, edi
                mov     ecx, esi
                call    sub_100114F0
                push    esi             ; void *
                mov     edi, eax
                call    crt_free
                mov     esi, [esp+430h+var_408]
                add     esp, 18h
                test    edi, edi
                jle     short loc_100122F6
                push    0
                push    edi
                push    esi
                push    offset aHttps75_126__4 ; "https://75.126.159.226/api/v3/cache_fai"...
                call    AskNetFileContent_xlsvr_cache_fail
                add     esp, 10h

loc_100122F6:                           ; CODE XREF: sub_100121C0+123j
                test    esi, esi
                jz      short loc_10012303
                push    esi             ; void *
                call    crt_free
                add     esp, 4

loc_10012303:                           ; CODE XREF: sub_100121C0+138j
                mov     ecx, [esp+418h+var_4]
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 408h
                retn
sub_100121C0    endp
sub_1000EB20    proc near               ; CODE XREF: sub_1000EB80+13p
                                        ; sub_1000EBD0+8p ...

arg_0           = dword ptr  4

                mov     ecx, [edx]
                push    ebp
                push    esi
                mov     esi, [edx+4]
                xor     eax, eax
                test    esi, esi
                push    edi
                jbe     short loc_1000EB5F
                mov     edi, edi

loc_1000EB30:                           ; CODE XREF: sub_1000EB20+3Dj
                lea     edx, [eax+4]
                cmp     edx, esi
                ja      short loc_1000EB5F
                movzx   edi, byte ptr [ecx+eax+3]
                xor     edx, edx
                mov     dh, [ecx+eax+1]
                mov     dl, [ecx+eax+2]
                shl     edx, 8
                or      edx, edi
                mov     ebp, edx
                lea     edi, [eax+ebp]
                cmp     edi, esi
                ja      short loc_1000EB59
                cmp     [ecx+eax], bl
                jz      short loc_1000EB65

loc_1000EB59:                           ; CODE XREF: sub_1000EB20+32j
                mov     eax, edi
                cmp     eax, esi
                jb      short loc_1000EB30

loc_1000EB5F:                           ; CODE XREF: sub_1000EB20+Cj
                                        ; sub_1000EB20+15j
                pop     edi
                pop     esi
                xor     eax, eax
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_1000EB65:                           ; CODE XREF: sub_1000EB20+37j
                mov     edx, [esp+0Ch+arg_0]
                test    edx, edx
                jz      short loc_1000EB6F
                mov     [edx], ebp

loc_1000EB6F:                           ; CODE XREF: sub_1000EB20+4Bj
                pop     edi
                pop     esi
                add     eax, ecx
                pop     ebp
                retn
sub_1000EB20    endp

; int __cdecl _wfindfirst64i32(LPCWSTR lpFileName, int)
__wfindfirst64i32 proc near             ; CODE XREF: sub_10010CF0+F5p
int 3;

__wfindfirst64i32 endp


sub_10010CF0    proc near               ; CODE XREF: sub_100027E0+7Dp
                                        ; sub_1000AB50+62p ...

MultiByteStr    = byte ptr -404h
var_403         = byte ptr -403h
var_4           = dword ptr -4

                sub     esp, 404h
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+404h+var_4], eax
                push    esi
                push    edi
                push    3FFh            ; size_t
                xor     edi, edi
                lea     eax, [esp+410h+var_403]
                push    edi             ; int
                push    eax             ; void *
                mov     esi, ecx
                mov     [esp+418h+MultiByteStr], 0
                call    crt_memset
                add     esp, 0Ch
                test    esi, esi
                jz      loc_10010E78
                cmp     byte ptr [esi], 0
                jz      loc_10010E78
                mov     eax, esi
                lea     edx, [eax+1]

loc_10010D38:                           ; CODE XREF: sub_10010CF0+4Fj
                mov     cl, [eax]
                add     eax, 1
                test    cl, cl
                jnz     short loc_10010D38
                sub     eax, edx
                movsx   ecx, byte ptr [esi+eax-1]
                push    ecx             ; int
                push    offset asc_1006034C ; "/\\"
                call    crt_strchr
                add     esp, 8
                test    eax, eax
                mov     edi, offset asc_10060350 ; "*"
                jnz     short loc_10010D64
                mov     edi, offset asc_10060354 ; "/*"

loc_10010D64:                           ; CODE XREF: sub_10010CF0+6Dj
                push    ebp
                push    248h            ; size_t
                call    crt_malloc
                mov     ebp, eax
                add     esp, 4
                test    ebp, ebp
                jz      loc_10010E48
                push    248h            ; size_t
                push    0               ; int
                push    ebp             ; void *
                call    crt_memset
                lea     edx, [esp+41Ch+MultiByteStr]
                add     esp, 0Ch
                mov     eax, esi
                sub     edx, esi

loc_10010D94:                           ; CODE XREF: sub_10010CF0+AEj
                mov     cl, [eax]
                mov     [edx+eax], cl
                add     eax, 1
                test    cl, cl
                jnz     short loc_10010D94
                mov     eax, edi
                mov     edx, edi

loc_10010DA4:                           ; CODE XREF: sub_10010CF0+BBj
                mov     cl, [eax]
                add     eax, 1
                test    cl, cl
                jnz     short loc_10010DA4
                lea     edi, [esp+410h+MultiByteStr]
                sub     eax, edx
                add     edi, 0FFFFFFFFh

loc_10010DB6:                           ; CODE XREF: sub_10010CF0+CEj
                mov     cl, [edi+1]
                add     edi, 1
                test    cl, cl
                jnz     short loc_10010DB6
                mov     ecx, eax
                shr     ecx, 2
                mov     esi, edx
                rep movsd
                mov     ecx, eax
                lea     edx, [esp+410h+MultiByteStr]
                and     ecx, 3
                push    edx             ; lpMultiByteStr
                rep movsb
                call    sub_10010C40
                lea     ecx, [ebp+8]
                push    ecx             ; int
                push    eax             ; lpFileName
                mov     [ebp+23Ch], eax
                call    __wfindfirst64i32
                add     esp, 0Ch
                cmp     eax, 0FFFFFFFFh
                mov     [ebp+0], eax
                jz      short loc_10010E19
                mov     dword ptr [ebp+238h], 0
                mov     eax, ebp
                pop     ebp
                pop     edi
                pop     esi
                mov     ecx, [esp+404h+var_4]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 404h
                retn
; ---------------------------------------------------------------------------

loc_10010E19:                           ; CODE XREF: sub_10010CF0+103j
                mov     edx, [ebp+23Ch]
                push    edx             ; void *
                call    crt_free
                push    ebp             ; void *
                call    crt_free
                add     esp, 8
                pop     ebp
                pop     edi
                xor     eax, eax
                pop     esi
                mov     ecx, [esp+404h+var_4]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 404h
                retn
; ---------------------------------------------------------------------------

loc_10010E48:                           ; CODE XREF: sub_10010CF0+86j
                push    ebp             ; void *
                call    crt_free
                add     esp, 4
                xor     esi, esi
                call    crt__errno
                pop     ebp
                mov     dword ptr [eax], 0Ch
                pop     edi
                mov     eax, esi
                pop     esi
                mov     ecx, [esp+404h+var_4]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 404h
                retn
; ---------------------------------------------------------------------------

loc_10010E78:                           ; CODE XREF: sub_10010CF0+34j
                                        ; sub_10010CF0+3Dj
                call    crt__errno
                mov     ecx, [esp+40Ch+var_4]
                mov     dword ptr [eax], 16h
                mov     eax, edi
                pop     edi
                pop     esi
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 404h
                retn
sub_10010CF0    endp
sub_1000FCA0    proc near               ; CODE XREF: sub_1000FE30+48Bp
                push    edi
                mov     edi, [edx+4]
                cmp     edi, 4
                mov     dword ptr [edx+8CA8h], 0
                jb      loc_1000FD69
                mov     eax, [edx]
                xor     ecx, ecx
                mov     ch, [eax]
                push    esi
                movzx   esi, byte ptr [eax+2]
                mov     cl, [eax+1]
                shl     ecx, 8
                or      ecx, esi
                movzx   esi, byte ptr [eax+3]
                shl     ecx, 8
                or      esi, ecx
                lea     ecx, [esi+2]
                cmp     ecx, edi
                ja      loc_1000FD68
                movzx   ecx, byte ptr [eax+esi]
                shl     ecx, 8
                mov     [edx+8CA8h], ecx
                movzx   eax, byte ptr [eax+esi+1]
                or      eax, ecx
                cmp     eax, 3E8h
                mov     [edx+8CA8h], eax
                jle     short loc_1000FD09
                mov     dword ptr [edx+8CA8h], 3E8h

loc_1000FD09:                           ; CODE XREF: sub_1000FCA0+5Dj
                xor     edi, edi
                cmp     [edx+8CA8h], edi
                jle     short loc_1000FD68
                lea     eax, [edx+0Ch]
                add     esi, 30h
                push    ebp
                lea     ebx, [ebx+0]

loc_1000FD20:                           ; CODE XREF: sub_1000FCA0+C5j
                lea     ecx, [esi+10h]
                cmp     ecx, [edx+4]
                ja      short loc_1000FD49
                mov     ecx, [edx]
                mov     ebp, [ecx+esi]
                add     ecx, esi
                mov     [eax], ebp
                mov     ebp, [ecx+4]
                mov     [eax+4], ebp
                mov     ebp, [ecx+8]
                mov     [eax+8], ebp
                mov     ecx, [ecx+0Ch]
                mov     dword ptr [eax-4], 1
                jmp     short loc_1000FD53
; ---------------------------------------------------------------------------

loc_1000FD49:                           ; CODE XREF: sub_1000FCA0+86j
                xor     ecx, ecx
                mov     [eax], ecx
                mov     [eax+4], ecx
                mov     [eax+8], ecx

loc_1000FD53:                           ; CODE XREF: sub_1000FCA0+A7j
                mov     [eax+0Ch], ecx
                add     edi, 1
                add     esi, 30h
                add     eax, 24h
                cmp     edi, [edx+8CA8h]
                jl      short loc_1000FD20
                pop     ebp

loc_1000FD68:                           ; CODE XREF: sub_1000FCA0+38j
                                        ; sub_1000FCA0+71j
                pop     esi

loc_1000FD69:                           ; CODE XREF: sub_1000FCA0+11j
                pop     edi
                retn
sub_1000FCA0    endp
; int __cdecl sub_10010C40(LPCSTR lpMultiByteStr)
sub_10010C40    proc near               ; CODE XREF: sub_10003100+465p
                                        ; sub_10010CF0+E5p

lpMultiByteStr  = dword ptr  4

                push    ebx
                push    ebp
                mov     ebp, [esp+8+lpMultiByteStr]
                push    esi
                push    edi
                push    0               ; cchWideChar
                push    0               ; lpWideCharStr
                push    0FFFFFFFFh      ; cbMultiByte
                push    ebp             ; lpMultiByteStr
                push    0               ; dwFlags
                push    0FDE9h          ; CodePage
                call    ds:MultiByteToWideChar
                mov     edi, eax
                lea     ebx, [edi+edi+2]
                push    ebx             ; size_t
                call    crt_malloc
                push    ebx             ; size_t
                mov     esi, eax
                push    0               ; int
                push    esi             ; void *
                call    crt_memset
                add     esp, 10h
                push    edi             ; cchWideChar
                push    esi             ; lpWideCharStr
                push    0FFFFFFFFh      ; cbMultiByte
                push    ebp             ; lpMultiByteStr
                push    0               ; dwFlags
                push    0FDE9h          ; CodePage
                call    ds:MultiByteToWideChar
                pop     edi
                mov     eax, esi
                pop     esi
                pop     ebp
                pop     ebx
                retn
sub_10010C40    endp

sub_1000FD70    proc near               ; CODE XREF: sub_1000FE30:loc_100102C2p
                push    ebx
                push    esi
                xor     ebx, ebx
                mov     esi, 80h
                xor     edx, edx
                lea     eax, [edi+0Ch]
                mov     edi, edi

loc_1000FD80:                           ; CODE XREF: sub_1000FD70+5Aj
                lea     ecx, [esi+14h]
                cmp     ecx, [edi+4]
                ja      short loc_1000FDCC
                mov     ecx, [edi]
                add     ecx, esi
                test    byte ptr [ecx], 80h
                jz      short loc_1000FDB1
                mov     ebx, [ecx+4]
                mov     [eax], ebx
                mov     ebx, [ecx+8]
                mov     [eax+4], ebx
                mov     ebx, [ecx+0Ch]
                mov     [eax+8], ebx
                mov     ecx, [ecx+10h]
                mov     dword ptr [eax-4], 1
                lea     ebx, [edx+1]
                jmp     short loc_1000FDBB
; ---------------------------------------------------------------------------

loc_1000FDB1:                           ; CODE XREF: sub_1000FD70+1Fj
                xor     ecx, ecx
                mov     [eax], ecx
                mov     [eax+4], ecx
                mov     [eax+8], ecx

loc_1000FDBB:                           ; CODE XREF: sub_1000FD70+3Fj
                mov     [eax+0Ch], ecx
                add     edx, 1
                add     esi, 24h
                add     eax, 24h
                cmp     edx, 40h
                jl      short loc_1000FD80

loc_1000FDCC:                           ; CODE XREF: sub_1000FD70+16j
                pop     esi
                mov     [edi+8CA8h], ebx
                pop     ebx
                retn
sub_1000FD70    endp

sub_1000FDE0    proc near               ; CODE XREF: sub_1000FE30+499p
                cmp     dword ptr [ecx+4], 9B0h
                jb      short loc_1000FE11
                mov     eax, [ecx]
                mov     edx, [eax+9A0h]
                add     eax, 9A0h
                add     ecx, 8CACh
                mov     [ecx], edx
                mov     edx, [eax+4]
                mov     [ecx+4], edx
                mov     edx, [eax+8]
                mov     [ecx+8], edx
                mov     eax, [eax+0Ch]
                mov     [ecx+0Ch], eax
                retn
; ---------------------------------------------------------------------------

loc_1000FE11:                           ; CODE XREF: sub_1000FDE0+7j
                xor     eax, eax
                mov     [ecx+8CACh], eax
                mov     [ecx+8CB0h], eax
                mov     [ecx+8CB4h], eax
                mov     [ecx+8CB8h], eax
                retn
sub_1000FDE0    endp





; int __fastcall f_CreateDirectory(LPSTR lpMultiByteStr, int)
f_CreateDirectory proc near             ; CODE XREF: sub_10004C90+42p
                                        ; createkeyfile_wraper1+41p ...

pszPath         = word ptr -804h
var_802         = byte ptr -802h
var_4           = dword ptr -4
arg_0           = dword ptr  4

                sub     esp, 804h
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+804h+var_4], eax
                push    ebx
                push    ebp
                mov     ebp, [esp+80Ch+arg_0]
                push    esi
                push    edi
                push    7FEh            ; size_t
                lea     eax, [esp+818h+var_802]
                push    0               ; int
                push    eax             ; void *
                mov     ebx, ecx
                mov     esi, edx
                mov     [esp+820h+pszPath], 0
                call    crt_memset
                add     esp, 0Ch
                push    1               ; fCreate
                push    23h             ; csidl
                lea     ecx, [esp+81Ch+pszPath]
                push    ecx             ; pszPath
                push    0               ; hwnd
                call    ds:SHGetSpecialFolderPathW
                mov     eax, esi
                mov     edx, esi

loc_10004BD3:                           ; CODE XREF: f_CreateDirectory+5Cj
                mov     cx, [eax]
                add     eax, 2
                test    cx, cx
                jnz     short loc_10004BD3
                lea     edi, [esp+814h+pszPath]
                sub     eax, edx
                add     edi, 0FFFFFFFEh
                jmp     short loc_10004BF0
; ---------------------------------------------------------------------------
                align 10h

loc_10004BF0:                           ; CODE XREF: f_CreateDirectory+67j
                                        ; f_CreateDirectory+7Aj
                mov     cx, [edi+2]
                add     edi, 2
                test    cx, cx
                jnz     short loc_10004BF0
                mov     ecx, eax
                shr     ecx, 2
                rep movsd
                push    0               ; psa
                lea     edx, [esp+818h+pszPath]
                mov     ecx, eax
                push    edx             ; pszPath
                and     ecx, 3
                push    0               ; hwnd
                rep movsb
                call    ds:SHCreateDirectoryExW
                push    2               ; dwFileAttributes
                lea     eax, [esp+818h+pszPath]
                push    eax             ; lpFileName
                call    ds:SetFileAttributesW
                push    0               ; lpUsedDefaultChar
                push    0               ; lpDefaultChar
                push    400h            ; cbMultiByte
                push    ebx             ; lpMultiByteStr
                push    0FFFFFFFFh      ; cchWideChar
                lea     ecx, [esp+828h+pszPath]
                push    ecx             ; lpWideCharStr
                push    0               ; dwFlags
                push    0FDE9h          ; CodePage
                call    ds:WideCharToMultiByte
                mov     eax, ebp
                mov     esi, ebp

loc_10004C48:                           ; CODE XREF: f_CreateDirectory+CFj
                mov     cl, [eax]
                add     eax, 1
                test    cl, cl
                jnz     short loc_10004C48
                sub     eax, esi
                add     ebx, 0FFFFFFFFh
                mov     edi, ebx

loc_10004C58:                           ; CODE XREF: f_CreateDirectory+E0j
                mov     cl, [edi+1]
                add     edi, 1
                test    cl, cl
                jnz     short loc_10004C58
                mov     ecx, eax
                shr     ecx, 2
                rep movsd
                mov     ecx, eax
                and     ecx, 3
                rep movsb
                mov     ecx, [esp+814h+var_4]
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 804h
                retn
f_CreateDirectory endp
sub_10011750    proc near               ; CODE XREF: sub_10004C90+58p
                                        ; sub_10004E40+50p ...

arg_0           = dword ptr  4

                push    ebx
                push    ebp
                push    esi
                push    edi
                push    offset aRb      ; "rb"
                push    eax             ; lpMultiByteStr
                mov     ebx, ecx
                xor     ebp, ebp
                call    sub_100084D0
                mov     esi, eax
                add     esp, 8
                test    esi, esi
                jz      short loc_100117DC
                mov     ecx, [esi+8]
                push    2
                push    ebp
                push    ebp
                push    esi
                call    ecx
                mov     edx, [esi+0Ch]
                push    esi
                call    edx
                push    ebp
                push    ebp
                mov     edi, eax
                mov     eax, [esi+8]
                push    ebp
                push    esi
                call    eax
                add     esp, 24h
                cmp     ebx, edi
                jge     short loc_10011790
                mov     edi, ebx

loc_10011790:                           ; CODE XREF: sub_10011750+3Cj
                push    edi             ; size_t
                call    crt_malloc
                mov     ebx, eax
                add     esp, 4
                test    ebx, ebx
                jz      short loc_100117D3
                mov     ecx, [esi+14h]
                mov     eax, edi
                cdq
                push    edx
                push    eax
                push    ebx
                push    esi
                call    ecx
                add     esp, 10h
                cmp     eax, edi
                jz      short loc_100117CB
                push    ebx             ; void *
                call    crt_free
                mov     eax, [esi+4]
                add     esp, 4
                push    esi
                call    eax
                add     esp, 4
                mov     eax, ebp
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                retn
; ---------------------------------------------------------------------------

loc_100117CB:                           ; CODE XREF: sub_10011750+60j
                mov     edx, [esp+10h+arg_0]
                mov     [edx], ebx
                mov     ebp, edi

loc_100117D3:                           ; CODE XREF: sub_10011750+4Dj
                mov     eax, [esi+4]
                push    esi
                call    eax
                add     esp, 4

loc_100117DC:                           ; CODE XREF: sub_10011750+1Aj
                pop     edi
                pop     esi
                mov     eax, ebp
                pop     ebp
                pop     ebx
                retn
sub_10011750    endp

sub_10004E40    proc near               ; CODE XREF: sub_10004F90+12p

var_410         = dword ptr -410h
MultiByteStr    = byte ptr -40Ch
var_40B         = byte ptr -40Bh
var_8           = dword ptr -8

                sub     esp, 410h
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+410h+var_8], eax
                push    ebx
                xor     ebx, ebx
                push    3FFh            ; size_t
                lea     eax, [esp+418h+var_40B]
                push    ebx             ; int
                push    eax             ; void *
                mov     [esp+420h+var_410], ebx
                mov     [esp+420h+MultiByteStr], bl
                call    crt_memset
                add     esp, 0Ch
                push    edi
                mov     edx, offset aVid ; "\\vid\\"
                lea     ecx, [esp+418h+MultiByteStr] ; lpMultiByteStr
                call    f_CreateDirectory
                lea     ecx, [esp+418h+var_410]
                add     esp, 4
                push    ecx
                lea     ecx, [ebx+10h]
                lea     eax, [esp+418h+MultiByteStr]
                call    sub_10011750
                add     esp, 4
                cmp     eax, 10h
                jnz     short loc_10004EDD
                mov     eax, [esp+414h+var_410]
                mov     edx, [eax]
                mov     [esi+8D04h], edx
                mov     ecx, [eax+4]
                mov     [esi+8D08h], ecx
                mov     edx, [eax+8]
                mov     [esi+8D0Ch], edx
                mov     eax, [eax+0Ch]
                mov     [esi+8D10h], eax
                lea     eax, [ebx+1]
                pop     ebx
                mov     ecx, [esp+410h+var_8]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 410h
                retn
; ---------------------------------------------------------------------------

loc_10004EDD:                           ; CODE XREF: sub_10004E40+5Bj
                mov     ecx, [esp+414h+var_8]
                mov     eax, ebx
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 410h
                retn
sub_10004E40    endp

sub_10011C30    proc near               ; CODE XREF: sub_10004F90+27p

var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                sub     esp, 8
                push    ebx
                push    ebp
                mov     ebp, [esp+10h+arg_0]
                push    esi
                xor     eax, eax
                push    edi
                push    50h             ; size_t
                or      ebx, 0FFFFFFFFh
                mov     [esp+1Ch+var_4], eax
                mov     [esp+1Ch+var_8], eax
                call    crt_malloc
                mov     edx, [esp+1Ch+arg_4]
                mov     esi, eax
                mov     eax, ds:dword_10060398
                mov     [esi], eax
                mov     ecx, ds:dword_1006039C
                push    48h
                push    edx
                lea     eax, [esi+8]
                push    eax
                mov     [esi+4], ecx
                call    crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                lea     ecx, [esp+28h+var_8]
                push    ecx
                lea     eax, [ebx+51h]
                mov     ecx, esi
                call    sub_100114F0
                push    esi             ; void *
                mov     edi, eax
                call    crt_free
                mov     esi, [esp+30h+var_8]
                add     esp, 18h
                test    edi, edi
                jle     short loc_10011CEB
                lea     edx, [esp+18h+var_4]
                push    edx
                push    edi
                push    esi
                push    offset aHttps75_126__1 ; "https://75.126.159.226/api/v3/volume_lo"...
                call    AskNetFileContent_xlsvr_volume_load
                mov     ebx, eax
                mov     eax, [esp+28h+var_4]
                add     esp, 10h
                cmp     ebx, 10h
                jnz     short loc_10011CD7
                mov     ecx, [eax]
                mov     [ebp+8D04h], ecx
                mov     edx, [eax+4]
                mov     [ebp+8D08h], edx
                mov     ecx, [eax+8]
                mov     [ebp+8D0Ch], ecx
                mov     edx, [eax+0Ch]
                mov     [ebp+8D10h], edx
                jmp     short loc_10011CDE
; ---------------------------------------------------------------------------

loc_10011CD7:                           ; CODE XREF: sub_10011C30+80j
                test    ebx, ebx
                jl      short loc_10011CDE
                or      ebx, 0FFFFFFFFh

loc_10011CDE:                           ; CODE XREF: sub_10011C30+A5j
                                        ; sub_10011C30+A9j
                test    eax, eax
                jz      short loc_10011CEB
                push    eax             ; void *
                call    crt_free
                add     esp, 4

loc_10011CEB:                           ; CODE XREF: sub_10011C30+61j
                                        ; sub_10011C30+B0j
                test    esi, esi
                jz      short loc_10011CF8
                push    esi             ; void *
                call    crt_free
                add     esp, 4

loc_10011CF8:                           ; CODE XREF: sub_10011C30+BDj
                pop     edi
                pop     esi
                pop     ebp
                mov     eax, ebx
                pop     ebx
                add     esp, 8
                retn
sub_10011C30    endp
sub_10004F00    proc near               ; CODE XREF: sub_10004F90+3Ap
                                        ; sub_10004F90+62p

MultiByteStr    = byte ptr -40Ch
var_40B         = byte ptr -40Bh
var_8           = dword ptr -8

                sub     esp, 40Ch
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+40Ch+var_8], eax
                push    esi
                push    edi
                push    3FFh            ; size_t
                lea     eax, [esp+418h+var_40B]
                push    0               ; int
                push    eax             ; void *
                mov     edi, ecx
                mov     esi, edx
                mov     [esp+420h+MultiByteStr], 0
                call    crt_memset
                push    esi
                mov     edx, offset aVid ; "\\vid\\"
                lea     ecx, [esp+424h+MultiByteStr] ; lpMultiByteStr
                call    f_CreateDirectory
                lea     ecx, [esp+424h+MultiByteStr]
                push    offset aWb      ; "wb"
                push    ecx             ; lpMultiByteStr
                call    sub_100084D0
                mov     esi, eax
                add     esp, 18h
                test    esi, esi
                jz      short loc_10004F71
                mov     edx, [esi+18h]
                push    0
                push    10h
                add     edi, 8D04h
                push    edi
                push    esi
                call    edx
                mov     eax, [esi+4]
                push    esi
                call    eax
                add     esp, 14h

loc_10004F71:                           ; CODE XREF: sub_10004F00+55j
                mov     ecx, [esp+414h+var_8]
                pop     edi
                pop     esi
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 40Ch
                retn
sub_10004F00    endp

sub_10004AA0    proc near               ; CODE XREF: sub_10004F90+47p

hObject         = dword ptr -20h
var_1C          = byte ptr -1Ch
var_1B          = byte ptr -1Bh
var_1A          = byte ptr -1Ah
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  4

                push    0FFFFFFFFh
                push    offset loc_1004BF18
                mov     eax,   fs:0
                push    eax
                sub     esp, 18h
                push    ebx
                push    ebp
                push    esi
                push    edi
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                push    eax
                lea     eax, [esp+38h+var_C]
                mov       fs:0, eax
                mov     ebp, [esp+38h+arg_0]
                xor     ebx, ebx
                mov     [esp+38h+hObject], ebx
                mov     [esp+38h+var_1C], bl
                mov     [esp+38h+var_1B], bl
                mov     [esp+38h+var_1A], bl
                mov     [esp+38h+var_4], ebx
                cmp     [ebp+10h], bl
                lea     eax, [esp+38h+hObject]
                mov     [esp+38h+var_18], eax
                mov     [esp+38h+var_14], ebx
                jz      short loc_10004AFA
                mov     [esp+38h+var_14], 1

loc_10004AFA:                           ; CODE XREF: sub_10004AA0+50j
                mov     ecx, [ebp+0]
                lea     esi, [esp+38h+hObject]
                call    sub_1000E8E0
                mov     esi, eax
                cmp     esi, ebx
                jl      short loc_10004B54
                lea     edi, [ebp+8D14h]
                lea     ecx, [edi+4]
                push    ecx
                lea     eax, [edi+1]
                push    eax
                lea     edx, [edi+2]
                lea     ecx, [edi+3]
                push    edi
                lea     esi, [esp+44h+var_18]
                call    sub_1000F490
                mov     esi, eax
                cmp     esi, ebx
                jl      short loc_10004B54
                mov     dl, [ebp+10h]
                mov     al, [ebp+11h]
                lea     ecx, [ebp+8CF0h]
                mov     [ecx], dl
                lea     edx, [esp+38h+var_18]
                push    edi
                push    edx
                mov     [ebp+8CF1h], al
                call    sub_10010630
                add     esp, 8
                mov     esi, eax

loc_10004B54:                           ; CODE XREF: sub_10004AA0+6Aj
                                        ; sub_10004AA0+8Ej
                mov     eax, [esp+38h+hObject]
                cmp     eax, ebx
                jz      short loc_10004B63
                push    eax             ; hObject
                call    ds:CloseHandle

loc_10004B63:                           ; CODE XREF: sub_10004AA0+BAj
                mov     eax, esi
                mov     ecx, [esp+38h+var_C]
                mov       fs:0, ecx
                pop     ecx
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                add     esp, 24h
                retn
sub_10004AA0    endp

sub_10011D10    proc near               ; CODE XREF: sub_10004F90+59p

var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_5B          = byte ptr -5Bh
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4

                sub     esp, 60h
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+60h+var_4], eax
                push    ebp
                push    esi
                push    edi
                push    57h             ; size_t
                lea     eax, [esp+70h+var_5B]
                push    0               ; int
                push    eax             ; void *
                mov     esi, ecx
                or      ebp, 0FFFFFFFFh
                mov     [esp+78h+var_60], 0
                call    crt_memset
                mov     edx, [ebx+8D08h]
                mov     eax, [ebx+8D0Ch]
                mov     ecx, 12h
                lea     edi, [esp+78h+var_5C]
                rep movsd
                mov     ecx, [ebx+8D04h]
                mov     [esp+78h+var_14], ecx
                mov     ecx, [ebx+8D10h]
                push    60h             ; size_t
                mov     [esp+7Ch+var_10], edx
                mov     [esp+7Ch+var_C], eax
                mov     [esp+7Ch+var_8], ecx
                call    crt_malloc
                mov     edx, ds:dword_10060398
                mov     esi, eax
                mov     [esi], edx
                mov     eax, ds:dword_1006039C
                push    58h
                lea     ecx, [esp+80h+var_5C]
                push    ecx
                lea     edx, [esi+8]
                push    edx
                mov     [esi+4], eax
                call    crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                lea     eax, [esp+88h+var_60]
                push    eax
                lea     eax, [ebp+61h]
                mov     ecx, esi
                call    sub_100114F0
                push    esi             ; void *
                mov     edi, eax
                call    crt_free
                mov     esi, [esp+90h+var_60]
                add     esp, 24h
                test    edi, edi
                jle     short loc_10011DCD
                push    0
                push    edi
                push    esi
                push    offset aHttps75_126__2 ; "https://75.126.159.226/api/v3/volume_sa"...
                call    AskNetFileContent_xlsvr_volume_save
                add     esp, 10h
                mov     ebp, eax

loc_10011DCD:                           ; CODE XREF: sub_10011D10+A8j
                test    esi, esi
                jz      short loc_10011DDA
                push    esi             ; void *
                call    crt_free
                add     esp, 4

loc_10011DDA:                           ; CODE XREF: sub_10011D10+BFj
                mov     ecx, [esp+6Ch+var_4]
                pop     edi
                pop     esi
                mov     eax, ebp
                pop     ebp
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 60h
                retn
sub_10011D10    endp
createkeyfile_wraper1 proc near         ; CODE XREF: createkeyfile_wraper2+2D7p

MultiByteStr    = byte ptr -408h
var_407         = byte ptr -407h
var_4           = dword ptr -4
arg_0           = dword ptr  4

                sub     esp, 408h
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+408h+var_4], eax
                push    ebx
                push    ebp
                mov     ebp, [esp+410h+arg_0]
                push    esi
                push    edi
                push    3FFh            ; size_t
                lea     eax, [esp+41Ch+var_407]
                push    0               ; int
                push    eax             ; void *
                mov     esi, ecx
                mov     [esp+424h+MultiByteStr], 0
                call    crt_memset
                push    esi
                mov     edx, offset aTks ; "\\xlk\\"
                lea     ecx, [esp+428h+MultiByteStr] ; lpMultiByteStr
                call    f_CreateDirectory
                lea     ecx, [esp+428h+MultiByteStr]
                push    offset aWb      ; "wb"
                push    ecx             ; lpMultiByteStr
                call    sub_100084D0
                mov     edi, eax
                add     esp, 18h
                test    edi, edi
                jz      short loc_10004E1B
                xor     ebx, ebx
                cmp     [ebp+8CDCh], ebx
                jle     short loc_10004E12
                lea     esi, [ebp+50h]
                jmp     short loc_10004DF0
; ---------------------------------------------------------------------------
                align 10h

loc_10004DF0:                           ; CODE XREF: createkeyfile_wraper1+6Bj
                                        ; createkeyfile_wraper1+90j
                cmp     dword ptr [esi-14h], 2
                jnz     short loc_10004E04
                mov     edx, [edi+18h]
                push    0
                push    10h
                push    esi
                push    edi
                call    edx
                add     esp, 10h

loc_10004E04:                           ; CODE XREF: createkeyfile_wraper1+74j
                add     ebx, 1
                add     esi, 24h
                cmp     ebx, [ebp+8CDCh]
                jl      short loc_10004DF0

loc_10004E12:                           ; CODE XREF: createkeyfile_wraper1+66j
                mov     eax, [edi+4]
                push    edi
                call    eax
                add     esp, 4

loc_10004E1B:                           ; CODE XREF: createkeyfile_wraper1+5Cj
                mov     ecx, [esp+418h+var_4]
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 408h
                retn
createkeyfile_wraper1 endp

; int __cdecl sub_1000AE20(char *, char)
sub_1000AE20    proc near               ; CODE XREF: .text:100056B7p
                                        ; sub_10005890+FBp ...

arg_0           = dword ptr  4
arg_4           = byte ptr  8

                push    esi
                push    edi
                mov     esi, 64h
                push    esi             ; size_t
                call    crt_malloc
                add     esp, 4

loc_1000AE30:                           ; CODE XREF: sub_1000AE20+42j
                mov     ecx, [esp+8+arg_0]
                mov     edi, eax
                lea     eax, [esp+8+arg_4]
                push    eax             ; va_list
                push    ecx             ; char *
                push    esi             ; size_t
                push    edi             ; char *
                call    crt__vsnprintf
                add     esp, 10h
                cmp     eax, 0FFFFFFFFh
                jle     short loc_1000AE54
                cmp     eax, esi
                jl      short loc_1000AE64
                lea     esi, [eax+1]
                jmp     short loc_1000AE56
; ---------------------------------------------------------------------------

loc_1000AE54:                           ; CODE XREF: sub_1000AE20+29j
                add     esi, esi

loc_1000AE56:                           ; CODE XREF: sub_1000AE20+32j
                push    esi             ; size_t
                push    edi             ; void *
                call    crt_realloc
                add     esp, 8
                test    eax, eax
                jnz     short loc_1000AE30

loc_1000AE64:                           ; CODE XREF: sub_1000AE20+2Dj
                mov     eax, edi
                pop     edi
                pop     esi
                retn
sub_1000AE20    endp

sub_10007A00    proc near               ; CODE XREF: .text:100056D0p
                                        ; sub_10005890+114p ...
                push    ebp
                mov     ebp, esp
                and     esp, 0FFFFFFF8h
                push    esi
                push    edi
                push    offset aRb      ; "rb"
                push    eax             ; lpMultiByteStr
                call    sub_100084D0
                mov     esi, eax
                add     esp, 8
                test    esi, esi
                jz      short loc_10007A66
                push    1848h           ; size_t
                call    crt_malloc
                push    1848h           ; size_t
                mov     edi, eax
                push    0               ; int
                push    edi             ; void *
                call    crt_memset
                mov     ecx, [esi+8]
                push    2
                push    0
                push    0
                push    esi
                mov     [edi], esi
                call    ecx
                mov     edx, [esi+0Ch]
                push    esi
                call    edx
                push    0
                push    0
                mov     [edi+8], eax
                mov     eax, [esi+8]
                push    0
                push    esi
                mov     [edi+0Ch], edx
                call    eax
                add     esp, 34h
                mov     eax, edi
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_10007A66:                           ; CODE XREF: sub_10007A00+1Aj
                pop     edi
                xor     eax, eax
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_10007A00    endp
; __int32 __cdecl j__atol(const char *)
j__atol         proc near               ; CODE XREF: .text:100056E9p
                                        ; sub_10005890+131p ...
                jmp     crt_atol
j__atol         endp

; call by 100059d6
; Attributes: bp-based frame

sub_10005500    proc near               ; CODE XREF: sub_10005890+141p
                                        ; DATA XREF: create_bdlib+7Ao

var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = byte ptr -14h
var_13          = dword ptr -13h
var_F           = dword ptr -0Fh
var_B           = dword ptr -0Bh
var_7           = word ptr -7
var_5           = byte ptr -5
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                and     esp, 0FFFFFFF8h
                sub     esp, 1Ch
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+1Ch+var_4], eax
                push    ebx
                mov     ebx, [ebp+arg_0]
                push    esi
                mov     esi, [ebx+8D20h]
                push    edi
                mov     edi, [ebp+arg_4]
                mov     eax, edi
                mov     [esp+28h+var_1C], 0
                call    sub_10007BB0
                mov     eax, [ebx+8CDCh]
                test    eax, eax
                jz      short loc_100055A0
                mov     [esp+28h+var_18], 0
                jle     loc_100055DC
                lea     esi, [ebx+50h]
                lea     ecx, [ecx+0]

loc_10005550:                           ; CODE XREF: sub_10005500+9Cj
                cmp     [esp+28h+var_1C], 0
                jnz     loc_100055DC
                cmp     dword ptr [esi-14h], 2
                jnz     short loc_10005588
                cmp     dword ptr [ebx+0Ch], 0Ah
                mov     [esp+28h+var_1C], esi
                mov     eax, offset decryptv2
                jg      short loc_10005575
                mov     eax, offset decryptv1

loc_10005575:                           ; CODE XREF: sub_10005500+6Ej
                lea     ecx, [esp+28h+var_1C]
                push    ecx
                mov     ecx, edi
                call    f_setdecryptfunc ; call by 1000557c
                add     esp, 4
                mov     [esp+28h+var_1C], eax

loc_10005588:                           ; CODE XREF: sub_10005500+5Fj
                mov     eax, [esp+28h+var_18]
                add     eax, 1
                add     esi, 24h
                cmp     eax, [ebx+8CDCh]
                mov     [esp+28h+var_18], eax
                jl      short loc_10005550
                jmp     short loc_100055DC
; ---------------------------------------------------------------------------

loc_100055A0:                           ; CODE XREF: sub_10005500+3Aj
                xor     eax, eax
                mov     [esp+28h+var_13], eax
                mov     [esp+28h+var_F], eax
                mov     [esp+28h+var_B], eax
                mov     [esp+28h+var_7], ax
                mov     [esp+28h+var_5], al
                lea     eax, [esp+28h+var_1C]
                lea     edx, [esp+28h+var_14]
                push    eax
                mov     eax, offset decryptv1
                mov     ecx, edi
                mov     [esp+2Ch+var_14], 0
                mov     [esp+2Ch+var_1C], edx
                call    f_setdecryptfunc ; call by 1000557c
                add     esp, 4
                mov     [esp+28h+var_1C], eax

loc_100055DC:                           ; CODE XREF: sub_10005500+44j
                                        ; sub_10005500+55j ...
                cmp     dword ptr [edi+0Ch], 0
                jl      short loc_1000562D
                jg      short loc_100055EA
                cmp     dword ptr [edi+8], 0
                jb      short loc_1000562D

loc_100055EA:                           ; CODE XREF: sub_10005500+E2j
                mov     ecx, [edi+14h]
                test    ecx, ecx
                mov     esi, [edi+10h]
                jg      short loc_1000560C
                jl      short loc_100055FA
                test    esi, esi
                ja      short loc_1000560C

loc_100055FA:                           ; CODE XREF: sub_10005500+F4j
                mov     eax, [edi+1Ch]
                cdq
                add     eax, esi
                adc     edx, ecx
                test    edx, edx
                jg      short loc_10005620
                jl      short loc_1000560C
                test    eax, eax
                ja      short loc_10005620

loc_1000560C:                           ; CODE XREF: sub_10005500+F2j
                                        ; sub_10005500+F8j ...
                push    0
                push    0
                push    0
                mov     esi, edi
                call    sub_100078E0
                add     esp, 0Ch
                test    eax, eax
                jl      short loc_1000562D

loc_10005620:                           ; CODE XREF: sub_10005500+104j
                                        ; sub_10005500+10Aj
                mov     eax, [edi+10h]
                neg     eax
                cmp     [edi+1Ch], eax
                jle     short loc_1000562D
                mov     [edi+18h], eax

loc_1000562D:                           ; CODE XREF: sub_10005500+E0j
                                        ; sub_10005500+E8j ...
                mov     ecx, [esp+28h+var_4]
                mov     eax, [esp+28h+var_1C]
                pop     edi
                pop     esi
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                mov     esp, ebp
                pop     ebp
                retn
sub_10005500    endp
f_setdecryptfunc proc near              ; CODE XREF: sub_10005500+7Cp
                                        ; sub_10005500+D0p ...

var_4           = dword ptr -4
arg_0           = dword ptr  4

                sub     esp, 8
                push    ebx
                push    ebp
                push    esi
                push    edi
                or      ebp, 0FFFFFFFFh
                mov     esi, ecx
                xor     edi, edi
                mov     ebx, 0FFFFE800h
                mov     [esp+18h+var_4], edi
                mov     [esi+1834h], eax ; -------------decrypt func addr
                lea     ecx, [ecx+0]

loc_10007A90:                           ; CODE XREF: f_setdecryptfunc+49j
                add     ebx, 1800h
                lea     ecx, [esp+18h+var_4]
                push    ecx
                adc     ebp, 0
                push    ebp
                push    ebx
                call    sub_100078E0
                add     esp, 0Ch
                test    eax, eax
                jle     short loc_10007ABD
                add     edi, 1
                cmp     edi, 0Ah
                jge     short loc_10007ABD
                cmp     [esp+18h+var_4], 0
                jz      short loc_10007A90
                jmp     short loc_10007AC4
; ---------------------------------------------------------------------------

loc_10007ABD:                           ; CODE XREF: f_setdecryptfunc+3Aj
                                        ; f_setdecryptfunc+42j
                cmp     [esp+18h+var_4], 0
                jz      short loc_10007B34

loc_10007AC4:                           ; CODE XREF: f_setdecryptfunc+4Bj
                mov     dword ptr [esi+1820h], 1
                xor     edi, edi

loc_10007AD0:                           ; CODE XREF: f_setdecryptfunc+D7j
                mov     edx, [esp+18h+arg_0]
                mov     eax, [edx+edi*4]
                mov     ecx, [eax]
                mov     [esi+1824h], ecx
                mov     edx, [eax+4]
                mov     [esi+1828h], edx
                mov     ecx, [eax+8]
                push    0
                mov     [esi+182Ch], ecx
                mov     edx, [eax+0Ch]
                push    ebp
                push    ebx
                mov     [esi+1830h], edx
                call    sub_100078E0
                add     esp, 0Ch
                test    eax, eax
                jle     short loc_10007B41
                mov     ecx, [esi+1Ch]
                cmp     ecx, 0C0h
                jbe     short loc_10007B34
                cmp     byte ptr [esi+24h], 47h
                lea     eax, [esi+24h]
                jnz     short loc_10007B41
                lea     ecx, [esi+ecx+20h]
                cmp     eax, ecx
                jnb     short loc_10007B34

loc_10007B26:                           ; CODE XREF: f_setdecryptfunc+C2j
                cmp     byte ptr [eax], 47h
                jnz     short loc_10007B41
                add     eax, 0C0h
                cmp     eax, ecx
                jb      short loc_10007B26

loc_10007B34:                           ; CODE XREF: f_setdecryptfunc+52j
                                        ; f_setdecryptfunc+A3j ...
                mov     eax, 1
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_10007B41:                           ; CODE XREF: f_setdecryptfunc+98j
                                        ; f_setdecryptfunc+ACj ...
                add     edi, 1
                cmp     edi, 1
                jl      short loc_10007AD0
                pop     edi
                mov     dword ptr [esi+1820h], 0
                pop     esi
                pop     ebp
                xor     eax, eax
                pop     ebx
                add     esp, 8
                retn
f_setdecryptfunc endp
sub_10011DF0    proc near               ; CODE XREF: sub_10004910p

var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = word ptr -8
var_6           = byte ptr -6
var_4           = dword ptr -4

                sub     esp, 18h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+18h+var_4], eax
                mov     eax, ds:dword_10060464
                mov     dx, ds:word_1006046C
                mov     ecx, ds:dword_10060468
                mov     [esp+18h+var_10], eax
                mov     al, ds:byte_1006046E
                push    ebx
                xor     ebx, ebx
                mov     [esp+1Ch+var_6], al
                push    esi
                lea     eax, [esp+20h+var_10]
                mov     [esp+20h+var_8], dx
                push    edi
                mov     [esp+24h+var_18], ebx
                mov     [esp+24h+var_14], ebx
                mov     [esp+24h+var_C], ecx
                lea     edx, [eax+1]
                lea     ebx, [ebx+0]

loc_10011E40:                           ; CODE XREF: sub_10011DF0+57j
                mov     cl, [eax]
                add     eax, 1
                cmp     cl, bl
                jnz     short loc_10011E40
                sub     eax, edx
                mov     edi, eax
                push    ebp
                lea     ebp, [edi+8]
                push    ebp             ; size_t
                call    crt_malloc
                mov     ecx, ds:dword_10060398
                mov     esi, eax
                mov     [esi], ecx
                mov     edx, ds:dword_1006039C
                push    edi
                lea     eax, [esp+30h+var_10]
                push    eax
                lea     ecx, [esi+8]
                push    ecx
                mov     [esi+4], edx
                call    crt_memcpy          ; Microsoft VisualC 2-9/net runtime
                lea     edx, [esp+38h+var_14]
                push    edx
                mov     eax, ebp
                mov     ecx, esi
                call    sub_100114F0
                push    esi             ; void *
                mov     edi, eax
                call   crt_free
                add     esp, 18h
                cmp     edi, ebx
                pop     ebp
                jle     short loc_10011EEB
                mov     ecx, [esp+24h+var_14]
                lea     eax, [esp+24h+var_18]
                push    eax
                push    edi
                push    ecx
                push    offset aHttps75_126__6 ; "https://75.126.159.226/api/v3/cert_chec"...
                call    AskNetFileContent_xlsvr_cert_check
                mov     edi, [esp+34h+var_18]
                mov     esi, eax
                add     esp, 10h
                cmp     esi, ebx
                jle     short loc_10011EC6
                push    edi             ; char *
                call    j__atol
                mov     esi, eax
                add     esp, 4
                cmp     esi, ebx

loc_10011EC6:                           ; CODE XREF: sub_10011DF0+C7j
                jge     short loc_10011ECA
                xor     esi, esi

loc_10011ECA:                           ; CODE XREF: sub_10011DF0:loc_10011EC6j
                cmp     edi, ebx
                jz      short loc_10011ED7
                push    edi             ; void *
                call    crt_free
                add     esp, 4

loc_10011ED7:                           ; CODE XREF: sub_10011DF0+DCj
                pop     edi
                mov     eax, esi
                pop     esi
                pop     ebx
                mov     ecx, [esp+18h+var_4]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 18h
                retn
; ---------------------------------------------------------------------------

loc_10011EEB:                           ; CODE XREF: sub_10011DF0+A5j
                mov     ecx, [esp+24h+var_4]
                pop     edi
                pop     esi
                mov     eax, ebx
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 18h
                retn
sub_10011DF0    endp



sub_10004910    proc near     c          ; DATA XREF: FillKeyInObj8d24+4o
                call    sub_10011DF0
                add     eax, 1
                retn
sub_10004910    endp

sub_10004920    proc near     c          ; DATA XREF: FillKeyInObj8d24+Eo

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                mov     eax, [esp+arg_0]
                push    esi
                xor     esi, esi
                cmp     eax, 1
                jge     short loc_10004955
                mov     ecx, [esp+4+arg_8]
                cmp     ecx, 5Ch
                jb      short loc_1000493A
                mov     ecx, 5Ch

loc_1000493A:                           ; CODE XREF: sub_10004920+13j
                imul    eax, 5Ch
                push    ecx
                add     eax, offset byte_10080500
                push    eax
                mov     eax, [esp+0Ch+arg_4]
                push    eax
                call    crt_memcpy          ; Microsoft VisualC 2-9/net runtime
                add     esp, 0Ch
                mov     eax, esi
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_10004955:                           ; CODE XREF: sub_10004920+Aj
                add     eax, 0FFFFFFFFh
                pop     esi
                mov     [esp+arg_0], eax
                jmp     sub_10011F00
sub_10004920    endp

sub_10011F00    proc near               ; CODE XREF: sub_10004920+3Dj

var_210         = dword ptr -210h
var_20C         = dword ptr -20Ch
var_208         = dword ptr -208h
var_204         = byte ptr -204h
var_203         = byte ptr -203h
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                sub     esp, 210h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+210h+var_4], eax
                mov     eax, [esp+210h+arg_4]
                push    1FFh            ; size_t
                lea     ecx, [esp+214h+var_203]
                push    0               ; int
                push    ecx             ; void *
                mov     [esp+21Ch+var_208], eax
                mov     [esp+21Ch+var_210], 0
                mov     [esp+21Ch+var_20C], 0
                mov     [esp+21Ch+var_204], 0
                call    crt_memset
                mov     edx, [esp+21Ch+arg_0]
                add     edx, 1
                push    edx
                lea     eax, [esp+220h+var_204]
                push    offset aD       ; "%d"
                push    eax             ; char *
                call    crt_sprintf
                lea     eax, [esp+228h+var_204]
                add     esp, 18h
                lea     ecx, [eax+1]
                lea     esp, [esp+0]

loc_10011F70:                           ; CODE XREF: sub_10011F00+77j
                mov     dl, [eax]
                add     eax, 1
                test    dl, dl
                jnz     short loc_10011F70
                push    ebp
                push    esi
                sub     eax, ecx
                push    edi
                mov     edi, eax
                lea     ebp, [edi+8]
                push    ebp             ; size_t
                call    crt_malloc
                mov     ecx, ds:dword_10060398
                mov     esi, eax
                mov     [esi], ecx
                mov     edx, ds:dword_1006039C
                push    edi
                lea     eax, [esp+224h+var_204]
                push    eax
                lea     ecx, [esi+8]
                push    ecx
                mov     [esi+4], edx
                call    crt_memcpy          ; Microsoft VisualC 2-9/net runtime
                lea     edx, [esp+22Ch+var_20C]
                push    edx
                mov     eax, ebp
                mov     ecx, esi
                call    sub_100114F0
                push    esi             ; void *
                mov     edi, eax
                call    crt_free
                add     esp, 18h
                test    edi, edi
                jle     short loc_1001203B
                mov     ecx, [esp+21Ch+var_20C]
                lea     eax, [esp+21Ch+var_210]
                push    eax
                push    edi
                push    ecx
                push    offset aHttps75_126__7 ; "https://75.126.159.226/api/v3/cert_load"...
               call    AskNetFileContent_xlsvr_cert_load
                mov     edi, [esp+22Ch+var_210]
                mov     esi, eax
                add     esp, 10h
                cmp     esi, 5Ch
                jnz     short loc_1001200D
                mov     eax, [esp+21Ch+arg_8]
                cmp     eax, 5Ch
                jl      short loc_10011FFC
                mov     eax, 5Ch

loc_10011FFC:                           ; CODE XREF: sub_10011F00+F5j
                mov     edx, [esp+21Ch+var_208]
                push    eax
                push    edi
                push    edx
                call    crt_memcpy          ; Microsoft VisualC 2-9/net runtime
                add     esp, 0Ch
                jmp     short loc_10012014
; ---------------------------------------------------------------------------

loc_1001200D:                           ; CODE XREF: sub_10011F00+E9j
                test    esi, esi
                jl      short loc_10012014
                or      esi, 0FFFFFFFFh

loc_10012014:                           ; CODE XREF: sub_10011F00+10Bj
                                        ; sub_10011F00+10Fj
                test    edi, edi
                jz      short loc_10012021
                push    edi             ; void *
                call    crt_free
                add     esp, 4

loc_10012021:                           ; CODE XREF: sub_10011F00+116j
                pop     edi
                mov     eax, esi
                pop     esi
                pop     ebp
                mov     ecx, [esp+210h+var_4]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 210h
                retn
; ---------------------------------------------------------------------------

loc_1001203B:                           ; CODE XREF: sub_10011F00+C6j
                mov     ecx, [esp+21Ch+var_4]
                pop     edi
                pop     esi
                pop     ebp
                xor     ecx, esp
                or      eax, 0FFFFFFFFh
                call    f_check_gs_failure
                add     esp, 210h
                retn
sub_10011F00    endp

                align 10h
sub_1000B990    proc near               ; CODE XREF: sub_10004970+44p

var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = dword ptr -5Ch
var_58          = byte ptr -58h
var_48          = byte ptr -48h
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                sub     esp, 70h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+70h+var_4], eax
                mov     eax, [esp+70h+arg_0]
                push    ebx
                push    ebp
                mov     ebp, [esp+78h+arg_4]
                push    esi
                push    edi
                mov     edi, [esp+80h+arg_8]
                mov     [esp+80h+var_5C], eax
                mov     [esp+80h+var_60], ecx
                mov     [esp+80h+var_6C], edx
                xor     ebx, ebx
                call    EC_KEY_new
                mov     esi, eax
                test    esi, esi
                jz      short loc_1000B9F7
                call    sub_1000B3F0
                push    eax
                push    esi
                mov     [esp+88h+var_68], eax
                call    EC_KEY_set_group
                add     esp, 8
                test    eax, eax
                push    esi             ; void *
                jnz     short loc_1000BA0F
                call    EC_KEY_free
                mov     eax, [esp+84h+var_68]
                push    eax             ; void *
                call    EC_GROUP_free
                add     esp, 8

loc_1000B9F7:                           ; CODE XREF: sub_1000B990+3Bj
                mov     eax, 0FFFFFFFEh
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                mov     ecx, [esp+70h+var_4]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 70h
                retn
; ---------------------------------------------------------------------------

loc_1000BA0F:                           ; CODE XREF: sub_1000B990+53j
                mov     eax, [esp+84h+var_5C]
                call    sub_1000B740
                add     esp, 4
                test    eax, eax
                jnz     short loc_1000BA27
                lea     edi, [eax-3]
                jmp     loc_1000BAD2
; ---------------------------------------------------------------------------

loc_1000BA27:                           ; CODE XREF: sub_1000B990+8Dj
                push    0
                push    14h
                push    ebp
                call    BN_bin2bn
                mov     ebx, eax
                add     esp, 0Ch
                test    ebx, ebx
                jz      loc_1000BB1E
                push    ebx
                push    esi
                call    EC_KEY_set_private_key
                add     esp, 8
                test    eax, eax
                jz      loc_1000BB1E
                lea     ecx, [esp+80h+var_58]
                push    ecx
                call    EVP_MD_CTX_init
                call    EVP_ecdsa
                push    eax
                lea     edx, [esp+88h+var_58]
                push    edx
                call    EVP_DigestInit
                mov     eax, [esp+8Ch+var_60]
                push    14h
                push    eax
                lea     ecx, [esp+94h+var_58]
                push    ecx
                call    EVP_DigestUpdate
                mov     edx, [esp+98h+var_6C]
                push    28h
                push    edx
                lea     eax, [esp+0A0h+var_58]
                push    eax
                call    EVP_DigestUpdate
                lea     ecx, [esp+0A4h+var_64]
                push    ecx
                lea     edx, [esp+0A8h+var_48]
                push    edx
                lea     eax, [esp+0ACh+var_58]
                push    eax
                call    EVP_DigestFinal_ex
                mov     ecx, [esp+0B0h+var_64]
                push    esi
                push    ecx
                lea     edx, [esp+0B8h+var_48]
                push    edx
                call    ECDSA_do_sign
                mov     ebp, eax
                mov     eax, [ebp+0]
                push    edi
                push    eax
                call    BN_bn2bin
                add     esp, 44h
                cmp     eax, 14h
                jz      short loc_1000BAFD
                mov     edi, 0FFFFFFFBh

loc_1000BAC9:                           ; CODE XREF: sub_1000B990+18Cj
                push    ebp
                call    ECDSA_SIG_free
                add     esp, 4

loc_1000BAD2:                           ; CODE XREF: sub_1000B990+92j
                                        ; sub_1000B990+193j
                push    esi             ; void *
                call    EC_KEY_free
                add     esp, 4
                test    ebx, ebx
                jz      short loc_1000BAE8
                push    ebx             ; void *
                call    BN_clear_free
                add     esp, 4

loc_1000BAE8:                           ; CODE XREF: sub_1000B990+14Dj
                mov     ecx, [esp+80h+var_4]
                mov     eax, edi
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 70h
                retn
; ---------------------------------------------------------------------------

loc_1000BAFD:                           ; CODE XREF: sub_1000B990+132j
                mov     ecx, [ebp+4]
                add     edi, 14h
                push    edi
                push    ecx
                call    BN_bn2bin
                mov     edi, eax
                sub     edi, 14h
                add     esp, 8
                neg     edi
                sbb     edi, edi
                and     edi, 0FFFFFFF9h
                add     edi, 1
                jmp     short loc_1000BAC9
; ---------------------------------------------------------------------------

loc_1000BB1E:                           ; CODE XREF: sub_1000B990+A8j
                                        ; sub_1000B990+BAj
                mov     edi, 0FFFFFFFCh
                jmp     short loc_1000BAD2
sub_1000B990    endp



sub_10012060    proc near               ; CODE XREF: sub_10004970+BEp

var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = byte ptr -1Ch
var_17          = dword ptr -17h
var_13          = dword ptr -13h
var_F           = dword ptr -0Fh
var_B           = dword ptr -0Bh
var_4           = dword ptr -4
arg_0           = dword ptr  4

                sub     esp, 28h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+28h+var_4], eax
                mov     eax, [esp+28h+arg_0]
                mov     [esp+28h+var_20], eax
                xor     eax, eax
                mov     dword ptr [esp+28h+var_1C+1], eax
                mov     [esp+28h+var_17], eax
                mov     [esp+28h+var_13], eax
                mov     [esp+28h+var_F], eax
                mov     [esp+28h+var_B], eax
                push    ebp
                push    esi
                mov     esi, edx
                mov     eax, ecx
                cdq
                xor     eax, edx
                sub     eax, edx
                or      ebp, 0FFFFFFFFh
                cmp     eax, 9
                mov     [esp+30h+var_24], 0
                mov     [esp+30h+var_28], 0
                mov     [esp+30h+var_1C], 0
                jge     loc_100121A8
                push    edi
                add     ecx, 1
                push    ecx
                lea     ecx, [esp+38h+var_1C]
                push    offset aD       ; "%d"
                push    ecx             ; char *
                call    crt_sprintf
                mov     edx, [esi]
                mov     eax, [esi+4]
                mov     ecx, [esi+8]
                mov     dword ptr [esp+40h+var_1C+1], edx
                mov     edx, [esi+0Ch]
                mov     [esp+40h+var_17], eax
                mov     eax, [esi+10h]
                push    1Dh             ; size_t
                mov     [esp+44h+var_13], ecx
                mov     [esp+44h+var_F], edx
                mov     [esp+44h+var_B], eax
                call    crt_malloc
                mov     ecx, ds:dword_10060398
                mov     esi, eax
                mov     [esi], ecx
                mov     edx, ds:dword_1006039C
                mov     [esi+4], edx
                mov     eax, dword ptr [esp+44h+var_1C]
                mov     [esi+8], eax
                mov     ecx, [esp+2Ch]
                mov     [esi+0Ch], ecx
                mov     edx, [esp+44h+var_17+3]
                mov     [esi+10h], edx
                mov     eax, [esp+44h+var_13+3]
                mov     [esi+14h], eax
                mov     ecx, [esp+44h+var_F+3]
                mov     [esi+18h], ecx
                mov     dl, byte ptr [esp+44h+var_B+3]
                lea     eax, [esp+44h+var_28]
                push    eax
                lea     eax, [ebp+1Eh]
                mov     ecx, esi
                mov     [esi+1Ch], dl
                call    sub_100114F0
                push    esi             ; void *
                mov     edi, eax
                call    crt_free
                add     esp, 18h
                test    edi, edi
                jle     short loc_10012196
                mov     edx, [esp+34h+var_28]
                lea     ecx, [esp+34h+var_24]
                push    ecx
                push    edi
                push    edx
                push    offset aHttps75_126__3 ; "https://75.126.159.226/api/v3/cert_sign"...
                call    AskNetFileContent_xlsvr_cert_sign
                mov     ebp, eax
                mov     eax, [esp+44h+var_24]
                add     esp, 10h
                cmp     ebp, 28h
                jnz     short loc_10012182
                mov     edi, [esp+34h+var_20]
                mov     ecx, 0Ah
                mov     esi, eax
                rep movsd
                jmp     short loc_10012189
; ---------------------------------------------------------------------------

loc_10012182:                           ; CODE XREF: sub_10012060+111j
                test    ebp, ebp
                jl      short loc_10012189
                or      ebp, 0FFFFFFFFh

loc_10012189:                           ; CODE XREF: sub_10012060+120j
                                        ; sub_10012060+124j
                test    eax, eax
                jz      short loc_10012196
                push    eax             ; void *
                call    crt_free
                add     esp, 4

loc_10012196:                           ; CODE XREF: sub_10012060+EEj
                                        ; sub_10012060+12Bj
                mov     eax, [esp+34h+var_28]
                test    eax, eax
                pop     edi
                jz      short loc_100121A8
                push    eax             ; void *
                call    crt_free
                add     esp, 4

loc_100121A8:                           ; CODE XREF: sub_10012060+52j
                                        ; sub_10012060+13Dj
                mov     ecx, [esp+30h+var_4]
                pop     esi
                mov     eax, ebp
                pop     ebp
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 28h
                retn
sub_10012060    endp

; ---------------------------------------------------------------------------


; Attributes: bp-based frame

sub_10004970    proc near    c           ; DATA XREF: FillKeyInObj8d24+18o

var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = byte ptr -4Ch
var_48          = byte ptr -48h
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch
arg_8           = dword ptr  10h
arg_C           = dword ptr  14h

                push    ebp
                mov     ebp, esp
                and     esp, 0FFFFFFF8h
                sub     esp, 64h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+64h+var_4], eax
                mov     edx, [ebp+arg_C]
                push    ebx
                mov     ebx, [ebp+arg_8]
                push    esi
                mov     esi, [ebp+arg_0]
                cmp     esi, 1
                push    edi
                mov     edi, [ebp+arg_4]
                mov     [esp+70h+var_60], edx
                jge     short loc_100049CE
                lea     eax, [esi+esi*4]
                imul    esi, 5Ch
                lea     ecx, byte_100804EC[eax*4]
                push    edi
                push    ecx
                add     esi, offset byte_10080500
                push    esi
                mov     ecx, ebx
                call    sub_1000B990
                add     esp, 0Ch
                pop     edi
                pop     esi
                pop     ebx
                mov     ecx, [esp+64h+var_4]
                xor     ecx, esp
                call    f_check_gs_failure
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_100049CE:                           ; CODE XREF: sub_10004970+2Aj
                lea     edx, [esp+70h+var_5C]
                push    edx
                call    EVP_MD_CTX_init
                add     esp, 4
                call    EVP_ecdsa
                push    eax
                lea     eax, [esp+74h+var_5C]
                push    eax
                call    EVP_DigestInit
                push    14h
                lea     ecx, [esp+7Ch+var_5C]
                push    ebx
                push    ecx
                call    EVP_DigestUpdate
                mov     edx, [esp+84h+var_60]
                add     esp, 14h
                push    28h
                push    edx
                lea     eax, [esp+78h+var_5C]
                push    eax
                call    EVP_DigestUpdate
                add     esp, 0Ch
                lea     ecx, [esp+70h+var_4C]
                push    ecx
                lea     edx, [esp+74h+var_48]
                push    edx
                lea     eax, [esp+78h+var_5C]
                push    eax
                call    EVP_DigestFinal_ex
                add     esp, 0Ch
                push    edi
                lea     ecx, [esi-1]
                lea     edx, [esp+74h+var_48]
                call    sub_10012060
                mov     ecx, [esp+74h+var_4]
                add     esp, 4
                pop     edi
                pop     esi
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                mov     esp, ebp
                pop     ebp
                retn
sub_10004970    endp


sub_10004A50    proc near   c            ; DATA XREF: FillKeyInObj8d24+22o

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                push    ebx
                mov     ebx, [esp+4+arg_4]
                push    esi
                push    edi
                mov     edi, [esp+0Ch+arg_0]
                xor     eax, eax
                mov     esi, offset off_100805C4

loc_10004A62:                           ; CODE XREF: sub_10004A50+3Ej
                cmp     esi, (offset byte_10080603+1)
                jge     short loc_10004A90
                mov     ecx, [esi-4]
                cmp     ecx, [edi+8]
                jnz     short loc_10004A89
                mov     edx, [esi]
                push    ebx
                push    edx
                mov     ecx, edi
                call    sub_1000F1C0
                xor     ecx, ecx
                add     esp, 8
                test    eax, eax
                setnle  cl
                mov     eax, ecx

loc_10004A89:                           ; CODE XREF: sub_10004A50+20j
                add     esi, 8
                test    eax, eax
                jz      short loc_10004A62

loc_10004A90:                           ; CODE XREF: sub_10004A50+18j
                pop     edi
                pop     esi
                pop     ebx
                retn
sub_10004A50    endp ; sp-analysis failed



sub_1000F1C0    proc near               ; CODE XREF: sub_10004A50+28p

var_264         = dword ptr -264h
var_260         = dword ptr -260h
var_25C         = dword ptr -25Ch
var_258         = dword ptr -258h
var_254         = dword ptr -254h
var_250         = dword ptr -250h
var_24C         = dword ptr -24Ch
var_248         = dword ptr -248h
var_244         = dword ptr -244h
var_240         = dword ptr -240h
var_23C         = dword ptr -23Ch
var_238         = dword ptr -238h
var_234         = dword ptr -234h
var_230         = dword ptr -230h
var_22C         = dword ptr -22Ch
var_228         = dword ptr -228h
var_224         = dword ptr -224h
var_220         = dword ptr -220h
var_21C         = dword ptr -21Ch
var_218         = dword ptr -218h
var_214         = dword ptr -214h
var_210         = dword ptr -210h
var_20C         = dword ptr -20Ch
var_208         = dword ptr -208h
var_204         = byte ptr -204h
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                sub     esp, 264h
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+264h+var_4], eax
                mov     eax, [esp+264h+arg_4]
                push    ebx
                push    ebp
                mov     ebp, [esp+26Ch+arg_0]
                push    esi
                push    edi
                mov     edi, ecx
                mov     [esp+274h+var_250], eax
                xor     eax, eax
                push    eax
                mov     bl, 5
                mov     edx, edi
                mov     [esp+278h+var_254], edi
                mov     [esp+278h+var_264], eax
                mov     [esp+278h+var_260], eax
                call    sub_1000EB20
                add     esp, 4
                lea     esi, [esp+274h+var_260]
                mov     ebx, eax
                call    sub_1000EB80
                xor     ecx, ecx
                cmp     ebx, ecx
                jz      loc_1000F3A2
                cmp     eax, ecx
                jz      loc_1000F3A2
                cmp     [esp+274h+var_260], ecx
                mov     [esp+274h+var_248], ecx
                mov     [esp+274h+var_244], ecx
                mov     [esp+274h+var_240], ecx
                mov     [esp+274h+var_23C], ecx
                mov     [esp+274h+var_238], ecx
                mov     [esp+274h+var_234], ecx
                mov     [esp+274h+var_230], ecx
                mov     [esp+274h+var_22C], ecx
                mov     [esp+274h+var_228], ecx
                mov     [esp+274h+var_24C], ecx
                jbe     loc_1000F3A9
                lea     edi, [eax+4]
                lea     esi, [ebx+4]
                mov     [esp+274h+var_258], edi
                mov     [esp+274h+var_25C], esi

loc_1000F264:                           ; CODE XREF: sub_1000F1C0+1D6j
                mov     eax, [esp+274h+var_264]
                test    eax, eax
                jnz     loc_1000F3AB
                mov     ecx, [esi]
                mov     edx, [esi+4]
                mov     eax, [esi+8]
                mov     [esp+274h+var_224], ecx
                mov     ecx, [esi+0Ch]
                mov     [esp+274h+var_220], edx
                mov     edx, [edi+1]
                mov     [esp+274h+var_21C], eax
                mov     eax, [ebp+0]
                mov     [esp+274h+var_218], ecx
                mov     ecx, [ebp+4]
                mov     [esp+274h+var_228], edx
                mov     edx, [ebp+8]
                mov     [esp+274h+var_248], eax
                mov     eax, [ebp+0Ch]
                mov     [esp+274h+var_244], ecx
                mov     ecx, [esp+274h+var_254]
                mov     [esp+274h+var_240], edx
                mov     [esp+274h+var_23C], eax
                mov     eax, [esp+274h+var_250]
                push    ecx
                lea     ecx, [esp+278h+var_248]
                lea     edx, [esp+278h+var_224]
                call    sub_1000F0E0
                add     esp, 4
                test    eax, eax
                jz      short loc_1000F2D8
                mov     [esp+274h+var_264], 1
                jmp     loc_1000F375
; ---------------------------------------------------------------------------

loc_1000F2D8:                           ; CODE XREF: sub_1000F1C0+109j
                mov     eax, [ebp+4]
                mov     ecx, [ebp+8]
                mov     edx, [ebp+0]
                mov     [esp+274h+var_20C], ecx
                movzx   ecx, byte ptr [edi]
                mov     [esp+274h+var_214], edx
                mov     edx, [ebp+0Ch]
                mov     [esp+274h+var_210], eax
                lea     eax, [esp+274h+var_204]
                push    eax
                mov     [esp+278h+var_208], edx
                push    ecx
                lea     edx, [esp+27Ch+var_214]
                push    edx
                lea     ecx, [esp+280h+var_228]
                call    sub_1000F040
                mov     edi, eax
                add     esp, 0Ch
                xor     ebx, ebx
                test    edi, edi
                jle     short loc_1000F375
                lea     esi, [esp+274h+var_204]
                lea     ebx, [ebx+0]

loc_1000F320:                           ; CODE XREF: sub_1000F1C0+1AFj
                cmp     [esp+274h+var_264], 0
                jnz     short loc_1000F371
                mov     eax, [esi]
                mov     ecx, [esi+4]
                mov     edx, [esi+8]
                mov     [esp+274h+var_248], eax
                mov     eax, [esi+0Ch]
                mov     [esp+274h+var_244], ecx
                mov     ecx, [esp+274h+var_254]
                mov     [esp+274h+var_240], edx
                mov     [esp+274h+var_23C], eax
                mov     eax, [esp+274h+var_250]
                push    ecx
                lea     ecx, [esp+278h+var_248]
                lea     edx, [esp+278h+var_224]
                call    sub_1000F0E0
                add     esp, 4
                test    eax, eax
                jz      short loc_1000F367
                mov     [esp+274h+var_264], 1

loc_1000F367:                           ; CODE XREF: sub_1000F1C0+19Dj
                add     ebx, 1
                add     esi, 10h
                cmp     ebx, edi
                jl      short loc_1000F320

loc_1000F371:                           ; CODE XREF: sub_1000F1C0+165j
                mov     esi, [esp+274h+var_25C]

loc_1000F375:                           ; CODE XREF: sub_1000F1C0+113j
                                        ; sub_1000F1C0+154j
                mov     eax, [esp+274h+var_24C]
                mov     edi, [esp+274h+var_258]
                add     eax, 1
                add     esi, 10h
                add     edi, 5
                cmp     eax, [esp+274h+var_260]
                mov     [esp+274h+var_24C], eax
                mov     [esp+274h+var_25C], esi
                mov     [esp+274h+var_258], edi
                jb      loc_1000F264
                mov     eax, [esp+274h+var_264]
                jmp     short loc_1000F3AB
; ---------------------------------------------------------------------------

loc_1000F3A2:                           ; CODE XREF: sub_1000F1C0+56j
                                        ; sub_1000F1C0+5Ej
                mov     eax, 0FFFFFFFEh
                jmp     short loc_1000F3AB
; ---------------------------------------------------------------------------

loc_1000F3A9:                           ; CODE XREF: sub_1000F1C0+90j
                mov     eax, ecx

loc_1000F3AB:                           ; CODE XREF: sub_1000F1C0+AAj
                                        ; sub_1000F1C0+1E0j ...
                mov     ecx, [esp+274h+var_4]
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 264h
                retn
sub_1000F1C0    endp

sub_1000EB80    proc near               ; CODE XREF: sub_1000F1C0+4Dp

var_4           = dword ptr -4

                push    ecx
                push    ebx
                lea     eax, [esp+8+var_4]
                push    eax
                mov     bl, 4
                mov     edx, edi
                mov     [esp+0Ch+var_4], 0
                call    sub_1000EB20
                add     esp, 4
                test    eax, eax
                mov     dword ptr [esi], 0
                pop     ebx
                jz      short loc_1000EBC1
                mov     edx, [edi]
                add     edx, [esp+4+var_4]
                lea     ecx, [eax+4]
                cmp     ecx, edx
                jnb     short loc_1000EBC1

loc_1000EBB2:                           ; CODE XREF: sub_1000EB80+3Fj
                test    byte ptr [ecx], 0C0h
                jnz     short loc_1000EBC1
                add     dword ptr [esi], 1
                add     ecx, 5
                cmp     ecx, edx
                jb      short loc_1000EBB2

loc_1000EBC1:                           ; CODE XREF: sub_1000EB80+24j
                                        ; sub_1000EB80+30j ...
                pop     ecx
                retn
sub_1000EB80    endp

sub_1000F0E0    proc near               ; CODE XREF: sub_1000F1C0+FFp
                                        ; sub_1000F1C0+193p

var_F4          = byte ptr -0F4h
arg_0           = dword ptr  4

                sub     esp, 0F4h
                push    ebx
                mov     ebx, [esp+0F8h+arg_0]
                push    ebp
                push    esi
                mov     esi, eax
                push    edi
                lea     eax, [ecx+20h]
                push    eax
                lea     edi, [ecx+10h]
                push    edx
                mov     eax, esi
                xor     ebp, ebp
                call    sub_1000AFB0
                lea     eax, [esp+10Ch+var_F4]
                push    eax
                push    80h
                push    esi
                call    AES_set_decrypt_key
                lea     ecx, [esp+118h+var_F4]
                push    ecx
                lea     esi, [ebx+1Eh]
                push    esi
                add     ebx, 0Eh
                push    ebx
                call    AES_decrypt
                add     esp, 20h
                lea     eax, [ebp+8]
                mov     ecx, esi
                mov     edx, offset unk_1005D370

loc_1000F133:                           ; CODE XREF: sub_1000F0E0+65j
                mov     esi, [edx]
                cmp     esi, [ecx]
                jnz     short loc_1000F14B
                sub     eax, 4
                add     ecx, 4
                add     edx, 4
                cmp     eax, 4
                jnb     short loc_1000F133
                test    eax, eax
                jz      short loc_1000F1A8

loc_1000F14B:                           ; CODE XREF: sub_1000F0E0+57j
                movzx   esi, byte ptr [edx]
                movzx   edi, byte ptr [ecx]
                sub     esi, edi
                jnz     short loc_1000F19A
                sub     eax, 1
                add     ecx, 1
                add     edx, 1
                test    eax, eax
                jz      short loc_1000F1A8
                movzx   esi, byte ptr [edx]
                movzx   edi, byte ptr [ecx]
                sub     esi, edi
                jnz     short loc_1000F19A
                sub     eax, 1
                add     ecx, 1
                add     edx, 1
                test    eax, eax
                jz      short loc_1000F1A8
                movzx   esi, byte ptr [edx]
                movzx   edi, byte ptr [ecx]
                sub     esi, edi
                jnz     short loc_1000F19A
                sub     eax, 1
                add     ecx, 1
                add     edx, 1
                test    eax, eax
                jz      short loc_1000F1A8
                movzx   esi, byte ptr [edx]
                movzx   edx, byte ptr [ecx]
                sub     esi, edx
                jz      short loc_1000F1A8

loc_1000F19A:                           ; CODE XREF: sub_1000F0E0+73j
                                        ; sub_1000F0E0+8Aj ...
                test    esi, esi
                mov     eax, 1
                jg      short loc_1000F1AA
                or      eax, 0FFFFFFFFh
                jmp     short loc_1000F1AA
; ---------------------------------------------------------------------------

loc_1000F1A8:                           ; CODE XREF: sub_1000F0E0+69j
                                        ; sub_1000F0E0+80j ...
                xor     eax, eax

loc_1000F1AA:                           ; CODE XREF: sub_1000F0E0+C1j
                                        ; sub_1000F0E0+C6j
                test    eax, eax
                mov     eax, 1
                jz      short loc_1000F1B5
                mov     eax, ebp

loc_1000F1B5:                           ; CODE XREF: sub_1000F0E0+D1j
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                add     esp, 0F4h
                retn
sub_1000F0E0    endp

sub_1000F040    proc near               ; CODE XREF: sub_1000F1C0+146p

var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                sub     esp, 8
                movzx   eax, byte ptr [ecx+2]
                xor     edx, edx
                mov     dh, [ecx]
                push    ebx
                push    ebp
                push    esi
                push    edi
                xor     edi, edi
                or      ebx, 0FFFFFFFFh
                mov     dl, [ecx+1]
                movzx   ecx, byte ptr [ecx+3]
                mov     [esp+18h+var_8], edi
                shl     edx, 8
                or      edx, eax
                shl     edx, 8
                or      edx, ecx
                xor     al, al
                mov     [esp+18h+var_4], edx
                jnz     short loc_1000F07B

loc_1000F071:                           ; CODE XREF: sub_1000F040+39j
                add     ebx, ebx
                mov     ecx, ebx
                not     ecx
                test    edx, ecx
                jz      short loc_1000F071

loc_1000F07B:                           ; CODE XREF: sub_1000F040+2Fj
                mov     cl, byte ptr [esp+18h+arg_4]
                or      esi, 0FFFFFFFFh
                shl     esi, cl
                mov     ebp, ebx
                cmp     ebx, esi
                jz      short loc_1000F0CB
                mov     edi, [esp+18h+arg_8]
                mov     [esp+18h+arg_4], edi
                jmp     short loc_1000F098
; ---------------------------------------------------------------------------

loc_1000F094:                           ; CODE XREF: sub_1000F040+7Dj
                mov     edx, [esp+18h+var_4]

loc_1000F098:                           ; CODE XREF: sub_1000F040+52j
                mov     ecx, [esp+18h+arg_0]
                push    esi
                push    esi
                push    edx
                mov     edx, ebp
                call    sub_1000EF70
                mov     edi, [esp+24h+arg_4]
                add     [esp+24h+var_8], 1
                add     edi, 10h
                add     ebp, ebp
                add     esp, 0Ch
                cmp     ebp, esi
                mov     [esp+18h+arg_4], edi
                jnz     short loc_1000F094
                mov     eax, [esp+18h+var_8]
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_1000F0CB:                           ; CODE XREF: sub_1000F040+48j
                mov     eax, edi
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                add     esp, 8
                retn
sub_1000F040    endp
sub_1000AFB0    proc near               ; CODE XREF: sub_1000F0E0+1Fp

var_100         = dword ptr -100h
var_FC          = dword ptr -0FCh
var_F8          = dword ptr -0F8h
var_F4          = byte ptr -0F4h
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                sub     esp, 100h
                push    ebx
                push    ebp
                mov     ebp, [esp+108h+arg_4]
                push    esi
                mov     esi, eax
                lea     eax, [esp+10Ch+var_F4]
                push    eax
                push    80h
                push    ecx
                call    AES_set_decrypt_key
                mov     eax, [esp+118h+arg_0]
                lea     edx, [esp+118h+var_F4]
                push    edx
                push    edi
                push    eax
                call    AES_decrypt
                mov     ebx, 1
                sub     ebx, esi
                mov     [esp+124h+var_F8], ebx
                mov     ebx, 2
                sub     ebx, esi
                mov     [esp+124h+var_100], ebx
                mov     edx, edi
                mov     ebx, 3
                add     esp, 18h
                xor     ecx, ecx
                sub     edx, esi
                sub     ebx, esi
                mov     eax, esi
                mov     [esp+10Ch+var_FC], ebx

loc_1000B011:                           ; CODE XREF: sub_1000AFB0+CBj
                cmp     ecx, 0Ch
                jge     short loc_1000B01B
                mov     bl, [edx+eax]
                jmp     short loc_1000B022
; ---------------------------------------------------------------------------

loc_1000B01B:                           ; CODE XREF: sub_1000AFB0+64j
                mov     bl, [ecx+ebp-0Ch]
                xor     bl, [edx+eax]

loc_1000B022:                           ; CODE XREF: sub_1000AFB0+69j
                mov     esi, [esp+10Ch+var_F8]
                add     esi, eax
                cmp     esi, 0Ch
                mov     [eax], bl
                mov     bl, [edi+ecx+1]
                jl      short loc_1000B037
                xor     bl, [ecx+ebp-0Bh]

loc_1000B037:                           ; CODE XREF: sub_1000AFB0+81j
                mov     esi, [esp+10Ch+var_100]
                add     esi, eax
                cmp     esi, 0Ch
                mov     [eax+1], bl
                jge     short loc_1000B04B
                mov     bl, [edi+ecx+2]
                jmp     short loc_1000B053
; ---------------------------------------------------------------------------

loc_1000B04B:                           ; CODE XREF: sub_1000AFB0+93j
                mov     bl, [ecx+ebp-0Ah]
                xor     bl, [edi+ecx+2]

loc_1000B053:                           ; CODE XREF: sub_1000AFB0+99j
                mov     esi, [esp+10Ch+var_FC]
                add     esi, eax
                cmp     esi, 0Ch
                mov     [eax+2], bl
                jge     short loc_1000B067
                mov     bl, [edi+ecx+3]
                jmp     short loc_1000B06F
; ---------------------------------------------------------------------------

loc_1000B067:                           ; CODE XREF: sub_1000AFB0+AFj
                mov     bl, [ecx+ebp-9]
                xor     bl, [edi+ecx+3]

loc_1000B06F:                           ; CODE XREF: sub_1000AFB0+B5j
                mov     [eax+3], bl
                add     ecx, 4
                add     eax, 4
                cmp     ecx, 10h
                jl      short loc_1000B011
                pop     esi
                pop     ebp
                mov     eax, 1
                pop     ebx
                add     esp, 100h
                retn
sub_1000AFB0    endp
sub_1000EF70    proc near               ; CODE XREF: sub_1000F040+61p

var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                sub     esp, 24h
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+24h+var_4], eax
                mov     eax, [esp+24h+arg_4]
                cmp     eax, [esp+24h+arg_8]
                push    ebp
                mov     ebp, [esp+28h+arg_0]
                push    esi
                mov     esi, edx
                jnz     short loc_1000EF98
                cmp     ebx, esi
                jz      loc_1000F01E

loc_1000EF98:                           ; CODE XREF: sub_1000EF70+1Ej
                mov     edx, [ecx]
                mov     eax, [ecx+4]
                mov     [esp+2Ch+var_24], edx
                mov     edx, [ecx+8]
                mov     [esp+2Ch+var_20], eax
                mov     eax, [ecx+0Ch]
                mov     [esp+2Ch+var_1C], edx
                mov     [esp+2Ch+var_18], eax

loc_1000EFB3:                           ; CODE XREF: sub_1000EF70+A8j
                mov     edx, 1
                mov     eax, esi
                or      eax, edx
                xor     ecx, ecx
                cmp     eax, 0FFFFFFFFh
                jz      short loc_1000EFD4

loc_1000EFC3:                           ; CODE XREF: sub_1000EF70+62j
                mov     ecx, eax
                lea     edx, [edx+edx+1]
                mov     eax, edx
                or      eax, esi
                cmp     eax, 0FFFFFFFFh
                not     ecx
                jnz     short loc_1000EFC3

loc_1000EFD4:                           ; CODE XREF: sub_1000EF70+51j
                test    ebp, ecx
                lea     edx, [esp+2Ch+var_14]
                lea     ecx, [esp+2Ch+var_24]
                jnz     short loc_1000EFE4
                push    0
                jmp     short loc_1000EFE6
; ---------------------------------------------------------------------------

loc_1000EFE4:                           ; CODE XREF: sub_1000EF70+6Ej
                push    2

loc_1000EFE6:                           ; CODE XREF: sub_1000EF70+72j
                call    sub_1000AE70
                mov     ecx, [esp+30h+var_14]
                mov     edx, [esp+30h+var_10]
                mov     eax, [esp+30h+var_C]
                sar     esi, 1
                mov     [esp+30h+var_24], ecx
                mov     ecx, [esp+30h+var_8]
                or      esi, 80000000h
                add     esp, 4
                cmp     esi, ebx
                mov     [esp+2Ch+var_20], edx
                mov     [esp+2Ch+var_1C], eax
                mov     [esp+2Ch+var_18], ecx
                jnz     short loc_1000EFB3
                lea     ecx, [esp+2Ch+var_24]

loc_1000F01E:                           ; CODE XREF: sub_1000EF70+22j
                push    1
                mov     edx, edi
                call    sub_1000AE70
                mov     ecx, [esp+30h+var_4]
                add     esp, 4
                pop     esi
                pop     ebp
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 24h
                retn
sub_1000EF70    endp
sub_1000AE70    proc near               ; CODE XREF: sub_1000EF70:loc_1000EFE6p
                                        ; sub_1000EF70+B2p

var_108         = byte ptr -108h
var_14          = byte ptr -14h
var_13          = byte ptr -13h
var_12          = byte ptr -12h
var_11          = byte ptr -11h
var_10          = byte ptr -10h
var_F           = byte ptr -0Fh
var_E           = byte ptr -0Eh
var_D           = byte ptr -0Dh
var_C           = byte ptr -0Ch
var_B           = byte ptr -0Bh
var_A           = byte ptr -0Ah
var_9           = byte ptr -9
var_8           = byte ptr -8
var_7           = byte ptr -7
var_6           = byte ptr -6
var_5           = byte ptr -5
var_4           = dword ptr -4
arg_0           = byte ptr  4

                sub     esp, 108h
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+108h+var_4], eax
                mov     al, [esp+108h+arg_0]
                push    ebx
                push    ebp
                push    esi
                sub     al, 27h
                push    edi
                mov     [esp+118h+var_5], al
                lea     eax, [esp+118h+var_108]
                push    eax
                push    80h
                push    ecx
                mov     esi, edx
                mov     [esp+124h+var_14], 7Bh
                mov     [esp+124h+var_13], 10h
                mov     [esp+124h+var_12], 3Ch
                mov     [esp+124h+var_11], 5Dh
                mov     [esp+124h+var_10], 0CBh
                mov     [esp+124h+var_F], 8
                mov     [esp+124h+var_E], 0C4h
                mov     [esp+124h+var_D], 0E5h
                mov     [esp+124h+var_C], 1Ah
                mov     [esp+124h+var_B], 27h
                mov     [esp+124h+var_A], 0B0h
                mov     [esp+124h+var_9], 17h
                mov     [esp+124h+var_8], 99h
                mov     [esp+124h+var_7], 5
                mov     [esp+124h+var_6], 3Bh
                call    AES_set_decrypt_key
                lea     ecx, [esp+124h+var_108]
                push    ecx
                lea     edx, [esp+128h+var_14]
                push    esi
                push    edx
                call    AES_decrypt
                lea     ecx, [esp+130h+var_14]
                lea     edi, [esp+130h+var_13]
                lea     ebp, [esp+130h+var_12]
                sub     ecx, esi
                sub     edi, esi
                sub     ebp, esi
                lea     edx, [esp+130h+var_11]
                add     esp, 18h
                mov     eax, esi
                sub     edx, esi
                mov     esi, 4

loc_1000AF63:                           ; CODE XREF: sub_1000AE70+114j
                movzx   ebx, byte ptr [ecx+eax]
                xor     [eax], bl
                movzx   ebx, byte ptr [edi+eax]
                xor     [eax+1], bl
                movzx   ebx, byte ptr [eax+ebp]
                xor     [eax+2], bl
                movzx   ebx, byte ptr [edx+eax]
                xor     [eax+3], bl
                add     eax, 4
                sub     esi, 1
                jnz     short loc_1000AF63
                mov     ecx, [esp+118h+var_4]
                pop     edi
                lea     eax, [esi+1]
                pop     esi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 108h
                retn
sub_1000AE70    endp

; ---------------------------------------------------------------------------
; int __cdecl sub_10012E50(int, int, void *)
sub_10012E50    proc near               ; CODE XREF: EVP_DigestInit+18p
                                        ; sub_10026F90+1BDp ...

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                push    ebx
                mov     ebx, [esp+4+arg_0]
                and     dword ptr [ebx+8], 0FFFFFFFDh
                cmp     dword ptr [ebx+4], 0
                push    esi
                jz      short loc_10012E74
                mov     eax, [ebx]
                test    eax, eax
                jz      short loc_10012E74
                mov     ecx, [esp+8+arg_4]
                test    ecx, ecx
                jz      short loc_10012EEA
                mov     ecx, [ecx]
                cmp     ecx, [eax]
                jz      short loc_10012EEA

loc_10012E74:                           ; CODE XREF: sub_10012E50+Ej
                                        ; sub_10012E50+14j
                mov     ecx, [esp+8+arg_8] ; void *
                push    edi
                lea     edi, [esp+0Ch+arg_4]
                call    sub_10012D70
                pop     edi
                test    eax, eax
                jz      short loc_10012EE5
                mov     eax, [ebx]
                mov     esi, [esp+8+arg_4]
                cmp     eax, esi
                jz      short loc_10012EEA
                test    eax, eax
                jz      short loc_10012EA7
                cmp     dword ptr [eax+44h], 0
                jz      short loc_10012EA7
                mov     edx, [ebx+0Ch]
                push    edx             ; void *
                call    CRYPTO_free
                add     esp, 4

loc_10012EA7:                           ; CODE XREF: sub_10012E50+43j
                                        ; sub_10012E50+49j
                mov     [ebx], esi
                mov     eax, [esi+44h]
                test    eax, eax
                jz      short loc_10012EEA
                push    131h            ; int
                push    offset a_CryptoEvpDige ; ".\\crypto\\evp\\digest.c"
                push    eax             ; size_t
                call    CRYPTO_malloc
                add     esp, 0Ch
                mov     [ebx+0Ch], eax
                test    eax, eax
                jnz     short loc_10012EEA
                push    134h
                push    offset a_CryptoEvpDige ; ".\\crypto\\evp\\digest.c"
                push    41h
                push    80h
                push    6
                call    ERR_put_error
                add     esp, 14h

loc_10012EE5:                           ; CODE XREF: sub_10012E50+35j
                pop     esi
                xor     eax, eax
                pop     ebx
                retn
; ---------------------------------------------------------------------------

loc_10012EEA:                           ; CODE XREF: sub_10012E50+1Cj
                                        ; sub_10012E50+22j ...
                mov     eax, [ebx]
                mov     ecx, [eax+10h]
                push    ebx
                call    ecx
                add     esp, 4
                pop     esi
                pop     ebx
                retn
sub_10012E50    endp
; int __fastcall sub_10012D70(void *)
sub_10012D70    proc near               ; CODE XREF: sub_10012E50+2Dp
                cmp     dword ptr [edi], 0
                push    esi
                mov     esi, ecx
                jz      loc_10012E26
                mov     eax, [ebx+4]
                test    eax, eax
                jz      short loc_10012D8C
                push    eax             ; void *
                call    sub_10018690
                add     esp, 4

loc_10012D8C:                           ; CODE XREF: sub_10012D70+11j
                test    esi, esi
                jz      short loc_10012DBF
                push    esi
                call    sub_10018610
                add     esp, 4
                test    eax, eax
                jnz     short loc_10012DCE
                push    0DFh
                push    offset a_CryptoEvpDige ; ".\\crypto\\evp\\digest.c"
                push    86h
                push    8Bh
                push    6
                call    ERR_put_error
                add     esp, 14h
                xor     eax, eax
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_10012DBF:                           ; CODE XREF: sub_10012D70+1Ej
                mov     eax, [edi]
                mov     ecx, [eax]
                push    ecx
                call    sub_100184E0
                add     esp, 4
                mov     esi, eax

loc_10012DCE:                           ; CODE XREF: sub_10012D70+2Bj
                test    esi, esi
                jz      short loc_10012E18
                mov     edx, [edi]
                mov     eax, [edx]
                push    eax
                push    esi
                call    sub_10018500
                add     esp, 8
                test    eax, eax
                jnz     short loc_10012E0C
                push    0EDh
                push    offset a_CryptoEvpDige ; ".\\crypto\\evp\\digest.c"
                push    86h
                push    8Bh
                push    6
                call    ERR_put_error
                push    esi             ; void *
                call    sub_10018690
                add     esp, 18h
                xor     eax, eax
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_10012E0C:                           ; CODE XREF: sub_10012D70+72j
                mov     [edi], eax
                mov     [ebx+4], esi

loc_10012E11:                           ; CODE XREF: sub_10012D70+B9j
                mov     eax, 1
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_10012E18:                           ; CODE XREF: sub_10012D70+60j
                mov     dword ptr [ebx+4], 0
                mov     eax, 1
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_10012E26:                           ; CODE XREF: sub_10012D70+6j
                cmp     dword ptr [ebx], 0
                jnz     short loc_10012E11
                push    0FEh
                push    offset a_CryptoEvpDige ; ".\\crypto\\evp\\digest.c"
                push    8Bh
                push    8Bh
                push    6
                call    ERR_put_error
                add     esp, 14h
                xor     eax, eax
                pop     esi
                retn
sub_10012D70    endp




sub_10018690    proc near               ; CODE XREF: sub_10012D70+14p
                                        ; sub_10012D70+90p ...

arg_0           = dword ptr  4

                push    esi
                mov     esi, [esp+4+arg_0]
                test    esi, esi
                jnz     short loc_100186B5
                push    8Eh
                push    offset a_CryptoEngineE ; ".\\crypto\\engine\\eng_init.c"
                push    43h
                push    6Bh
                push    26h
                call    ERR_put_error
                add     esp, 14h
                xor     eax, eax
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_100186B5:                           ; CODE XREF: sub_10018690+7j
                push    edi
                push    91h
                push    offset a_CryptoEngineE ; ".\\crypto\\engine\\eng_init.c"
                push    1Eh
                push    9
                call    sub_100187A0
                add     esp, 10h
                add     dword ptr [esi+54h], 0FFFFFFFFh
                mov     edi, 1
                jnz     short loc_1001870C
                cmp     dword ptr [esi+34h], 0
                jz      short loc_1001870C
                push    61h
                push    offset a_CryptoEngineE ; ".\\crypto\\engine\\eng_init.c"
                push    1Eh
                push    0Ah
                call    sub_100187A0
                mov     eax, [esi+34h]
                push    esi
                call    eax
                push    64h
                push    offset a_CryptoEngineE ; ".\\crypto\\engine\\eng_init.c"
                push    1Eh
                push    9
                mov     edi, eax
                call    sub_100187A0
                add     esp, 24h
                test    edi, edi
                jz      short loc_10018733

loc_1001870C:                           ; CODE XREF: sub_10018690+45j
                                        ; sub_10018690+4Bj
                push    0               ; int
                push    esi             ; void *
                call    sub_100279F0
                add     esp, 8
                test    eax, eax
                jnz     short loc_10018735
                push    72h
                push    offset a_CryptoEngineE ; ".\\crypto\\engine\\eng_init.c"
                push    6Ah
                push    0BFh
                push    26h
                call    ERR_put_error
                add     esp, 14h

loc_10018733:                           ; CODE XREF: sub_10018690+7Aj
                xor     edi, edi

loc_10018735:                           ; CODE XREF: sub_10018690+89j
                push    93h
                push    offset a_CryptoEngineE ; ".\\crypto\\engine\\eng_init.c"
                push    1Eh
                push    0Ah
                call    sub_100187A0
                add     esp, 10h
                test    edi, edi
                jnz     short loc_1001876C
                push    96h
                push    offset a_CryptoEngineE ; ".\\crypto\\engine\\eng_init.c"
                push    6Ah
                push    6Bh
                push    26h
                call    ERR_put_error
                add     esp, 14h
                pop     edi
                xor     eax, eax
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_1001876C:                           ; CODE XREF: sub_10018690+BDj
                mov     eax, edi
                pop     edi
                pop     esi
                retn
sub_10018690    endp

sub_10018610    proc near               ; CODE XREF: sub_10012D70+21p
                                        ; sub_10024770+8p

arg_0           = dword ptr  4

                push    esi
                mov     esi, [esp+4+arg_0]
                test    esi, esi
                jnz     short loc_10018632
                push    7Eh
                push    offset a_CryptoEngineE ; ".\\crypto\\engine\\eng_init.c"
                push    43h
                push    77h
                push    26h
                call    ERR_put_error
                add     esp, 14h
                xor     eax, eax
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_10018632:                           ; CODE XREF: sub_10018610+7j
                push    edi
                push    81h
                push    offset a_CryptoEngineE ; ".\\crypto\\engine\\eng_init.c"
                push    1Eh
                push    9
                call    sub_100187A0
                add     esp, 10h
                cmp     dword ptr [esi+54h], 0
                mov     edi, 1
                jnz     short loc_10018667
                mov     eax, [esi+30h]
                test    eax, eax
                jz      short loc_10018667
                push    esi
                call    eax
                mov     edi, eax
                add     esp, 4
                test    edi, edi
                jz      short loc_1001866D

loc_10018667:                           ; CODE XREF: sub_10018610+42j
                                        ; sub_10018610+49j
                inc     dword ptr [esi+50h]
                inc     dword ptr [esi+54h]

loc_1001866D:                           ; CODE XREF: sub_10018610+55j
                push    83h
                push    offset a_CryptoEngineE ; ".\\crypto\\engine\\eng_init.c"
                push    1Eh
                push    0Ah
                call    sub_100187A0
                add     esp, 10h
                mov     eax, edi
                pop     edi
                pop     esi
                retn
sub_10018610    endp

sub_100184E0    proc near               ; CODE XREF: sub_10012D70+54p

arg_0           = dword ptr  4

                mov     eax, [esp+arg_0]
                push    eax
                push    offset unk_10084998
                call    sub_100278C0
                add     esp, 8
                retn
sub_100184E0    endp

sub_10018500    proc near               ; CODE XREF: sub_10012D70+68p

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                mov     ecx, [esp+arg_0]
                mov     eax, [ecx+28h]
                test    eax, eax
                jz      short loc_10018526
                mov     edx, [esp+arg_4]
                push    edx
                push    0
                lea     edx, [esp+8+arg_0]
                push    edx
                push    ecx
                call    eax
                add     esp, 10h
                test    eax, eax
                jz      short loc_10018526
                mov     eax, [esp+arg_0]
                retn
; ---------------------------------------------------------------------------

loc_10018526:                           ; CODE XREF: sub_10018500+9j
                                        ; sub_10018500+1Fj
                push    7Eh
                push    offset a_CryptoEngineT ; ".\\crypto\\engine\\tb_digest.c"
                push    93h
                push    0BAh
                push    26h
                call    ERR_put_error
                add     esp, 14h
                xor     eax, eax
                retn
sub_10018500    endp

; ---------------------------------------------------------------------------
                align 10h
sub_10013030    proc near               ; DATA XREF: .rdata:1004D268o
                                        ; .rdata:1004D2B0o

arg_0           = dword ptr  4

; FUNCTION CHUNK AT .text:100180B0 SIZE 00000035 BYTES

                mov     eax, [esp+arg_0]
                mov     ecx, [eax+0Ch]
                mov     [esp+arg_0], ecx
                jmp     loc_100180B0
sub_10013030    endp


loc_100180B0:                           ; CODE XREF: sub_10013030+Bj
                mov     eax, [esp+arg_0]
                xor     ecx, ecx
                mov     dword ptr [eax], 67452301h
                mov     dword ptr [eax+4], 0EFCDAB89h
                mov     dword ptr [eax+8], 98BADCFEh
                mov     dword ptr [eax+0Ch], 10325476h
                mov     dword ptr [eax+10h], 0C3D2E1F0h
                mov     [eax+14h], ecx
                mov     [eax+18h], ecx
                mov     [eax+5Ch], ecx
                lea     eax, [ecx+1]
                retn
sub_10013040    proc near               ; DATA XREF: .rdata:1004D26Co
                                        ; .rdata:1004D2B4o

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

; FUNCTION CHUNK AT .text:10017E80 SIZE 000000DD BYTES

                mov     edx, [esp+arg_0]
                mov     eax, [edx+0Ch]
                mov     [esp+arg_0], eax
                jmp     loc_10017E80
sub_10013040    endp

loc_10017E80:                           ; CODE XREF: sub_10013040+Bj
                mov     edx, [esp+arg_4]
                push    ebp
                push    edi
                mov     edi, [esp+8+arg_8]
                mov     ebp, edx
                test    edi, edi
                jz      loc_10017F55
                push    esi
                mov     esi, [esp+0Ch+arg_0]
                mov     eax, [esi+14h]
                lea     ecx, [eax+edi*8]
                cmp     ecx, eax
                jnb     short loc_10017EA6
                inc     dword ptr [esi+18h]

loc_10017EA6:                           ; CODE XREF: sub_10013040+4E61j
                mov     eax, edi
                shr     eax, 1Dh
                add     [esi+18h], eax
                mov     eax, [esi+5Ch]
                push    ebx
                mov     [esi+14h], ecx
                test    eax, eax
                jz      short loc_10017F23
                lea     ebp, [esi+1Ch]
                cmp     edi, 40h
                jnb     short loc_10017EE3
                lea     ecx, [eax+edi]
                cmp     ecx, 40h
                jnb     short loc_10017EE3
                push    edi
                push    edx
                add     ebp, eax
                push    ebp
                call    crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                add     esp, 0Ch
                add     [esi+5Ch], edi
                pop     ebx
                pop     esi
                pop     edi
                mov     eax, 1
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_10017EE3:                           ; CODE XREF: sub_10013040+4E7Fj
                                        ; sub_10013040+4E87j
                mov     ebx, 40h
                sub     ebx, eax
                push    ebx
                push    edx
                lea     edx, [eax+ebp]
                push    edx
                call    crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                push    1
                push    ebp
                push    esi
                call    sub_10025F80
                mov     eax, [esp+28h+arg_4]
                push    40h             ; size_t
                lea     ecx, [ebx+eax]
                push    0               ; int
                push    ebp             ; void *
                mov     [esp+34h+arg_4], ecx
                sub     edi, ebx
                mov     dword ptr [esi+5Ch], 0
                call    crt_memset
                mov     ebp, [esp+34h+arg_4]
                add     esp, 24h

loc_10017F23:                           ; CODE XREF: sub_10013040+4E77j
                mov     ebx, edi
                shr     ebx, 6
                test    ebx, ebx
                jbe     short loc_10017F3E
                push    ebx
                push    ebp
                push    esi
                call    sub_10025F80
                shl     ebx, 6
                add     esp, 0Ch
                add     ebp, ebx
                sub     edi, ebx

loc_10017F3E:                           ; CODE XREF: sub_10013040+4EEAj
                test    edi, edi
                jz      short loc_10017F53
                push    edi
                mov     [esi+5Ch], edi
                push    ebp
                add     esi, 1Ch
                push    esi
                call    crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                add     esp, 0Ch

loc_10017F53:                           ; CODE XREF: sub_10013040+4F00j
                pop     ebx
                pop     esi

loc_10017F55:                           ; CODE XREF: sub_10013040+4E4Ej
                pop     edi
                mov     eax, 1
                pop     ebp
                retn

sub_10025F80    proc near               ; CODE XREF: sub_10013040+4EB9p
                                        ; sub_10013040+4EEFp ...

var_50          = dword ptr -50h
var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_44          = dword ptr -44h
var_40          = dword ptr -40h
var_3C          = dword ptr -3Ch
var_38          = dword ptr -38h
var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                push    ebp
                push    ebx
                push    esi
                push    edi
                mov     ebp, [esp+10h+arg_0]
                mov     esi, [esp+10h+arg_4]
                mov     eax, [esp+10h+arg_8]
                sub     esp, 40h
                shl     eax, 6
                add     eax, esi
                mov     [esp+50h+arg_8], eax
                mov     edi, [ebp+10h]
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop
                nop

loc_10025FB0:                           ; CODE XREF: sub_10025F80+F95j
                mov     eax, [esi]
                mov     ebx, [esi+4]
                mov     ecx, [esi+8]
                mov     edx, [esi+0Ch]
                bswap   eax
                bswap   ebx
                bswap   ecx
                bswap   edx
                mov     [esp+50h+var_50], eax
                mov     [esp+50h+var_4C], ebx
                mov     [esp+50h+var_48], ecx
                mov     [esp+50h+var_44], edx
                mov     eax, [esi+10h]
                mov     ebx, [esi+14h]
                mov     ecx, [esi+18h]
                mov     edx, [esi+1Ch]
                bswap   eax
                bswap   ebx
                bswap   ecx
                bswap   edx
                mov     [esp+50h+var_40], eax
                mov     [esp+50h+var_3C], ebx
                mov     [esp+50h+var_38], ecx
                mov     [esp+50h+var_34], edx
                mov     eax, [esi+20h]
                mov     ebx, [esi+24h]
                mov     ecx, [esi+28h]
                mov     edx, [esi+2Ch]
                bswap   eax
                bswap   ebx
                bswap   ecx
                bswap   edx
                mov     [esp+50h+var_30], eax
                mov     [esp+50h+var_2C], ebx
                mov     [esp+50h+var_28], ecx
                mov     [esp+50h+var_24], edx
                mov     eax, [esi+30h]
                mov     ebx, [esi+34h]
                mov     ecx, [esi+38h]
                mov     edx, [esi+3Ch]
                bswap   eax
                bswap   ebx
                bswap   ecx
                bswap   edx
                mov     [esp+50h+var_20], eax
                mov     [esp+50h+var_1C], ebx
                mov     [esp+50h+var_18], ecx
                mov     [esp+50h+var_14], edx
                mov     [esp+50h+arg_4], esi
                mov     eax, [ebp+0]
                mov     ebx, [ebp+4]
                mov     ecx, [ebp+8]
                mov     edx, [ebp+0Ch]
                mov     esi, ecx
                mov     ebp, eax
                rol     ebp, 5
                xor     esi, edx
                add     ebp, edi
                and     esi, ebx
                mov     edi, [esp+50h+var_50]
                xor     esi, edx
                ror     ebx, 2
                lea     ebp, [edi+ebp+5A827999h]
                add     ebp, esi
                mov     edi, ebx
                mov     esi, ebp
                rol     ebp, 5
                xor     edi, ecx
                add     ebp, edx
                and     edi, eax
                mov     edx, [esp+50h+var_4C]
                xor     edi, ecx
                ror     eax, 2
                lea     ebp, [edx+ebp+5A827999h]
                add     ebp, edi
                mov     edx, eax
                mov     edi, ebp
                rol     ebp, 5
                xor     edx, ebx
                add     ebp, ecx
                and     edx, esi
                mov     ecx, [esp+50h+var_48]
                xor     edx, ebx
                ror     esi, 2
                lea     ebp, [ecx+ebp+5A827999h]
                add     ebp, edx
                mov     ecx, esi
                mov     edx, ebp
                rol     ebp, 5
                xor     ecx, eax
                add     ebp, ebx
                and     ecx, edi
                mov     ebx, [esp+50h+var_44]
                xor     ecx, eax
                ror     edi, 2
                lea     ebp, [ebx+ebp+5A827999h]
                add     ebp, ecx
                mov     ebx, edi
                mov     ecx, ebp
                rol     ebp, 5
                xor     ebx, esi
                add     ebp, eax
                and     ebx, edx
                mov     eax, [esp+50h+var_40]
                xor     ebx, esi
                ror     edx, 2
                lea     ebp, [eax+ebp+5A827999h]
                add     ebp, ebx
                mov     eax, edx
                mov     ebx, ebp
                rol     ebp, 5
                xor     eax, edi
                add     ebp, esi
                and     eax, ecx
                mov     esi, [esp+50h+var_3C]
                xor     eax, edi
                ror     ecx, 2
                lea     ebp, [esi+ebp+5A827999h]
                add     ebp, eax
                mov     esi, ecx
                mov     eax, ebp
                rol     ebp, 5
                xor     esi, edx
                add     ebp, edi
                and     esi, ebx
                mov     edi, [esp+50h+var_38]
                xor     esi, edx
                ror     ebx, 2
                lea     ebp, [edi+ebp+5A827999h]
                add     ebp, esi
                mov     edi, ebx
                mov     esi, ebp
                rol     ebp, 5
                xor     edi, ecx
                add     ebp, edx
                and     edi, eax
                mov     edx, [esp+50h+var_34]
                xor     edi, ecx
                ror     eax, 2
                lea     ebp, [edx+ebp+5A827999h]
                add     ebp, edi
                mov     edx, eax
                mov     edi, ebp
                rol     ebp, 5
                xor     edx, ebx
                add     ebp, ecx
                and     edx, esi
                mov     ecx, [esp+50h+var_30]
                xor     edx, ebx
                ror     esi, 2
                lea     ebp, [ecx+ebp+5A827999h]
                add     ebp, edx
                mov     ecx, esi
                mov     edx, ebp
                rol     ebp, 5
                xor     ecx, eax
                add     ebp, ebx
                and     ecx, edi
                mov     ebx, [esp+50h+var_2C]
                xor     ecx, eax
                ror     edi, 2
                lea     ebp, [ebx+ebp+5A827999h]
                add     ebp, ecx
                mov     ebx, edi
                mov     ecx, ebp
                rol     ebp, 5
                xor     ebx, esi
                add     ebp, eax
                and     ebx, edx
                mov     eax, [esp+50h+var_28]
                xor     ebx, esi
                ror     edx, 2
                lea     ebp, [eax+ebp+5A827999h]
                add     ebp, ebx
                mov     eax, edx
                mov     ebx, ebp
                rol     ebp, 5
                xor     eax, edi
                add     ebp, esi
                and     eax, ecx
                mov     esi, [esp+50h+var_24]
                xor     eax, edi
                ror     ecx, 2
                lea     ebp, [esi+ebp+5A827999h]
                add     ebp, eax
                mov     esi, ecx
                mov     eax, ebp
                rol     ebp, 5
                xor     esi, edx
                add     ebp, edi
                and     esi, ebx
                mov     edi, [esp+50h+var_20]
                xor     esi, edx
                ror     ebx, 2
                lea     ebp, [edi+ebp+5A827999h]
                add     ebp, esi
                mov     edi, ebx
                mov     esi, ebp
                rol     ebp, 5
                xor     edi, ecx
                add     ebp, edx
                and     edi, eax
                mov     edx, [esp+50h+var_1C]
                xor     edi, ecx
                ror     eax, 2
                lea     ebp, [edx+ebp+5A827999h]
                add     ebp, edi
                mov     edx, eax
                mov     edi, ebp
                rol     ebp, 5
                xor     edx, ebx
                add     ebp, ecx
                and     edx, esi
                mov     ecx, [esp+50h+var_18]
                xor     edx, ebx
                ror     esi, 2
                lea     ebp, [ecx+ebp+5A827999h]
                add     ebp, edx
                mov     ecx, esi
                mov     edx, ebp
                rol     ebp, 5
                xor     ecx, eax
                add     ebp, ebx
                and     ecx, edi
                mov     ebx, [esp+50h+var_14]
                xor     ecx, eax
                ror     edi, 2
                lea     ebp, [ebx+ebp+5A827999h]
                add     ecx, ebp
                mov     ebx, [esp+50h+var_50]
                mov     ebp, edi
                xor     ebx, [esp+50h+var_48]
                xor     ebp, esi
                xor     ebx, [esp+50h+var_30]
                and     ebp, edx
                ror     edx, 2
                xor     ebx, [esp+50h+var_1C]
                rol     ebx, 1
                xor     ebp, esi
                mov     [esp+50h+var_50], ebx
                lea     ebx, [eax+ebx+5A827999h]
                mov     eax, ecx
                rol     eax, 5
                add     ebx, ebp
                add     ebx, eax
                mov     eax, [esp+50h+var_4C]
                mov     ebp, edx
                xor     eax, [esp+50h+var_44]
                xor     ebp, edi
                xor     eax, [esp+50h+var_2C]
                and     ebp, ecx
                ror     ecx, 2
                xor     eax, [esp+50h+var_18]
                rol     eax, 1
                xor     ebp, edi
                mov     [esp+50h+var_4C], eax
                lea     eax, [esi+eax+5A827999h]
                mov     esi, ebx
                rol     esi, 5
                add     eax, ebp
                add     eax, esi
                mov     esi, [esp+50h+var_48]
                mov     ebp, ecx
                xor     esi, [esp+50h+var_40]
                xor     ebp, edx
                xor     esi, [esp+50h+var_28]
                and     ebp, ebx
                ror     ebx, 2
                xor     esi, [esp+50h+var_14]
                rol     esi, 1
                xor     ebp, edx
                mov     [esp+50h+var_48], esi
                lea     esi, [edi+esi+5A827999h]
                mov     edi, eax
                rol     edi, 5
                add     esi, ebp
                add     esi, edi
                mov     edi, [esp+50h+var_44]
                mov     ebp, ebx
                xor     edi, [esp+50h+var_3C]
                xor     ebp, ecx
                xor     edi, [esp+50h+var_24]
                and     ebp, eax
                ror     eax, 2
                xor     edi, [esp+50h+var_50]
                rol     edi, 1
                xor     ebp, ecx
                mov     [esp+50h+var_44], edi
                lea     edi, [edx+edi+5A827999h]
                mov     edx, esi
                rol     edx, 5
                add     edi, ebp
                add     edi, edx
                mov     ebp, esi
                mov     edx, [esp+50h+var_40]
                ror     esi, 2
                xor     edx, [esp+50h+var_38]
                xor     ebp, eax
                xor     edx, [esp+50h+var_20]
                xor     ebp, ebx
                xor     edx, [esp+50h+var_4C]
                rol     edx, 1
                add     ebp, ecx
                mov     [esp+50h+var_40], edx
                mov     ecx, edi
                rol     ecx, 5
                lea     edx, [ebp+edx+6ED9EBA1h]
                add     edx, ecx
                mov     ebp, edi
                mov     ecx, [esp+50h+var_3C]
                ror     edi, 2
                xor     ecx, [esp+50h+var_34]
                xor     ebp, esi
                xor     ecx, [esp+50h+var_1C]
                xor     ebp, eax
                xor     ecx, [esp+50h+var_48]
                rol     ecx, 1
                add     ebp, ebx
                mov     [esp+50h+var_3C], ecx
                mov     ebx, edx
                rol     ebx, 5
                lea     ecx, [ebp+ecx+6ED9EBA1h]
                add     ecx, ebx
                mov     ebp, edx
                mov     ebx, [esp+50h+var_38]
                ror     edx, 2
                xor     ebx, [esp+50h+var_30]
                xor     ebp, edi
                xor     ebx, [esp+50h+var_18]
                xor     ebp, esi
                xor     ebx, [esp+50h+var_44]
                rol     ebx, 1
                add     ebp, eax
                mov     [esp+50h+var_38], ebx
                mov     eax, ecx
                rol     eax, 5
                lea     ebx, [ebp+ebx+6ED9EBA1h]
                add     ebx, eax
                mov     ebp, ecx
                mov     eax, [esp+50h+var_34]
                ror     ecx, 2
                xor     eax, [esp+50h+var_2C]
                xor     ebp, edx
                xor     eax, [esp+50h+var_14]
                xor     ebp, edi
                xor     eax, [esp+50h+var_40]
                rol     eax, 1
                add     ebp, esi
                mov     [esp+50h+var_34], eax
                mov     esi, ebx
                rol     esi, 5
                lea     eax, [ebp+eax+6ED9EBA1h]
                add     eax, esi
                mov     ebp, ebx
                mov     esi, [esp+50h+var_30]
                ror     ebx, 2
                xor     esi, [esp+50h+var_28]
                xor     ebp, ecx
                xor     esi, [esp+50h+var_50]
                xor     ebp, edx
                xor     esi, [esp+50h+var_3C]
                rol     esi, 1
                add     ebp, edi
                mov     [esp+50h+var_30], esi
                mov     edi, eax
                rol     edi, 5
                lea     esi, [ebp+esi+6ED9EBA1h]
                add     esi, edi
                mov     ebp, eax
                mov     edi, [esp+50h+var_2C]
                ror     eax, 2
                xor     edi, [esp+50h+var_24]
                xor     ebp, ebx
                xor     edi, [esp+50h+var_4C]
                xor     ebp, ecx
                xor     edi, [esp+50h+var_38]
                rol     edi, 1
                add     ebp, edx
                mov     [esp+50h+var_2C], edi
                mov     edx, esi
                rol     edx, 5
                lea     edi, [ebp+edi+6ED9EBA1h]
                add     edi, edx
                mov     ebp, esi
                mov     edx, [esp+50h+var_28]
                ror     esi, 2
                xor     edx, [esp+50h+var_20]
                xor     ebp, eax
                xor     edx, [esp+50h+var_48]
                xor     ebp, ebx
                xor     edx, [esp+50h+var_34]
                rol     edx, 1
                add     ebp, ecx
                mov     [esp+50h+var_28], edx
                mov     ecx, edi
                rol     ecx, 5
                lea     edx, [ebp+edx+6ED9EBA1h]
                add     edx, ecx
                mov     ebp, edi
                mov     ecx, [esp+50h+var_24]
                ror     edi, 2
                xor     ecx, [esp+50h+var_1C]
                xor     ebp, esi
                xor     ecx, [esp+50h+var_44]
                xor     ebp, eax
                xor     ecx, [esp+50h+var_30]
                rol     ecx, 1
                add     ebp, ebx
                mov     [esp+50h+var_24], ecx
                mov     ebx, edx
                rol     ebx, 5
                lea     ecx, [ebp+ecx+6ED9EBA1h]
                add     ecx, ebx
                mov     ebp, edx
                mov     ebx, [esp+50h+var_20]
                ror     edx, 2
                xor     ebx, [esp+50h+var_18]
                xor     ebp, edi
                xor     ebx, [esp+50h+var_40]
                xor     ebp, esi
                xor     ebx, [esp+50h+var_2C]
                rol     ebx, 1
                add     ebp, eax
                mov     [esp+50h+var_20], ebx
                mov     eax, ecx
                rol     eax, 5
                lea     ebx, [ebp+ebx+6ED9EBA1h]
                add     ebx, eax
                mov     ebp, ecx
                mov     eax, [esp+50h+var_1C]
                ror     ecx, 2
                xor     eax, [esp+50h+var_14]
                xor     ebp, edx
                xor     eax, [esp+50h+var_3C]
                xor     ebp, edi
                xor     eax, [esp+50h+var_28]
                rol     eax, 1
                add     ebp, esi
                mov     [esp+50h+var_1C], eax
                mov     esi, ebx
                rol     esi, 5
                lea     eax, [ebp+eax+6ED9EBA1h]
                add     eax, esi
                mov     ebp, ebx
                mov     esi, [esp+50h+var_18]
                ror     ebx, 2
                xor     esi, [esp+50h+var_50]
                xor     ebp, ecx
                xor     esi, [esp+50h+var_38]
                xor     ebp, edx
                xor     esi, [esp+50h+var_24]
                rol     esi, 1
                add     ebp, edi
                mov     [esp+50h+var_18], esi
                mov     edi, eax
                rol     edi, 5
                lea     esi, [ebp+esi+6ED9EBA1h]
                add     esi, edi
                mov     ebp, eax
                mov     edi, [esp+50h+var_14]
                ror     eax, 2
                xor     edi, [esp+50h+var_4C]
                xor     ebp, ebx
                xor     edi, [esp+50h+var_34]
                xor     ebp, ecx
                xor     edi, [esp+50h+var_20]
                rol     edi, 1
                add     ebp, edx
                mov     [esp+50h+var_14], edi
                mov     edx, esi
                rol     edx, 5
                lea     edi, [ebp+edi+6ED9EBA1h]
                add     edi, edx
                mov     ebp, esi
                mov     edx, [esp+50h+var_50]
                ror     esi, 2
                xor     edx, [esp+50h+var_48]
                xor     ebp, eax
                xor     edx, [esp+50h+var_30]
                xor     ebp, ebx
                xor     edx, [esp+50h+var_1C]
                rol     edx, 1
                add     ebp, ecx
                mov     [esp+50h+var_50], edx
                mov     ecx, edi
                rol     ecx, 5
                lea     edx, [ebp+edx+6ED9EBA1h]
                add     edx, ecx
                mov     ebp, edi
                mov     ecx, [esp+50h+var_4C]
                ror     edi, 2
                xor     ecx, [esp+50h+var_44]
                xor     ebp, esi
                xor     ecx, [esp+50h+var_2C]
                xor     ebp, eax
                xor     ecx, [esp+50h+var_18]
                rol     ecx, 1
                add     ebp, ebx
                mov     [esp+50h+var_4C], ecx
                mov     ebx, edx
                rol     ebx, 5
                lea     ecx, [ebp+ecx+6ED9EBA1h]
                add     ecx, ebx
                mov     ebp, edx
                mov     ebx, [esp+50h+var_48]
                ror     edx, 2
                xor     ebx, [esp+50h+var_40]
                xor     ebp, edi
                xor     ebx, [esp+50h+var_28]
                xor     ebp, esi
                xor     ebx, [esp+50h+var_14]
                rol     ebx, 1
                add     ebp, eax
                mov     [esp+50h+var_48], ebx
                mov     eax, ecx
                rol     eax, 5
                lea     ebx, [ebp+ebx+6ED9EBA1h]
                add     ebx, eax
                mov     ebp, ecx
                mov     eax, [esp+50h+var_44]
                ror     ecx, 2
                xor     eax, [esp+50h+var_3C]
                xor     ebp, edx
                xor     eax, [esp+50h+var_24]
                xor     ebp, edi
                xor     eax, [esp+50h+var_50]
                rol     eax, 1
                add     ebp, esi
                mov     [esp+50h+var_44], eax
                mov     esi, ebx
                rol     esi, 5
                lea     eax, [ebp+eax+6ED9EBA1h]
                add     eax, esi
                mov     ebp, ebx
                mov     esi, [esp+50h+var_40]
                ror     ebx, 2
                xor     esi, [esp+50h+var_38]
                xor     ebp, ecx
                xor     esi, [esp+50h+var_20]
                xor     ebp, edx
                xor     esi, [esp+50h+var_4C]
                rol     esi, 1
                add     ebp, edi
                mov     [esp+50h+var_40], esi
                mov     edi, eax
                rol     edi, 5
                lea     esi, [ebp+esi+6ED9EBA1h]
                add     esi, edi
                mov     ebp, eax
                mov     edi, [esp+50h+var_3C]
                ror     eax, 2
                xor     edi, [esp+50h+var_34]
                xor     ebp, ebx
                xor     edi, [esp+50h+var_1C]
                xor     ebp, ecx
                xor     edi, [esp+50h+var_48]
                rol     edi, 1
                add     ebp, edx
                mov     [esp+50h+var_3C], edi
                mov     edx, esi
                rol     edx, 5
                lea     edi, [ebp+edi+6ED9EBA1h]
                add     edi, edx
                mov     ebp, esi
                mov     edx, [esp+50h+var_38]
                ror     esi, 2
                xor     edx, [esp+50h+var_30]
                xor     ebp, eax
                xor     edx, [esp+50h+var_18]
                xor     ebp, ebx
                xor     edx, [esp+50h+var_44]
                rol     edx, 1
                add     ebp, ecx
                mov     [esp+50h+var_38], edx
                mov     ecx, edi
                rol     ecx, 5
                lea     edx, [ebp+edx+6ED9EBA1h]
                add     edx, ecx
                mov     ebp, edi
                mov     ecx, [esp+50h+var_34]
                ror     edi, 2
                xor     ecx, [esp+50h+var_2C]
                xor     ebp, esi
                xor     ecx, [esp+50h+var_14]
                xor     ebp, eax
                xor     ecx, [esp+50h+var_40]
                rol     ecx, 1
                add     ebp, ebx
                mov     [esp+50h+var_34], ecx
                mov     ebx, edx
                rol     ebx, 5
                lea     ecx, [ebp+ecx+6ED9EBA1h]
                add     ecx, ebx
                mov     ebx, [esp+50h+var_30]
                mov     ebp, [esp+50h+var_28]
                xor     ebx, ebp
                mov     ebp, [esp+50h+var_50]
                xor     ebx, ebp
                mov     ebp, [esp+50h+var_3C]
                xor     ebx, ebp
                mov     ebp, edx
                rol     ebx, 1
                or      ebp, edi
                mov     [esp+50h+var_30], ebx
                and     ebp, esi
                lea     ebx, [eax+ebx-70E44324h]
                mov     eax, edx
                ror     edx, 2
                and     eax, edi
                or      ebp, eax
                mov     eax, ecx
                rol     eax, 5
                add     ebx, ebp
                add     ebx, eax
                mov     eax, [esp+50h+var_2C]
                mov     ebp, [esp+50h+var_24]
                xor     eax, ebp
                mov     ebp, [esp+50h+var_4C]
                xor     eax, ebp
                mov     ebp, [esp+50h+var_38]
                xor     eax, ebp
                mov     ebp, ecx
                rol     eax, 1
                or      ebp, edx
                mov     [esp+50h+var_2C], eax
                and     ebp, edi
                lea     eax, [esi+eax-70E44324h]
                mov     esi, ecx
                ror     ecx, 2
                and     esi, edx
                or      ebp, esi
                mov     esi, ebx
                rol     esi, 5
                add     eax, ebp
                add     eax, esi
                mov     esi, [esp+50h+var_28]
                mov     ebp, [esp+50h+var_20]
                xor     esi, ebp
                mov     ebp, [esp+50h+var_48]
                xor     esi, ebp
                mov     ebp, [esp+50h+var_34]
                xor     esi, ebp
                mov     ebp, ebx
                rol     esi, 1
                or      ebp, ecx
                mov     [esp+50h+var_28], esi
                and     ebp, edx
                lea     esi, [edi+esi-70E44324h]
                mov     edi, ebx
                ror     ebx, 2
                and     edi, ecx
                or      ebp, edi
                mov     edi, eax
                rol     edi, 5
                add     esi, ebp
                add     esi, edi
                mov     edi, [esp+50h+var_24]
                mov     ebp, [esp+50h+var_1C]
                xor     edi, ebp
                mov     ebp, [esp+50h+var_44]
                xor     edi, ebp
                mov     ebp, [esp+50h+var_30]
                xor     edi, ebp
                mov     ebp, eax
                rol     edi, 1
                or      ebp, ebx
                mov     [esp+50h+var_24], edi
                and     ebp, ecx
                lea     edi, [edx+edi-70E44324h]
                mov     edx, eax
                ror     eax, 2
                and     edx, ebx
                or      ebp, edx
                mov     edx, esi
                rol     edx, 5
                add     edi, ebp
                add     edi, edx
                mov     edx, [esp+50h+var_20]
                mov     ebp, [esp+50h+var_18]
                xor     edx, ebp
                mov     ebp, [esp+50h+var_40]
                xor     edx, ebp
                mov     ebp, [esp+50h+var_2C]
                xor     edx, ebp
                mov     ebp, esi
                rol     edx, 1
                or      ebp, eax
                mov     [esp+50h+var_20], edx
                and     ebp, ebx
                lea     edx, [ecx+edx-70E44324h]
                mov     ecx, esi
                ror     esi, 2
                and     ecx, eax
                or      ebp, ecx
                mov     ecx, edi
                rol     ecx, 5
                add     edx, ebp
                add     edx, ecx
                mov     ecx, [esp+50h+var_1C]
                mov     ebp, [esp+50h+var_14]
                xor     ecx, ebp
                mov     ebp, [esp+50h+var_3C]
                xor     ecx, ebp
                mov     ebp, [esp+50h+var_28]
                xor     ecx, ebp
                mov     ebp, edi
                rol     ecx, 1
                or      ebp, esi
                mov     [esp+50h+var_1C], ecx
                and     ebp, eax
                lea     ecx, [ebx+ecx-70E44324h]
                mov     ebx, edi
                ror     edi, 2
                and     ebx, esi
                or      ebp, ebx
                mov     ebx, edx
                rol     ebx, 5
                add     ecx, ebp
                add     ecx, ebx
                mov     ebx, [esp+50h+var_18]
                mov     ebp, [esp+50h+var_50]
                xor     ebx, ebp
                mov     ebp, [esp+50h+var_38]
                xor     ebx, ebp
                mov     ebp, [esp+50h+var_24]
                xor     ebx, ebp
                mov     ebp, edx
                rol     ebx, 1
                or      ebp, edi
                mov     [esp+50h+var_18], ebx
                and     ebp, esi
                lea     ebx, [eax+ebx-70E44324h]
                mov     eax, edx
                ror     edx, 2
                and     eax, edi
                or      ebp, eax
                mov     eax, ecx
                rol     eax, 5
                add     ebx, ebp
                add     ebx, eax
                mov     eax, [esp+50h+var_14]
                mov     ebp, [esp+50h+var_4C]
                xor     eax, ebp
                mov     ebp, [esp+50h+var_34]
                xor     eax, ebp
                mov     ebp, [esp+50h+var_20]
                xor     eax, ebp
                mov     ebp, ecx
                rol     eax, 1
                or      ebp, edx
                mov     [esp+50h+var_14], eax
                and     ebp, edi
                lea     eax, [esi+eax-70E44324h]
                mov     esi, ecx
                ror     ecx, 2
                and     esi, edx
                or      ebp, esi
                mov     esi, ebx
                rol     esi, 5
                add     eax, ebp
                add     eax, esi
                mov     esi, [esp+50h+var_50]
                mov     ebp, [esp+50h+var_48]
                xor     esi, ebp
                mov     ebp, [esp+50h+var_30]
                xor     esi, ebp
                mov     ebp, [esp+50h+var_1C]
                xor     esi, ebp
                mov     ebp, ebx
                rol     esi, 1
                or      ebp, ecx
                mov     [esp+50h+var_50], esi
                and     ebp, edx
                lea     esi, [edi+esi-70E44324h]
                mov     edi, ebx
                ror     ebx, 2
                and     edi, ecx
                or      ebp, edi
                mov     edi, eax
                rol     edi, 5
                add     esi, ebp
                add     esi, edi
                mov     edi, [esp+50h+var_4C]
                mov     ebp, [esp+50h+var_44]
                xor     edi, ebp
                mov     ebp, [esp+50h+var_2C]
                xor     edi, ebp
                mov     ebp, [esp+50h+var_18]
                xor     edi, ebp
                mov     ebp, eax
                rol     edi, 1
                or      ebp, ebx
                mov     [esp+50h+var_4C], edi
                and     ebp, ecx
                lea     edi, [edx+edi-70E44324h]
                mov     edx, eax
                ror     eax, 2
                and     edx, ebx
                or      ebp, edx
                mov     edx, esi
                rol     edx, 5
                add     edi, ebp
                add     edi, edx
                mov     edx, [esp+50h+var_48]
                mov     ebp, [esp+50h+var_40]
                xor     edx, ebp
                mov     ebp, [esp+50h+var_28]
                xor     edx, ebp
                mov     ebp, [esp+50h+var_14]
                xor     edx, ebp
                mov     ebp, esi
                rol     edx, 1
                or      ebp, eax
                mov     [esp+50h+var_48], edx
                and     ebp, ebx
                lea     edx, [ecx+edx-70E44324h]
                mov     ecx, esi
                ror     esi, 2
                and     ecx, eax
                or      ebp, ecx
                mov     ecx, edi
                rol     ecx, 5
                add     edx, ebp
                add     edx, ecx
                mov     ecx, [esp+50h+var_44]
                mov     ebp, [esp+50h+var_3C]
                xor     ecx, ebp
                mov     ebp, [esp+50h+var_24]
                xor     ecx, ebp
                mov     ebp, [esp+50h+var_50]
                xor     ecx, ebp
                mov     ebp, edi
                rol     ecx, 1
                or      ebp, esi
                mov     [esp+50h+var_44], ecx
                and     ebp, eax
                lea     ecx, [ebx+ecx-70E44324h]
                mov     ebx, edi
                ror     edi, 2
                and     ebx, esi
                or      ebp, ebx
                mov     ebx, edx
                rol     ebx, 5
                add     ecx, ebp
                add     ecx, ebx
                mov     ebx, [esp+50h+var_40]
                mov     ebp, [esp+50h+var_38]
                xor     ebx, ebp
                mov     ebp, [esp+50h+var_20]
                xor     ebx, ebp
                mov     ebp, [esp+50h+var_4C]
                xor     ebx, ebp
                mov     ebp, edx
                rol     ebx, 1
                or      ebp, edi
                mov     [esp+50h+var_40], ebx
                and     ebp, esi
                lea     ebx, [eax+ebx-70E44324h]
                mov     eax, edx
                ror     edx, 2
                and     eax, edi
                or      ebp, eax
                mov     eax, ecx
                rol     eax, 5
                add     ebx, ebp
                add     ebx, eax
                mov     eax, [esp+50h+var_3C]
                mov     ebp, [esp+50h+var_34]
                xor     eax, ebp
                mov     ebp, [esp+50h+var_1C]
                xor     eax, ebp
                mov     ebp, [esp+50h+var_48]
                xor     eax, ebp
                mov     ebp, ecx
                rol     eax, 1
                or      ebp, edx
                mov     [esp+50h+var_3C], eax
                and     ebp, edi
                lea     eax, [esi+eax-70E44324h]
                mov     esi, ecx
                ror     ecx, 2
                and     esi, edx
                or      ebp, esi
                mov     esi, ebx
                rol     esi, 5
                add     eax, ebp
                add     eax, esi
                mov     esi, [esp+50h+var_38]
                mov     ebp, [esp+50h+var_30]
                xor     esi, ebp
                mov     ebp, [esp+50h+var_18]
                xor     esi, ebp
                mov     ebp, [esp+50h+var_44]
                xor     esi, ebp
                mov     ebp, ebx
                rol     esi, 1
                or      ebp, ecx
                mov     [esp+50h+var_38], esi
                and     ebp, edx
                lea     esi, [edi+esi-70E44324h]
                mov     edi, ebx
                ror     ebx, 2
                and     edi, ecx
                or      ebp, edi
                mov     edi, eax
                rol     edi, 5
                add     esi, ebp
                add     esi, edi
                mov     edi, [esp+50h+var_34]
                mov     ebp, [esp+50h+var_2C]
                xor     edi, ebp
                mov     ebp, [esp+50h+var_14]
                xor     edi, ebp
                mov     ebp, [esp+50h+var_40]
                xor     edi, ebp
                mov     ebp, eax
                rol     edi, 1
                or      ebp, ebx
                mov     [esp+50h+var_34], edi
                and     ebp, ecx
                lea     edi, [edx+edi-70E44324h]
                mov     edx, eax
                ror     eax, 2
                and     edx, ebx
                or      ebp, edx
                mov     edx, esi
                rol     edx, 5
                add     edi, ebp
                add     edi, edx
                mov     edx, [esp+50h+var_30]
                mov     ebp, [esp+50h+var_28]
                xor     edx, ebp
                mov     ebp, [esp+50h+var_50]
                xor     edx, ebp
                mov     ebp, [esp+50h+var_3C]
                xor     edx, ebp
                mov     ebp, esi
                rol     edx, 1
                or      ebp, eax
                mov     [esp+50h+var_30], edx
                and     ebp, ebx
                lea     edx, [ecx+edx-70E44324h]
                mov     ecx, esi
                ror     esi, 2
                and     ecx, eax
                or      ebp, ecx
                mov     ecx, edi
                rol     ecx, 5
                add     edx, ebp
                add     edx, ecx
                mov     ecx, [esp+50h+var_2C]
                mov     ebp, [esp+50h+var_24]
                xor     ecx, ebp
                mov     ebp, [esp+50h+var_4C]
                xor     ecx, ebp
                mov     ebp, [esp+50h+var_38]
                xor     ecx, ebp
                mov     ebp, edi
                rol     ecx, 1
                or      ebp, esi
                mov     [esp+50h+var_2C], ecx
                and     ebp, eax
                lea     ecx, [ebx+ecx-70E44324h]
                mov     ebx, edi
                ror     edi, 2
                and     ebx, esi
                or      ebp, ebx
                mov     ebx, edx
                rol     ebx, 5
                add     ecx, ebp
                add     ecx, ebx
                mov     ebx, [esp+50h+var_28]
                mov     ebp, [esp+50h+var_20]
                xor     ebx, ebp
                mov     ebp, [esp+50h+var_48]
                xor     ebx, ebp
                mov     ebp, [esp+50h+var_34]
                xor     ebx, ebp
                mov     ebp, edx
                rol     ebx, 1
                or      ebp, edi
                mov     [esp+50h+var_28], ebx
                and     ebp, esi
                lea     ebx, [eax+ebx-70E44324h]
                mov     eax, edx
                ror     edx, 2
                and     eax, edi
                or      ebp, eax
                mov     eax, ecx
                rol     eax, 5
                add     ebx, ebp
                add     ebx, eax
                mov     eax, [esp+50h+var_24]
                mov     ebp, [esp+50h+var_1C]
                xor     eax, ebp
                mov     ebp, [esp+50h+var_44]
                xor     eax, ebp
                mov     ebp, [esp+50h+var_30]
                xor     eax, ebp
                mov     ebp, ecx
                rol     eax, 1
                or      ebp, edx
                mov     [esp+50h+var_24], eax
                and     ebp, edi
                lea     eax, [esi+eax-70E44324h]
                mov     esi, ecx
                ror     ecx, 2
                and     esi, edx
                or      ebp, esi
                mov     esi, ebx
                rol     esi, 5
                add     eax, ebp
                add     eax, esi
                mov     ebp, ebx
                mov     esi, [esp+50h+var_20]
                ror     ebx, 2
                xor     esi, [esp+50h+var_18]
                xor     ebp, ecx
                xor     esi, [esp+50h+var_40]
                xor     ebp, edx
                xor     esi, [esp+50h+var_2C]
                rol     esi, 1
                add     ebp, edi
                mov     [esp+50h+var_20], esi
                mov     edi, eax
                rol     edi, 5
                lea     esi, [ebp+esi-359D3E2Ah]
                add     esi, edi
                mov     ebp, eax
                mov     edi, [esp+50h+var_1C]
                ror     eax, 2
                xor     edi, [esp+50h+var_14]
                xor     ebp, ebx
                xor     edi, [esp+50h+var_3C]
                xor     ebp, ecx
                xor     edi, [esp+50h+var_28]
                rol     edi, 1
                add     ebp, edx
                mov     [esp+50h+var_1C], edi
                mov     edx, esi
                rol     edx, 5
                lea     edi, [ebp+edi-359D3E2Ah]
                add     edi, edx
                mov     ebp, esi
                mov     edx, [esp+50h+var_18]
                ror     esi, 2
                xor     edx, [esp+50h+var_50]
                xor     ebp, eax
                xor     edx, [esp+50h+var_38]
                xor     ebp, ebx
                xor     edx, [esp+50h+var_24]
                rol     edx, 1
                add     ebp, ecx
                mov     [esp+50h+var_18], edx
                mov     ecx, edi
                rol     ecx, 5
                lea     edx, [ebp+edx-359D3E2Ah]
                add     edx, ecx
                mov     ebp, edi
                mov     ecx, [esp+50h+var_14]
                ror     edi, 2
                xor     ecx, [esp+50h+var_4C]
                xor     ebp, esi
                xor     ecx, [esp+50h+var_34]
                xor     ebp, eax
                xor     ecx, [esp+50h+var_20]
                rol     ecx, 1
                add     ebp, ebx
                mov     [esp+50h+var_14], ecx
                mov     ebx, edx
                rol     ebx, 5
                lea     ecx, [ebp+ecx-359D3E2Ah]
                add     ecx, ebx
                mov     ebp, edx
                mov     ebx, [esp+50h+var_50]
                ror     edx, 2
                xor     ebx, [esp+50h+var_48]
                xor     ebp, edi
                xor     ebx, [esp+50h+var_30]
                xor     ebp, esi
                xor     ebx, [esp+50h+var_1C]
                rol     ebx, 1
                add     ebp, eax
                mov     [esp+50h+var_50], ebx
                mov     eax, ecx
                rol     eax, 5
                lea     ebx, [ebp+ebx-359D3E2Ah]
                add     ebx, eax
                mov     ebp, ecx
                mov     eax, [esp+50h+var_4C]
                ror     ecx, 2
                xor     eax, [esp+50h+var_44]
                xor     ebp, edx
                xor     eax, [esp+50h+var_2C]
                xor     ebp, edi
                xor     eax, [esp+50h+var_18]
                rol     eax, 1
                add     ebp, esi
                mov     [esp+50h+var_4C], eax
                mov     esi, ebx
                rol     esi, 5
                lea     eax, [ebp+eax-359D3E2Ah]
                add     eax, esi
                mov     ebp, ebx
                mov     esi, [esp+50h+var_48]
                ror     ebx, 2
                xor     esi, [esp+50h+var_40]
                xor     ebp, ecx
                xor     esi, [esp+50h+var_28]
                xor     ebp, edx
                xor     esi, [esp+50h+var_14]
                rol     esi, 1
                add     ebp, edi
                mov     [esp+50h+var_48], esi
                mov     edi, eax
                rol     edi, 5
                lea     esi, [ebp+esi-359D3E2Ah]
                add     esi, edi
                mov     ebp, eax
                mov     edi, [esp+50h+var_44]
                ror     eax, 2
                xor     edi, [esp+50h+var_3C]
                xor     ebp, ebx
                xor     edi, [esp+50h+var_24]
                xor     ebp, ecx
                xor     edi, [esp+50h+var_50]
                rol     edi, 1
                add     ebp, edx
                mov     [esp+50h+var_44], edi
                mov     edx, esi
                rol     edx, 5
                lea     edi, [ebp+edi-359D3E2Ah]
                add     edi, edx
                mov     ebp, esi
                mov     edx, [esp+50h+var_40]
                ror     esi, 2
                xor     edx, [esp+50h+var_38]
                xor     ebp, eax
                xor     edx, [esp+50h+var_20]
                xor     ebp, ebx
                xor     edx, [esp+50h+var_4C]
                rol     edx, 1
                add     ebp, ecx
                mov     [esp+50h+var_40], edx
                mov     ecx, edi
                rol     ecx, 5
                lea     edx, [ebp+edx-359D3E2Ah]
                add     edx, ecx
                mov     ebp, edi
                mov     ecx, [esp+50h+var_3C]
                ror     edi, 2
                xor     ecx, [esp+50h+var_34]
                xor     ebp, esi
                xor     ecx, [esp+50h+var_1C]
                xor     ebp, eax
                xor     ecx, [esp+50h+var_48]
                rol     ecx, 1
                add     ebp, ebx
                mov     [esp+50h+var_3C], ecx
                mov     ebx, edx
                rol     ebx, 5
                lea     ecx, [ebp+ecx-359D3E2Ah]
                add     ecx, ebx
                mov     ebp, edx
                mov     ebx, [esp+50h+var_38]
                ror     edx, 2
                xor     ebx, [esp+50h+var_30]
                xor     ebp, edi
                xor     ebx, [esp+50h+var_18]
                xor     ebp, esi
                xor     ebx, [esp+50h+var_44]
                rol     ebx, 1
                add     ebp, eax
                mov     [esp+50h+var_38], ebx
                mov     eax, ecx
                rol     eax, 5
                lea     ebx, [ebp+ebx-359D3E2Ah]
                add     ebx, eax
                mov     ebp, ecx
                mov     eax, [esp+50h+var_34]
                ror     ecx, 2
                xor     eax, [esp+50h+var_2C]
                xor     ebp, edx
                xor     eax, [esp+50h+var_14]
                xor     ebp, edi
                xor     eax, [esp+50h+var_40]
                rol     eax, 1
                add     ebp, esi
                mov     [esp+50h+var_34], eax
                mov     esi, ebx
                rol     esi, 5
                lea     eax, [ebp+eax-359D3E2Ah]
                add     eax, esi
                mov     ebp, ebx
                mov     esi, [esp+50h+var_30]
                ror     ebx, 2
                xor     esi, [esp+50h+var_28]
                xor     ebp, ecx
                xor     esi, [esp+50h+var_50]
                xor     ebp, edx
                xor     esi, [esp+50h+var_3C]
                rol     esi, 1
                add     ebp, edi
                mov     [esp+50h+var_30], esi
                mov     edi, eax
                rol     edi, 5
                lea     esi, [ebp+esi-359D3E2Ah]
                add     esi, edi
                mov     ebp, eax
                mov     edi, [esp+50h+var_2C]
                ror     eax, 2
                xor     edi, [esp+50h+var_24]
                xor     ebp, ebx
                xor     edi, [esp+50h+var_4C]
                xor     ebp, ecx
                xor     edi, [esp+50h+var_38]
                rol     edi, 1
                add     ebp, edx
                mov     [esp+50h+var_2C], edi
                mov     edx, esi
                rol     edx, 5
                lea     edi, [ebp+edi-359D3E2Ah]
                add     edi, edx
                mov     ebp, esi
                mov     edx, [esp+50h+var_28]
                ror     esi, 2
                xor     edx, [esp+50h+var_20]
                xor     ebp, eax
                xor     edx, [esp+50h+var_48]
                xor     ebp, ebx
                xor     edx, [esp+50h+var_34]
                rol     edx, 1
                add     ebp, ecx
                mov     [esp+50h+var_28], edx
                mov     ecx, edi
                rol     ecx, 5
                lea     edx, [ebp+edx-359D3E2Ah]
                add     edx, ecx
                mov     ebp, edi
                mov     ecx, [esp+50h+var_24]
                ror     edi, 2
                xor     ecx, [esp+50h+var_1C]
                xor     ebp, esi
                xor     ecx, [esp+50h+var_44]
                xor     ebp, eax
                xor     ecx, [esp+50h+var_30]
                rol     ecx, 1
                add     ebp, ebx
                mov     [esp+50h+var_24], ecx
                mov     ebx, edx
                rol     ebx, 5
                lea     ecx, [ebp+ecx-359D3E2Ah]
                add     ecx, ebx
                mov     ebp, edx
                mov     ebx, [esp+50h+var_20]
                ror     edx, 2
                xor     ebx, [esp+50h+var_18]
                xor     ebp, edi
                xor     ebx, [esp+50h+var_40]
                xor     ebp, esi
                xor     ebx, [esp+50h+var_2C]
                rol     ebx, 1
                add     ebp, eax
                mov     [esp+50h+var_20], ebx
                mov     eax, ecx
                rol     eax, 5
                lea     ebx, [ebp+ebx-359D3E2Ah]
                add     ebx, eax
                mov     ebp, ecx
                mov     eax, [esp+50h+var_1C]
                ror     ecx, 2
                xor     eax, [esp+50h+var_14]
                xor     ebp, edx
                xor     eax, [esp+50h+var_3C]
                xor     ebp, edi
                xor     eax, [esp+50h+var_28]
                rol     eax, 1
                add     ebp, esi
                mov     [esp+50h+var_1C], eax
                mov     esi, ebx
                rol     esi, 5
                lea     eax, [ebp+eax-359D3E2Ah]
                add     eax, esi
                mov     ebp, ebx
                mov     esi, [esp+50h+var_18]
                ror     ebx, 2
                xor     esi, [esp+50h+var_50]
                xor     ebp, ecx
                xor     esi, [esp+50h+var_38]
                xor     ebp, edx
                xor     esi, [esp+50h+var_24]
                rol     esi, 1
                add     ebp, edi
                mov     [esp+50h+var_18], esi
                mov     edi, eax
                rol     edi, 5
                lea     esi, [ebp+esi-359D3E2Ah]
                add     esi, edi
                mov     ebp, eax
                mov     edi, [esp+50h+var_14]
                ror     eax, 2
                xor     edi, [esp+50h+var_4C]
                xor     ebp, ebx
                xor     edi, [esp+50h+var_34]
                xor     ebp, ecx
                xor     edi, [esp+50h+var_20]
                rol     edi, 1
                add     ebp, edx
                mov     [esp+50h+var_14], edi
                mov     edx, esi
                rol     edx, 5
                lea     edi, [ebp+edi-359D3E2Ah]
                add     edi, edx
                mov     ebp, [esp+50h+arg_0]
                mov     edx, [esp+50h+arg_4]
                add     edi, [ebp+0]
                add     esi, [ebp+4]
                add     eax, [ebp+8]
                add     ebx, [ebp+0Ch]
                add     ecx, [ebp+10h]
                mov     [ebp+0], edi
                add     edx, 40h
                mov     [ebp+4], esi
                cmp     edx, [esp+50h+arg_8]
                mov     [ebp+8], eax
                mov     edi, ecx
                mov     [ebp+0Ch], ebx
                mov     esi, edx
                mov     [ebp+10h], ecx
                jb      loc_10025FB0
                add     esp, 40h
                pop     edi
                pop     esi
                pop     ebx
                pop     ebp
                retn
sub_10025F80    endp

sub_10013050    proc near               ; DATA XREF: .rdata:1004D270o
                                        ; .rdata:1004D2B8o

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                mov     eax, [esp+arg_0]
                mov     ecx, [eax+0Ch]
                mov     edx, [esp+arg_4]
                push    ecx
                push    edx
                call    sub_10017F60
                add     esp, 8
                retn
sub_10013050    endp

sub_10017F60    proc near               ; CODE XREF: sub_10013050+Dp

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                push    ebx
                push    esi
                push    edi
                mov     edi, [esp+0Ch+arg_4]
                mov     ebx, [edi+5Ch]
                lea     esi, [edi+1Ch]
                mov     byte ptr [ebx+esi], 80h
                inc     ebx
                cmp     ebx, 38h
                jbe     short loc_10017F97
                mov     eax, 40h
                sub     eax, ebx
                push    eax             ; size_t
                push    0               ; int
                add     ebx, esi
                push    ebx             ; void *
                call    crt_memset
                push    1
                push    esi
                push    edi
                xor     ebx, ebx
                call    sub_10025F80
                add     esp, 18h

loc_10017F97:                           ; CODE XREF: sub_10017F60+15j
                mov     ecx, 38h
                sub     ecx, ebx
                push    ecx             ; size_t
                push    0               ; int
                add     ebx, esi
                push    ebx             ; void *
                call    crt_memset
                movzx   edx, byte ptr [edi+1Bh]
                mov     [esi+38h], dl
                movzx   eax, byte ptr [edi+1Ah]
                add     esi, 38h
                mov     [esi+1], al
                movzx   ecx, byte ptr [edi+19h]
                inc     esi
                mov     [esi+1], cl
                movzx   edx, byte ptr [edi+18h]
                inc     esi
                mov     [esi+1], dl
                movzx   eax, byte ptr [edi+17h]
                inc     esi
                mov     [esi+1], al
                movzx   ecx, byte ptr [edi+16h]
                inc     esi
                mov     [esi+1], cl
                movzx   edx, byte ptr [edi+15h]
                inc     esi
                inc     esi
                mov     [esi], dl
                movzx   eax, byte ptr [edi+14h]
                inc     esi
                mov     [esi], al
                push    1
                sub     esi, 3Fh
                push    esi
                push    edi
                call    sub_10025F80
                push    40h             ; size_t
                push    0               ; int
                push    esi             ; void *
                mov     dword ptr [edi+5Ch], 0
                call    crt_memset
                mov     ecx, [edi]
                mov     eax, [esp+30h+arg_0]
                mov     edx, ecx
                shr     edx, 18h
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                shr     edx, 10h
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                shr     edx, 8
                mov     [eax], dl
                mov     [eax+1], cl
                mov     ecx, [edi+4]
                inc     eax
                inc     eax
                mov     edx, ecx
                shr     edx, 18h
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                shr     edx, 10h
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                shr     edx, 8
                mov     [eax], dl
                inc     eax
                mov     [eax], cl
                mov     ecx, [edi+8]
                inc     eax
                mov     edx, ecx
                shr     edx, 18h
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                add     esp, 24h
                shr     edx, 10h
                mov     [eax], dl
                inc     eax
                inc     eax
                mov     edx, ecx
                shr     edx, 8
                mov     [eax-1], dl
                mov     [eax], cl
                mov     ecx, [edi+0Ch]
                inc     eax
                mov     edx, ecx
                shr     edx, 18h
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                shr     edx, 10h
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                shr     edx, 8
                mov     [eax], dl
                mov     [eax+1], cl
                mov     ecx, [edi+10h]
                inc     eax
                inc     eax
                mov     edx, ecx
                shr     edx, 18h
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                shr     edx, 10h
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                pop     edi
                shr     edx, 8
                mov     [eax], dl
                pop     esi
                mov     [eax+1], cl
                mov     eax, 1
                pop     ebx
                retn
sub_10017F60    endp




sub_10007BB0    proc near               ; CODE XREF: sub_10005500+2Dp
                                        ; sub_10007E00+B5p
                test    esi, esi
                mov     dword ptr [eax+183Ch], 0FFFFFFFFh
                mov     dword ptr [eax+1840h], 0
                jz      short locret_10007C01
                xor     ecx, ecx
                xor     edx, edx
                push    edi
                lea     ecx, [ecx+0]

loc_10007BD0:                           ; CODE XREF: sub_10007BB0+4Ej
                movzx   edi, word ptr [esi]
                cmp     ecx, edi
                jge     short loc_10007C00
                mov     edi, [esi+4]
                mov     edi, [edx+edi]
                cmp     edi, [eax+1838h]
                jnz     short loc_10007BF1
                mov     [eax+183Ch], ecx
                mov     [eax+1840h], esi

loc_10007BF1:                           ; CODE XREF: sub_10007BB0+33j
                add     ecx, 1
                add     edx, 10h
                cmp     dword ptr [eax+1840h], 0
                jz      short loc_10007BD0

loc_10007C00:                           ; CODE XREF: sub_10007BB0+25j
                pop     edi

locret_10007C01:                        ; CODE XREF: sub_10007BB0+16j
                retn
sub_10007BB0    endp

__allrem        proc near               ; CODE XREF: sub_100078E0+17p

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch
arg_C           = dword ptr  10h

                push    ebx
                push    edi
                xor     edi, edi
                mov     eax, [esp+8+arg_4]
                or      eax, eax
                jge     short loc_10042860
                inc     edi
                mov     edx, [esp+8+arg_0]
                neg     eax
                neg     edx
                sbb     eax, 0
                mov     [esp+8+arg_4], eax
                mov     [esp+8+arg_0], edx

loc_10042860:                           ; CODE XREF: __allrem+Aj
                mov     eax, [esp+8+arg_C]
                or      eax, eax
                jge     short loc_1004287B
                mov     edx, [esp+8+arg_8]
                neg     eax
                neg     edx
                sbb     eax, 0
                mov     [esp+8+arg_C], eax
                mov     [esp+8+arg_8], edx

loc_1004287B:                           ; CODE XREF: __allrem+26j
                or      eax, eax
                jnz     short loc_1004289A
                mov     ecx, [esp+8+arg_8]
                mov     eax, [esp+8+arg_4]
                xor     edx, edx
                div     ecx
                mov     eax, [esp+8+arg_0]
                div     ecx
                mov     eax, edx
                xor     edx, edx
                dec     edi
                jns     short loc_100428E6
                jmp     short loc_100428ED
; ---------------------------------------------------------------------------

loc_1004289A:                           ; CODE XREF: __allrem+3Dj
                mov     ebx, eax
                mov     ecx, [esp+8+arg_8]
                mov     edx, [esp+8+arg_4]
                mov     eax, [esp+8+arg_0]

loc_100428A8:                           ; CODE XREF: __allrem+72j
                shr     ebx, 1
                rcr     ecx, 1
                shr     edx, 1
                rcr     eax, 1
                or      ebx, ebx
                jnz     short loc_100428A8
                div     ecx
                mov     ecx, eax
                mul     [esp+8+arg_C]
                xchg    eax, ecx
                mul     [esp+8+arg_8]
                add     edx, ecx
                jb      short loc_100428D3
                cmp     edx, [esp+8+arg_4]
                ja      short loc_100428D3
                jb      short loc_100428DB
                cmp     eax, [esp+8+arg_0]
                jbe     short loc_100428DB

loc_100428D3:                           ; CODE XREF: __allrem+83j __allrem+89j
                sub     eax, [esp+8+arg_8]
                sbb     edx, [esp+8+arg_C]

loc_100428DB:                           ; CODE XREF: __allrem+8Bj __allrem+91j
                sub     eax, [esp+8+arg_0]
                sbb     edx, [esp+8+arg_4]
                dec     edi
                jns     short loc_100428ED

loc_100428E6:                           ; CODE XREF: __allrem+56j
                neg     edx
                neg     eax
                sbb     edx, 0

loc_100428ED:                           ; CODE XREF: __allrem+58j __allrem+A4j
                pop     edi
                pop     ebx
                retn    10h
__allrem        endp

__allmul        proc near               ; CODE XREF: sub_10006550+68p
                                        ; sub_10006550+1AEp ...

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch
arg_C           = dword ptr  10h

                mov     eax, [esp+arg_4]
                mov     ecx, [esp+arg_C]
                or      ecx, eax
                mov     ecx, [esp+arg_8]
                jnz     short loc_1003C5C9
                mov     eax, [esp+arg_0]
                mul     ecx
                retn    10h
; ---------------------------------------------------------------------------

loc_1003C5C9:                           ; CODE XREF: __allmul+Ej
                push    ebx
                mul     ecx
                mov     ebx, eax
                mov     eax, [esp+4+arg_0]
                mul     [esp+4+arg_C]
                add     ebx, eax
                mov     eax, [esp+4+arg_0]
                mul     ecx
                add     edx, ebx
                pop     ebx
                retn    10h
__allmul        endp



sub_100078E0    proc near               ; CODE XREF: sub_10005500+114p
                                        ; f_setdecryptfunc+30p ...

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                push    ecx
                push    ebx
                mov     ebx, [esp+8+arg_4]
                push    ebp
                mov     ebp, [esp+0Ch+arg_0]
                push    edi
                mov     edi, [esi]
                push    0
                push    1800h
                push    ebx
                push    ebp
                call    __allrem
                cdq
                sub     ebp, eax
                mov     eax, [edi+8]
                push    0
                sbb     ebx, edx
                push    ebx
                push    ebp
                push    edi
                call    eax
                add     esp, 10h
                or      eax, edx
                jz      short loc_1000791A
                or      eax, 0FFFFFFFFh
                pop     edi
                pop     ebp
                pop     ebx
                pop     ecx
                retn
; ---------------------------------------------------------------------------

loc_1000791A:                           ; CODE XREF: sub_100078E0+30j
                push    0
                lea     eax, [esi+20h]
                push    1800h
                push    eax
                mov     [esi+10h], ebp
                mov     [esi+14h], ebx
                mov     ecx, [edi+14h]
                push    edi
                call    ecx
                add     esp, 10h
                test    eax, eax
                mov     [esi+1Ch], eax
                mov     dword ptr [esi+18h], 0
                jle     short loc_1000799D
                mov     al, [esi+20h]
                mov     ecx, [esp+10h+arg_8]
                lea     edi, [esi+20h]
                shr     al, 6
                test    ecx, ecx
                jz      short loc_1000795C
                xor     edx, edx
                cmp     al, 3
                setz    dl
                mov     [ecx], edx

loc_1000795C:                           ; CODE XREF: sub_100078E0+71j
                cmp     al, 3
                jnz     short loc_1000799D
                cmp     dword ptr [esi+1Ch], 1800h
                jnz     short loc_1000799D
                cmp     dword ptr [esi+1820h], 0
                jz      short loc_1000799D
                mov     eax, [esi+1834h]
                test    eax, eax
                jz      short loc_1000799D
                push    esi
                call    eax             ; ----------------eax   解密函数
                add     esp, 4
                mov     eax, edi
                mov     ecx, 20h
                lea     esp, [esp+0]

loc_10007990:                           ; CODE XREF: sub_100078E0+BBj
                and     byte ptr [eax], 3Fh ;  明文首字节改成11
                add     eax, 0C0h
                sub     ecx, 1
                jnz     short loc_10007990

loc_1000799D:                           ; CODE XREF: sub_100078E0+60j
                                        ; sub_100078E0+7Ej ...
                mov     eax, [esi+1840h]
                xor     edx, edx
                cmp     eax, edx
                jz      short loc_100079EE
                test    byte_10085E24, 40h
                mov     ecx, [esi+183Ch]
                mov     [eax+10h], ecx
                mov     [eax+14h], edx
                mov     [eax+18h], edx
                mov     [eax+20h], ebp
                mov     [eax+24h], ebx
                jz      short loc_100079D7
                push    ebx
                push    ebp
                push    ecx
                push    offset aSegmentSeekTab ; "[segment] seek(table %u): %016lld\n"
                call    sub_1003A7BD
                add     esp, 10h

loc_100079D7:                           ; CODE XREF: sub_100078E0+E5j
                mov     ecx, [esi+1840h]
                lea     eax, [esi+20h]
                push    eax
                mov     eax, [esi+1Ch]
                push    eax
                push    ecx
                call    sub_10012A50
                add     esp, 0Ch

loc_100079EE:                           ; CODE XREF: sub_100078E0+C7j
                mov     eax, [esi+1Ch]
                pop     edi
                pop     ebp
                pop     ebx
                pop     ecx
                retn
sub_100078E0    endp
sub_10012A50    proc near               ; CODE XREF: sub_100078E0+106p

var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                sub     esp, 34h
                test    byte_10085E24, 40h
                push    ebx
                push    ebp
                push    esi
                mov     esi, [esp+40h+arg_0]
                push    edi
                mov     [esp+44h+var_34], 0
                jz      short loc_10012A86
                mov     eax, [esi+24h]
                mov     ecx, [esi+20h]
                mov     edx, [esp+44h+arg_4]
                push    eax
                push    ecx
                push    edx
                push    offset aSegmentReadLen ; "[segment] read(len %d): %016lld\n"
                call    sub_1003A7BD
                add     esp, 10h

loc_10012A86:                           ; CODE XREF: sub_10012A50+1Aj
                mov     ecx, [esi+20h]
                mov     eax, [esp+44h+arg_4]
                mov     edi, [esi+24h]
                cdq
                add     eax, ecx
                adc     edx, edi
                mov     [esp+44h+var_18], ecx
                mov     ecx, [esi+10h]
                shl     ecx, 4
                add     ecx, [esi+4]
                mov     [esi+24h], edx
                mov     [esp+44h+var_C], edx
                mov     edx, [esi+14h]
                mov     [esi+20h], eax
                cmp     edx, [ecx+4]
                mov     [esp+44h+var_14], edi
                mov     [esp+44h+var_10], eax
                mov     [esp+44h+var_1C], ecx
                mov     [esp+44h+var_24], edx
                jnb     loc_10012D2B
                lea     edi, [edx+edx*4]
                add     edi, edi
                add     edi, edi
                add     edi, edi
                mov     [esp+44h+var_20], edi

loc_10012AD5:                           ; CODE XREF: sub_10012A50+2D5j
                mov     eax, [ecx+8]
                mov     ebx, [esi+18h]
                add     eax, edi
                cmp     ebx, [eax+8]
                mov     [esp+44h+var_28], eax
                mov     [esp+44h+var_2C], ebx
                jnb     loc_10012D09
                lea     ecx, [ebx+ebx*2]
                add     ecx, ecx
                add     ecx, ecx
                add     ecx, ecx
                mov     [esp+44h+var_30], ecx
                jmp     short loc_10012B08
; ---------------------------------------------------------------------------
                align 10h

loc_10012B00:                           ; CODE XREF: sub_10012A50+2A3j
                mov     eax, [esp+44h+var_28]
                mov     ecx, [esp+44h+var_30]

loc_10012B08:                           ; CODE XREF: sub_10012A50+ABj
                mov     esi, [eax+0Ch]
                movzx   eax, word ptr [esi+ecx+6]
                add     esi, ecx
                cdq
                mov     ebx, eax
                mov     eax, [esi]
                xor     ecx, ecx
                push    0
                add     eax, ebx
                mov     ebp, edx
                push    0C0h
                adc     ecx, ebp
                push    ecx
                push    eax
                call    __allmul
                mov     ecx, eax
                movzx   eax, byte ptr [esi+0Ah]
                mov     edi, edx
                cdq
                add     ecx, eax
                adc     edi, edx
                cmp     edi, [esp+44h+var_C]
                mov     [esp+44h+var_8], ecx
                ja      loc_10012D36
                jb      short loc_10012B54
                cmp     ecx, [esp+44h+var_10]
                ja      loc_10012D36

loc_10012B54:                           ; CODE XREF: sub_10012A50+F8j
                movzx   eax, word ptr [esi+8]
                cdq
                mov     ecx, eax
                add     ecx, [esi]
                mov     eax, 0
                adc     edx, eax
                push    eax
                add     ecx, ebx
                push    0C0h
                adc     edx, ebp
                push    edx
                push    ecx
                call    __allmul
                mov     ebx, eax
                movzx   eax, byte ptr [esi+0Bh]
                mov     ebp, edx
                cdq
                add     ebx, eax
                adc     ebp, edx
                mov     edx, [esp+44h+var_14]
                mov     ecx, ebx
                add     ecx, 5
                mov     eax, ebp
                adc     eax, 0
                cmp     eax, edx
                jb      loc_10012CD4
                mov     eax, [esp+44h+var_18]
                ja      short loc_10012BA6
                cmp     ecx, eax
                jbe     loc_10012CD4

loc_10012BA6:                           ; CODE XREF: sub_10012A50+14Cj
                cmp     edi, edx
                ja      short loc_10012BE5
                jb      short loc_10012BB2
                cmp     [esp+44h+var_8], eax
                jnb     short loc_10012BE5

loc_10012BB2:                           ; CODE XREF: sub_10012A50+15Aj
                sub     eax, [esp+44h+var_8]
                mov     ecx, edx
                sbb     ecx, edi
                test    ecx, ecx
                ja      short loc_10012C36
                jb      short loc_10012BC5
                cmp     eax, 5
                jnb     short loc_10012C36

loc_10012BC5:                           ; CODE XREF: sub_10012A50+16Ej
                mov     ecx, [esp+44h+arg_8]
                mov     edx, 5
                sub     edx, eax
                push    edx
                lea     eax, [eax+esi+0Ch]
                push    eax
                push    ecx
                call    crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                mov     edx, [esp+50h+var_14]
                add     esp, 0Ch
                jmp     short loc_10012C31
; ---------------------------------------------------------------------------

loc_10012BE5:                           ; CODE XREF: sub_10012A50+158j
                                        ; sub_10012A50+160j
                mov     ecx, [esp+44h+var_10]
                sub     ecx, [esp+44h+var_8]
                mov     eax, [esp+44h+var_C]
                sbb     eax, edi
                test    eax, eax
                ja      short loc_10012C1C
                jb      short loc_10012BFE
                cmp     ecx, 5
                jnb     short loc_10012C1C

loc_10012BFE:                           ; CODE XREF: sub_10012A50+1A7j
                mov     eax, [esp+44h+arg_4]
                push    ecx
                sub     eax, ecx
                add     eax, [esp+48h+arg_8]
                lea     edx, [esi+0Ch]
                push    edx
                push    eax
                call    crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                mov     edx, [esp+50h+var_14]
                add     esp, 0Ch
                jmp     short loc_10012C31
; ---------------------------------------------------------------------------

loc_10012C1C:                           ; CODE XREF: sub_10012A50+1A5j
                                        ; sub_10012A50+1ACj
                mov     eax, [esp+44h+arg_4]
                sub     eax, ecx
                add     eax, [esp+44h+arg_8]
                mov     ecx, [esi+0Ch]
                mov     [eax], ecx
                mov     cl, [esi+10h]
                mov     [eax+4], cl

loc_10012C31:                           ; CODE XREF: sub_10012A50+193j
                                        ; sub_10012A50+1CAj
                add     [esp+44h+var_34], 1

loc_10012C36:                           ; CODE XREF: sub_10012A50+16Cj
                                        ; sub_10012A50+173j
                mov     eax, [esp+44h+var_C]
                cmp     ebp, eax
                ja      loc_10012D36
                jb      short loc_10012C4E
                cmp     ebx, [esp+44h+var_10]
                ja      loc_10012D36

loc_10012C4E:                           ; CODE XREF: sub_10012A50+1F2j
                cmp     ebp, edx
                ja      short loc_10012C8B
                jb      short loc_10012C5A
                cmp     ebx, [esp+44h+var_18]
                jnb     short loc_10012C8B

loc_10012C5A:                           ; CODE XREF: sub_10012A50+202j
                mov     eax, [esp+44h+var_18]
                sub     eax, ebx
                mov     ecx, edx
                sbb     ecx, ebp
                test    ecx, ecx
                ja      short loc_10012CD4
                jb      short loc_10012C6F
                cmp     eax, 5
                jnb     short loc_10012CD4

loc_10012C6F:                           ; CODE XREF: sub_10012A50+218j
                mov     ecx, [esp+44h+arg_8]
                mov     edx, 5
                sub     edx, eax
                push    edx
                lea     eax, [eax+esi+11h]
                push    eax
                push    ecx
                call    crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                add     esp, 0Ch
                jmp     short loc_10012CCF
; ---------------------------------------------------------------------------

loc_10012C8B:                           ; CODE XREF: sub_10012A50+200j
                                        ; sub_10012A50+208j
                mov     ecx, [esp+44h+var_10]
                sub     ecx, ebx
                sbb     eax, ebp
                test    eax, eax
                ja      short loc_10012CB8
                jb      short loc_10012C9E
                cmp     ecx, 5
                jnb     short loc_10012CB8

loc_10012C9E:                           ; CODE XREF: sub_10012A50+247j
                mov     edx, [esp+44h+arg_4]
                push    ecx
                sub     edx, ecx
                add     edx, [esp+48h+arg_8]
                add     esi, 11h
                push    esi
                push    edx
                call    crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                add     esp, 0Ch
                jmp     short loc_10012CCF
; ---------------------------------------------------------------------------

loc_10012CB8:                           ; CODE XREF: sub_10012A50+245j
                                        ; sub_10012A50+24Cj
                mov     eax, [esp+44h+arg_4]
                add     esi, 11h
                sub     eax, ecx
                add     eax, [esp+44h+arg_8]
                mov     ecx, [esi]
                mov     [eax], ecx
                mov     dl, [esi+4]
                mov     [eax+4], dl

loc_10012CCF:                           ; CODE XREF: sub_10012A50+239j
                                        ; sub_10012A50+266j
                add     [esp+44h+var_34], 1

loc_10012CD4:                           ; CODE XREF: sub_10012A50+142j
                                        ; sub_10012A50+150j ...
                mov     ecx, [esp+44h+arg_0]
                mov     eax, [esp+44h+var_2C]
                add     dword ptr [ecx+18h], 1
                mov     ecx, [esp+44h+var_28]
                add     [esp+44h+var_30], 18h
                add     eax, 1
                cmp     eax, [ecx+8]
                mov     [esp+44h+var_2C], eax
                jb      loc_10012B00
                mov     esi, [esp+44h+arg_0]
                mov     ecx, [esp+44h+var_1C]
                mov     edx, [esp+44h+var_24]
                mov     edi, [esp+44h+var_20]

loc_10012D09:                           ; CODE XREF: sub_10012A50+98j
                add     dword ptr [esi+14h], 1
                add     edx, 1
                add     edi, 28h
                mov     dword ptr [esi+18h], 0
                cmp     edx, [ecx+4]
                mov     [esp+44h+var_24], edx
                mov     [esp+44h+var_20], edi
                jb      loc_10012AD5

loc_10012D2B:                           ; CODE XREF: sub_10012A50+72j
                or      eax, 0FFFFFFFFh
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                add     esp, 34h
                retn
; ---------------------------------------------------------------------------

loc_10012D36:                           ; CODE XREF: sub_10012A50+F2j
                                        ; sub_10012A50+FEj ...
                mov     eax, [esp+44h+var_34]
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                add     esp, 34h
                retn
sub_10012A50    endp
sub_10010F70    proc near               ; CODE XREF: AskNetFileContent+17p
                test    ebx, ebx
                jnz     short loc_10010F77
                xor     eax, eax
                retn
; ---------------------------------------------------------------------------

loc_10010F77:                           ; CODE XREF: sub_10010F70+2j
                push    esi
                push    118h            ; size_t
                call    crt_malloc    ; operator new(uint)
                mov     esi, eax
                add     esp, 4
                test    esi, esi
                jz      short loc_10010FC2
                mov     dword ptr [esi], offset ??_7CHttpSession@@6B@
                mov     dword ptr [esi+4], 0
                call    sub_10012830
                mov     [esi+10Ch], eax
                xor     eax, eax
                test    esi, esi
                mov     dword ptr [esi+110h], 0
                mov     dword ptr [esi+114h], 0
                mov     [ebx], esi
                setnz   al
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_10010FC2:                           ; CODE XREF: sub_10010F70+19j
                xor     esi, esi
                xor     eax, eax
                test    esi, esi
                mov     [ebx], esi
                setnz   al
                pop     esi
                retn
sub_10010F70    endp


AskNetFileContent proc near   c          ; CODE XREF: AskKeyFromNet+77p
                                        ; sub_10011B70+70p ...

var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch
arg_C           = dword ptr  10h

                sub     esp, 8
                push    ebx
                push    ebp
                push    edi
                xor     edi, edi
                lea     ebx, [esp+14h+var_4]
                or      ebp, 0FFFFFFFFh
                mov     [esp+14h+var_8], edi
                mov     [esp+14h+var_4], edi
                call    sub_10010F70
                test    eax, eax
                jz      loc_1001169E
                push    esi
                mov     esi, [esp+18h+var_4]
                mov     eax, [esi]
                mov     edx, [eax+4]
                push    edi
                mov     ecx, esi
                call    edx
                test    eax, eax
                jz      loc_1001167F
                mov     ecx, [esp+18h+arg_0]
                mov     eax, [esi]
                mov     edx, [eax+0Ch]
                push    ecx
                mov     ecx, esi
                call    edx
                test    eax, eax
                jz      loc_1001167F
                mov     ecx, [esp+18h+arg_8]
                mov     eax, [esi]
                mov     edx, [esp+18h+arg_4]
                mov     eax, [eax+14h]
                push    ecx
                push    edx
                mov     ecx, esi
                call    eax
                test    eax, eax
                jz      loc_1001167F
                mov     edx, [esi]
                mov     eax, [edx+18h]
                mov     ecx, esi
                call    eax
                test    eax, eax
                jnz     short loc_10011600
                mov     ebp, 0FFFFFF38h
                jmp      loc_1001167F
; ---------------------------------------------------------------------------

loc_10011600:                           ; CODE XREF: AskNetFileContent+77j
                mov     edx, [esi]
                mov     edx, [edx+1Ch]
                lea     eax, [esp+18h+var_8]
                push    eax
                xor     ebp, ebp
                push    ebp
                mov     ecx, esi
                call    edx
                mov     eax, [esp+18h+var_8]
                add     eax, 1
                push    eax             ; size_t
                call    crt_malloc
                mov     ecx, [esp+1Ch+var_8]
                add     ecx, 1
                push    ecx             ; size_t
                mov     edi, eax
                push    ebp             ; int
                push    edi             ; void *
                call    crt_memset
                mov     edx, [esi]
                mov     edx, [edx+1Ch]
                add     esp, 10h
                lea     eax, [esp+18h+var_8]
                push    eax
                push    edi
                mov     ecx, esi
                call    edx
                test    eax, eax
                jz      short loc_1001167F
                mov     ebp, [esp+18h+var_8]
                xor     eax, eax
                test    ebp, ebp
                jbe     short loc_1001165D
                nop

loc_10011650:                           ; CODE XREF: AskNetFileContent+DBj
                cmp     byte ptr [eax+edi], 20h
                jz      short loc_1001165D
                add     eax, 1
                cmp     eax, ebp
                jb      short loc_10011650

loc_1001165D:                           ; CODE XREF: AskNetFileContent+CDj
                                        ; AskNetFileContent+D4j
                cmp     byte ptr [edi], 2Dh
                jnz     short loc_10011673
                cmp     eax, ebp
                jz      short loc_10011673
                push    edi             ; char *
                call    j__atol
                add     esp, 4
                mov     ebp, eax
                jmp     short loc_1001167F
; ---------------------------------------------------------------------------

loc_10011673:                           ; CODE XREF: AskNetFileContent+E0j
                                        ; AskNetFileContent+E4j
                mov     eax, [esp+18h+arg_C]
                test    eax, eax
                jz      short loc_1001167F
                mov     [eax], edi
                xor     edi, edi

loc_1001167F:                           ; CODE XREF: AskNetFileContent+35j
                                        ; AskNetFileContent+4Bj ...
                mov     eax, [esi]
                mov     edx, [eax+8]
                mov     ecx, esi
                call    edx
                mov     eax, [esi]
                mov     edx, [eax]
                mov     ecx, esi
                call    edx
                test    edi, edi
                pop     esi
                jz      short loc_1001169E
                push    edi             ; void *
                call    crt_free
                add     esp, 4

loc_1001169E:                           ; CODE XREF: AskNetFileContent+1Ej
                                        ; AskNetFileContent+113j
                pop     edi
                mov     eax, ebp
                pop     ebp
                pop     ebx
                add     esp, 8
                retn
AskNetFileContent endp

sub_10012830    proc near               ; CODE XREF: sub_10010F70+28p
                push    0Ch             ; size_t
                call    crt_malloc    ; operator new(uint)
                add     esp, 4
                test    eax, eax
                jz      short loc_10012840
                mov     [eax], eax

loc_10012840:                           ; CODE XREF: sub_10012830+Cj
                lea     ecx, [eax+4]
                test    ecx, ecx
                jz      short locret_10012849
                mov     [ecx], eax

locret_10012849:                        ; CODE XREF: sub_10012830+15j
                retn
sub_10012830    endp
sub_10011010    proc near               ; DATA XREF: .rdata:10060364o
                push    esi
                mov     esi, ecx
                cmp     dword ptr [esi+4], 0
                jz      short loc_1001101F

loc_10011019:                           ; CODE XREF: sub_10011010+1Aj
                xor     eax, eax
                pop     esi
                retn    4
; ---------------------------------------------------------------------------

loc_1001101F:                           ; CODE XREF: sub_10011010+7j
                call    ds:curl_easy_init
                test    eax, eax
                mov     [esi+4], eax
                jz      short loc_10011019
                push    edi
                mov     edi, ds:curl_easy_setopt
                lea     ecx, [esi+8]
                push    ecx
                push    271Ah
                push    eax
                call    edi ; curl_easy_setopt
                mov     edx, [esi+4]
               push    offset sub_100112A0
                push    4E2Bh
                push    edx
                call    edi ; curl_easy_setopt
                mov     eax, [esi+4]
                push    esi
                push    2711h
                push    eax
                call    edi ; curl_easy_setopt
                mov     ecx, [esi+4]
                push    0
                push    40h
                push    ecx
                call    edi ; curl_easy_setopt
                mov     edx, [esi+4]
                push    0
                push    51h
                push    edx
                call    edi ; curl_easy_setopt
                add     esp, 3Ch
                pop     edi
                mov     eax, 1
                pop     esi
                retn    4
sub_10011010    endp
sub_100112A0    proc near               ; DATA XREF: sub_10011010+32o

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch
arg_C           = dword ptr  10h

                push    esi
                mov     esi, [esp+4+arg_4]
                imul    esi, [esp+4+arg_8]
                test    esi, esi
                jz      short loc_100112C5
                mov     eax, [esp+4+arg_0]
                push    ebx
                mov     ebx, [esp+8+arg_C]
                push    esi
                push    eax
                add     ebx, 108h
                call    sub_100126F0
                pop     ebx

loc_100112C5:                           ; CODE XREF: sub_100112A0+Cj
                mov     eax, esi
                pop     esi
                retn
sub_100112A0    endp
sub_1004BFFB    proc near               ; DATA XREF: sub_100126F0+8o

arg_4           = dword ptr  8

                mov     edx, [esp+arg_4]
                lea     eax, [edx-14h]
                mov     ecx, [edx-18h]
                xor     ecx, eax
                call    f_check_gs_failure
int 3;                
;                mov     eax, offset unk_1006169C
;                jmp     ___CxxFrameHandler3
sub_1004BFFB    endp
sub_100128A0    proc near               ; CODE XREF: sub_100126F0+86p

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                push    0Ch             ; size_t
                call    crt_malloc    ; operator new(uint)
                add     esp, 4
                test    eax, eax
                jz      short loc_100128B4
                mov     ecx, [esp+arg_0]
                mov     [eax], ecx

loc_100128B4:                           ; CODE XREF: sub_100128A0+Cj
                lea     ecx, [eax+4]
                test    ecx, ecx
                jz      short loc_100128C1
                mov     edx, [esp+arg_4]
                mov     [ecx], edx

loc_100128C1:                           ; CODE XREF: sub_100128A0+19j
                lea     ecx, [eax+8]
                test    ecx, ecx
                jz      short locret_100128D0
                mov     edx, [esp+arg_8]
                mov     edx, [edx]
                mov     [ecx], edx

locret_100128D0:                        ; CODE XREF: sub_100128A0+26j
                retn    0Ch
sub_100128A0    endp
sub_1004BFC8    proc near               ; DATA XREF: .text:10004262o
                                        ; sub_100128E0+2o

arg_4           = dword ptr  8

                mov     edx, [esp+arg_4]
                lea     eax, [edx-44h]
                mov     ecx, [edx-48h]
                xor     ecx, eax
                call    f_check_gs_failure
int 3;                
;                mov     eax, offset unk_10061670
 ;               jmp     ___CxxFrameHandler3
sub_1004BFC8    endp

sub_100128E0    proc near               ; CODE XREF: sub_100126F0+8Fp

var_50          = byte ptr -50h
var_4C          = byte ptr -4Ch
var_3C          = dword ptr -3Ch
var_38          = dword ptr -38h
var_34          = dword ptr -34h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    0FFFFFFFFh
                push    offset sub_100128E0
                mov     eax,  fs:0
                push    eax
                sub     esp, 44h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                push    eax
                lea     eax, [esp+54h+var_C]
                mov      fs:0, eax
                mov     eax, [ecx+8]
                mov     edx, 3FFFFFFFh
                sub     edx, eax
                cmp     edx, 1
                jnb     short loc_10012964
                push    10h             ; MaxCount
                push    offset aListTTooLong ; "list<T> too long"
                lea     ecx, [esp+5Ch+var_50]
                mov     [esp+5Ch+var_38], 0Fh
                mov     [esp+5Ch+var_3C], 0
                mov     [esp+5Ch+var_4C], 0
                call    sub_10003DD0
                lea     eax, [esp+54h+var_50]
                push    eax
                lea     ecx, [esp+58h+var_34]
                mov     [esp+58h+var_4], 0
                call    sub_10002590
                push    offset unk_100613B8
                lea     ecx, [esp+58h+var_34]
                push    ecx
                mov     [esp+5Ch+var_34], offset off_1005D210
int 3;                
;                call    __CxxThrowException@8 ; _CxxThrowException(x,x)
; ---------------------------------------------------------------------------

loc_10012964:                           ; CODE XREF: sub_100128E0+30j
                add     eax, 1
                mov     [ecx+8], eax
                mov     ecx, [esp+54h+var_C]
                mov      fs:0, ecx
                pop     ecx
                add     esp, 50h
                retn
sub_100128E0    endp
; int __stdcall sub_10003DD0(void *Src, rsize_t MaxCount)
sub_10003DD0    proc near               ; CODE XREF: sub_100027E0+F8p
                                        ; sub_100027E0+126p ...

Src             = dword ptr  4
Dst_1             = dword ptr  8

                push    ebx
                push    ebp
                push    esi
                mov     esi, ecx
                mov     ecx, [esi+18h]
                cmp     ecx, 10h
                lea     ebx, [esi+4]
                jb      short loc_10003DE4
                mov     eax, [ebx]
                jmp     short loc_10003DE6
; ---------------------------------------------------------------------------

loc_10003DE4:                           ; CODE XREF: sub_10003DD0+Ej
                mov     eax, ebx

loc_10003DE6:                           ; CODE XREF: sub_10003DD0+12j
                mov     ebp, [esp+0Ch+Src]
                cmp     ebp, eax
                jb      short loc_10003E1F
                cmp     ecx, 10h
                jb      short loc_10003DF7
                mov     eax, [ebx]
                jmp     short loc_10003DF9
; ---------------------------------------------------------------------------

loc_10003DF7:                           ; CODE XREF: sub_10003DD0+21j
                mov     eax, ebx

loc_10003DF9:                           ; CODE XREF: sub_10003DD0+25j
                mov     edx, [esi+14h]
                add     edx, eax
                cmp     edx, ebp
                jbe     short loc_10003E1F
                cmp     ecx, 10h
                jb      short loc_10003E09
                mov     ebx, [ebx]

loc_10003E09:                           ; CODE XREF: sub_10003DD0+35j
                mov     eax, [esp+0Ch+Dst_1]
                push    eax
                sub     ebp, ebx
                push    ebp
                push    esi
                mov     ecx, esi
                call    sub_10003BD0
                pop     esi
                pop     ebp
                pop     ebx
                retn    8
; ---------------------------------------------------------------------------

loc_10003E1F:                           ; CODE XREF: sub_10003DD0+1Cj
                                        ; sub_10003DD0+30j
                push    edi
                mov     edi, [esp+10h+Dst_1]
                cmp     edi, 0FFFFFFFEh
                jbe     short loc_10003E2E
                call    sub_1004AABF
; ---------------------------------------------------------------------------

loc_10003E2E:                           ; CODE XREF: sub_10003DD0+57j
                mov     eax, [esi+18h]
                cmp     eax, edi
                jnb     short loc_10003E51
                mov     ecx, [esi+14h]
                push    ecx             ; MaxCount
                push    edi             ; Dst
                mov     ecx, esi
                call    sub_10004300
                test    edi, edi

loc_10003E43:                           ; CODE XREF: sub_10003DD0+83j
                jbe     short loc_10003E88
                mov     ecx, [esi+18h]
                cmp     ecx, 10h
                jb      short loc_10003E6B
                mov     eax, [ebx]
                jmp     short loc_10003E6D
; ---------------------------------------------------------------------------

loc_10003E51:                           ; CODE XREF: sub_10003DD0+63j
                test    edi, edi
                jnz     short loc_10003E43
                cmp     eax, 10h
                mov     [esi+14h], edi
                jb      short loc_10003E5F
                mov     ebx, [ebx]

loc_10003E5F:                           ; CODE XREF: sub_10003DD0+8Bj
                pop     edi
                mov     eax, esi
                pop     esi
                pop     ebp
                mov     byte ptr [ebx], 0
                pop     ebx
                retn    8
; ---------------------------------------------------------------------------

loc_10003E6B:                           ; CODE XREF: sub_10003DD0+7Bj
                mov     eax, ebx

loc_10003E6D:                           ; CODE XREF: sub_10003DD0+7Fj
                push    edi             ; MaxCount
                push    ebp             ; Src
                push    ecx             ; DstSize
                push    eax             ; Dst
                call    _memcpy_s
                add     esp, 10h
                cmp     dword ptr [esi+18h], 10h
                mov     [esi+14h], edi
                jb      short loc_10003E84
                mov     ebx, [ebx]

loc_10003E84:                           ; CODE XREF: sub_10003DD0+B0j
                mov     byte ptr [ebx+edi], 0

loc_10003E88:                           ; CODE XREF: sub_10003DD0:loc_10003E43j
                pop     edi
                mov     eax, esi
                pop     esi
                pop     ebp
                pop     ebx
                retn    8
sub_10003DD0    endp
; void __cdecl j__free(void *)
j__free         proc near               ; CODE XREF: sub_10002550+16p
                                        ; sub_10002610+13p ...
                jmp     crt_free
j__free         endp

sub_10002590    proc near               ; CODE XREF: .text:100042B9p
                                        ; sub_100128E0+68p ...

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  4

                push    0FFFFFFFFh
                push    offset sub_1004BEEF
                mov     eax,  fs:0
                push    eax
                push    ecx
                push    esi
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                push    eax
                lea     eax, [esp+18h+var_C]
                mov      fs:0, eax
                mov     esi, ecx
                mov     [esp+18h+var_10], esi
                call    sub_10037F81
                xor     eax, eax
                mov     [esp+18h+var_4], eax
                lea     ecx, [esi+0Ch]
                mov     dword ptr [esi], offset off_1005D204
                push    0FFFFFFFFh
                mov     [ecx+14h], eax
                mov     dword ptr [ecx+18h], 0Fh
                push    eax
                mov     [ecx+4], al
                mov     eax, [esp+20h+arg_0]
                push    eax
                call    sub_10003BD0
                mov     eax, esi
                mov     ecx, [esp+18h+var_C]
                mov      fs:0, ecx
                pop     ecx
                pop     esi
                add     esp, 10h
                retn    4
sub_10002590    endp

sub_100126F0    proc near               ; CODE XREF: sub_100112A0+1Fp

var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8
arg_4           = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                and     esp, 0FFFFFFF8h
                push    0FFFFFFFFh
                push    offset sub_1004BFFB
                mov     eax,  fs:0
                push    eax
                sub     esp, 0Ch
                push    esi
                push    edi
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                push    eax
                lea     eax, [esp+24h+var_C]
                mov      fs:0, eax
                push    8               ; size_t
                call    crt_malloc    ; operator new(uint)
                mov     esi, eax
                add     esp, 4
                mov     [esp+24h+var_14], esi
                test    esi, esi
                mov     edi, [ebp+arg_4]
                mov     [esp+24h+var_4], 0
                jz      short loc_1001274A
                push    edi             ; unsigned int
                call    j_??2@YAPAXI@Z  ; operator new(uint)
                add     esp, 4
                mov     [esi+4], eax
                mov     [esi], edi
                jmp     short loc_1001274C
; ---------------------------------------------------------------------------

loc_1001274A:                           ; CODE XREF: sub_100126F0+48j
                xor     esi, esi

loc_1001274C:                           ; CODE XREF: sub_100126F0+58j
                mov     eax, [ebp+arg_0]
                mov     [esp+24h+var_4], 0FFFFFFFFh
                mov     ecx, [esi+4]
                push    edi
                push    eax
                push    ecx
                mov     [esp+30h+var_14], esi
                call    crt_memcpy          ; Microsoft VisualC 2-9/net runtime
                mov     esi, [ebx+4]
                mov     eax, [esi+4]
                add     esp, 0Ch
                lea     edx, [esp+24h+var_14]
                push    edx
                push    eax
                push    esi
                call    sub_100128A0
                mov     ecx, ebx
                mov     edi, eax
                call    sub_100128E0
                mov     edx, [ebp+arg_4]
                mov     [esi+4], edi
                mov     ecx, [edi+4]
                mov     [ecx], edi
                add     [ebx+0Ch], edx
                mov     eax, 1
                mov     ecx, [esp+24h+var_C]
                mov      fs:0, ecx
                pop     ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    8
sub_100126F0    endp
sub_100110B0    proc near               ; DATA XREF: .rdata:1006036Co

arg_0           = dword ptr  4

                mov     eax, [ecx+4]
                test    eax, eax
                jnz     short loc_100110BA
                retn    4
; ---------------------------------------------------------------------------

loc_100110BA:                           ; CODE XREF: sub_100110B0+5j
                mov     ecx, [esp+arg_0]
                push    ecx
                push    2712h
                push    eax
                call    ds:curl_easy_setopt
                add     esp, 0Ch
                neg     eax
                sbb     eax, eax
                add     eax, 1
                retn    4
sub_100110B0    endp
sub_100110E0    proc near               ; DATA XREF: .rdata:10060374o

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                push    esi
                mov     esi, ecx
                mov     eax, [esi+4]
                test    eax, eax
                jnz     short loc_100110EE
                pop     esi
                retn    8
; ---------------------------------------------------------------------------

loc_100110EE:                           ; CODE XREF: sub_100110E0+8j
                mov     ecx, [esp+4+arg_0]
                push    edi
                mov     edi, ds:curl_easy_setopt
                push    ecx
                push    271Fh
                push    eax
                call    edi ; curl_easy_setopt
                mov     edx, [esp+14h+arg_4]
                mov     eax, [esi+4]
                push    edx
                push    3Ch
                push    eax
                call    edi ; curl_easy_setopt
                add     esp, 18h
                pop     edi
                mov     eax, 1
                pop     esi
                retn    8
sub_100110E0    endp
sub_10011150    proc near               ; DATA XREF: .rdata:10060378o

var_4           = dword ptr -4

                push    ecx
                push    edi
                mov     edi, ecx
                cmp     dword ptr [edi+4], 0
                jz      short loc_100111BC
                push    esi
                lea     esi, [edi+108h]
                call    sub_10012670
                mov     eax, [edi+4]
                push    eax
                call    ds:curl_easy_perform
                add     esp, 4
                test    eax, eax
                pop     esi
                jnz     short loc_100111BC
                mov     edx, [edi+4]
                lea     ecx, [esp+8+var_4]
                push    ecx
                push    200002h
                push    edx
                mov     [esp+14h+var_4], eax
                call    ds:curl_easy_getinfo
                add     esp, 0Ch
                test    eax, eax
                mov     eax, [esp+8+var_4]
                jnz     short loc_100111AA
                cmp     eax, 0C8h
                jnz     short loc_100111AA
                mov     eax, 1
                pop     edi
                pop     ecx
                retn
; ---------------------------------------------------------------------------

loc_100111AA:                           ; CODE XREF: sub_10011150+49j
                                        ; sub_10011150+50j
                push    eax
                push    offset aD       ; "%d"
                add     edi, 8
                push    edi             ; char *
                call    crt_sprintf
                add     esp, 0Ch

loc_100111BC:                           ; CODE XREF: sub_10011150+8j
                                        ; sub_10011150+26j
                xor     eax, eax
                pop     edi
                pop     ecx
                retn
sub_10011150    endp
sub_10012670    proc near               ; CODE XREF: sub_10010FD0+1Dp
                                        ; sub_10011150+11p
                push    ebp
                mov     ebp, esp
                and     esp, 0FFFFFFF8h
                mov     eax, [esi+4]
                push    ebx
                push    edi
                mov     edi, [eax]
                lea     ecx, [ecx+0]

loc_10012680:                           ; CODE XREF: sub_10012670+41j
                cmp     edi, [esi+4]
                jz      short loc_100126B3
                mov     ebx, [edi+8]
                test    ebx, ebx
                jz      short loc_100126A5
                mov     eax, [ebx+4]
                test    eax, eax
                jz      short loc_1001269C
                push    eax             ; void *
                call    j_j__free
                add     esp, 4

loc_1001269C:                           ; CODE XREF: sub_10012670+21j
                push    ebx             ; void *
                call    j__free
                add     esp, 4

loc_100126A5:                           ; CODE XREF: sub_10012670+1Aj
                cmp     edi, [esi+4]
                jnz     short loc_100126AF
                call    __invalid_parameter_noinfo

loc_100126AF:                           ; CODE XREF: sub_10012670+38j
                mov     edi, [edi]
                jmp     short loc_10012680
; ---------------------------------------------------------------------------

loc_100126B3:                           ; CODE XREF: sub_10012670+13j
                mov     ecx, [esi+4]
                mov     eax, [ecx]
                mov     [ecx], ecx
                mov     ecx, [esi+4]
                mov     [ecx+4], ecx
                xor     ebx, ebx
                cmp     eax, [esi+4]
                mov     [esi+8], ebx
                jz      short loc_100126E2
                lea     ebx, [ebx+0]

loc_100126D0:                           ; CODE XREF: sub_10012670+70j
                mov     edi, [eax]
                push    eax             ; void *
                call    j__free
                add     esp, 4
                cmp     edi, [esi+4]
                mov     eax, edi
                jnz     short loc_100126D0

loc_100126E2:                           ; CODE XREF: sub_10012670+58j
                pop     edi
                mov     [esi+0Ch], ebx
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn
sub_10012670    endp
; void __cdecl j_j__free(void *)
j_j__free       proc near               ; CODE XREF: sub_10012670+24p
                jmp     j__free
j_j__free       endp


sub_100111D0    proc near               ; DATA XREF: .rdata:1006037Co

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                cmp     dword ptr [ecx+4], 0
                push    ebx
                jz      short loc_1001121C
                mov     ebx, [esp+4+arg_4]
                test    ebx, ebx
                jz      short loc_1001121C
                mov     eax, [ebx]
                test    eax, eax
                push    esi
                mov     esi, [ecx+114h]
                jz      short loc_10011213
                cmp     eax, esi
                jb      short loc_10011213
                mov     edx, [esp+8+arg_0]
                test    edx, edx
                jz      short loc_10011215
                push    edi
                lea     edi, [ecx+108h]
                mov     ecx, edx
                call    sub_100127B0
                pop     edi
                mov     [ebx], esi
                pop     esi
                mov     eax, 1
                pop     ebx
                retn    8
; ---------------------------------------------------------------------------

loc_10011213:                           ; CODE XREF: sub_100111D0+1Aj
                                        ; sub_100111D0+1Ej
                mov     [ebx], esi

loc_10011215:                           ; CODE XREF: sub_100111D0+26j
                pop     esi
                xor     eax, eax
                pop     ebx
                retn    8
; ---------------------------------------------------------------------------

loc_1001121C:                           ; CODE XREF: sub_100111D0+5j
                                        ; sub_100111D0+Dj
                xor     eax, eax
                pop     ebx
                retn    8
sub_100111D0    endp

sub_100127B0    proc near               ; CODE XREF: sub_100111D0+31p

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                and     esp, 0FFFFFFF8h
                sub     esp, 8
                push    ebx
                mov     ebx, ecx
                test    ebx, ebx
                push    esi
                jz      short loc_10012827
                cmp     eax, [edi+0Ch]
                jb      short loc_10012827
                mov     ecx, [edi+4]
                mov     esi, [ecx]
                jmp     short loc_100127D0
; ---------------------------------------------------------------------------
                align 10h

loc_100127D0:                           ; CODE XREF: sub_100127B0+1Bj
                                        ; sub_100127B0+6Aj
                mov     eax, [edi+4]
                cmp     esi, eax
                jz      short loc_1001281C
                cmp     esi, [edi+4]
                mov     edx, [esi+8]
                mov     eax, [edx]
                mov     [esp+10h+var_4], eax
                jnz     short loc_100127EA
                call    __invalid_parameter_noinfo

loc_100127EA:                           ; CODE XREF: sub_100127B0+33j
                mov     ecx, [esp+10h+var_4]
                mov     edx, [esi+8]
                mov     eax, [edx+4]
                push    ecx
                push    eax
                push    ebx
                call    crt_memcpy          ; Microsoft VisualC 2-9/net runtime
                add     esp, 0Ch
                cmp     esi, [edi+4]
                jnz     short loc_10012809
                call    __invalid_parameter_noinfo

loc_10012809:                           ; CODE XREF: sub_100127B0+52j
                mov     ecx, [esi+8]
                add     ebx, [ecx]
                cmp     esi, [edi+4]
                jnz     short loc_10012818
                call    __invalid_parameter_noinfo

loc_10012818:                           ; CODE XREF: sub_100127B0+61j
                mov     esi, [esi]
                jmp     short loc_100127D0
; ---------------------------------------------------------------------------

loc_1001281C:                           ; CODE XREF: sub_100127B0+25j
                mov     eax, 1
                pop     esi
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_10012827:                           ; CODE XREF: sub_100127B0+Fj
                                        ; sub_100127B0+14j
                pop     esi
                xor     eax, eax
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn
sub_100127B0    endp

sub_10011080    proc near               ; DATA XREF: .rdata:10060368o
                push    esi
                mov     esi, ecx
                mov     eax, [esi+4]
                test    eax, eax
                jnz     short loc_1001108C
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_1001108C:                           ; CODE XREF: sub_10011080+8j
                push    eax
                call    ds:curl_easy_cleanup
                add     esp, 4
                mov     dword ptr [esi+4], 0
                mov     eax, 1
                pop     esi
                retn
sub_10011080    endp


; int __fastcall sub_10010FD0(void *)
sub_10010FD0    proc near               ; DATA XREF: .rdata:??_7CHttpSession@@6B@o
                push    esi
                push    edi
                mov     edi, ecx
                cmp     dword ptr [edi+4], 0
                jz      short loc_10010FE1
                mov     eax, [edi]
                mov     edx, [eax+8]
                call    edx

loc_10010FE1:                           ; CODE XREF: sub_10010FD0+8j
                lea     esi, [edi+108h]
                mov     dword ptr [edi], offset ??_7CHttpSession@@6B@
                call    sub_10012670
                call    sub_10012850
                push    edi             ; void *
                call    j__free
                add     esp, 4
                pop     edi
                pop     esi
                retn
sub_10010FD0    endp
sub_10012850    proc near               ; CODE XREF: sub_10010FD0+22p
                mov     ecx, [esi+4]
                mov     eax, [ecx]
                mov     [ecx], ecx
                mov     ecx, [esi+4]
                mov     [ecx+4], ecx
                cmp     eax, [esi+4]
                mov     dword ptr [esi+8], 0
                jz      short loc_10012883
                push    edi
                lea     ebx, [ebx+0]

loc_10012870:                           ; CODE XREF: sub_10012850+30j
                mov     edi, [eax]
                push    eax             ; void *
                call    j__free
                add     esp, 4
                cmp     edi, [esi+4]
                mov     eax, edi
                jnz     short loc_10012870
                pop     edi

loc_10012883:                           ; CODE XREF: sub_10012850+17j
                mov     eax, [esi+4]
                push    eax             ; void *
                call    j__free
                add     esp, 4
                mov     dword ptr [esi+4], 0
                retn
sub_10012850    endp
sub_1000E8E0    proc near               ; CODE XREF: sub_10004AA0+61p

FileName        = byte ptr -14h
var_13          = byte ptr -13h
var_12          = byte ptr -12h
var_11          = byte ptr -11h
var_10          = byte ptr -10h
var_F           = byte ptr -0Fh
var_E           = byte ptr -0Eh
RootPathName    = byte ptr -0Ch
var_B           = byte ptr -0Bh
var_A           = byte ptr -0Ah
var_9           = byte ptr -9
var_4           = dword ptr -4

                sub     esp, 14h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+14h+var_4], eax
                mov     eax, [esi]
                test    eax, eax
                push    ebx
                push    edi
                mov     edi, ecx
                jz      short loc_1000E911
                push    eax             ; hObject
                call    ds:CloseHandle
                mov     dword ptr [esi], 0
                mov     byte ptr [esi+4], 0
                mov     byte ptr [esi+5], 0
                mov     byte ptr [esi+6], 0

loc_1000E911:                           ; CODE XREF: sub_1000E8E0+16j
                mov     bl, [edi]
                lea     eax, [esp+1Ch+RootPathName]
                push    eax             ; lpRootPathName
                mov     [esp+20h+RootPathName], bl
                mov     [esp+20h+var_B], 3Ah
                mov     [esp+20h+var_A], 5Ch
                mov     [esp+20h+var_9], 0
                call    ds:GetDriveTypeA
                cmp     eax, 5
                jz      short loc_1000E94C
                pop     edi
                mov     eax, 0FFFFFFFEh
                pop     ebx
                mov     ecx, [esp+14h+var_4]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 14h
                retn
; ---------------------------------------------------------------------------

loc_1000E94C:                           ; CODE XREF: sub_1000E8E0+54j
                mov     edi, ds:CreateFileA
                push    0               ; hTemplateFile
                push    80h             ; dwFlagsAndAttributes
                push    3               ; dwCreationDisposition
                push    0               ; lpSecurityAttributes
                push    3               ; dwShareMode
                push    0C0000000h      ; dwDesiredAccess
                lea     ecx, [esp+34h+FileName]
                push    ecx             ; lpFileName
                mov     [esp+38h+FileName], 5Ch
                mov     [esp+38h+var_13], 5Ch
                mov     [esp+38h+var_12], 2Eh
                mov     [esp+38h+var_11], 5Ch
                mov     [esp+38h+var_10], bl
                mov     [esp+38h+var_F], 3Ah
                mov     [esp+38h+var_E], 0
                call    edi ; CreateFileA
                cmp     eax, 0FFFFFFFFh
                jnz     short loc_1000E9C3
                push    0               ; hTemplateFile
                push    80h             ; dwFlagsAndAttributes
                push    3               ; dwCreationDisposition
                push    0               ; lpSecurityAttributes
                push    3               ; dwShareMode
                push    80000000h       ; dwDesiredAccess
                lea     edx, [esp+34h+FileName]
                push    edx             ; lpFileName
                call    edi ; CreateFileA
                cmp     eax, 0FFFFFFFFh
                jnz     short loc_1000E9C3
                pop     edi
                or      eax, eax
                pop     ebx
                mov     ecx, [esp+14h+var_4]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 14h
                retn
; ---------------------------------------------------------------------------

loc_1000E9C3:                           ; CODE XREF: sub_1000E8E0+B0j
                                        ; sub_1000E8E0+CEj
                mov     ecx, [esp+1Ch+var_4]
                pop     edi
                pop     ebx
                mov     [esi], eax
                xor     ecx, esp
                xor     eax, eax
                call    f_check_gs_failure
                add     esp, 14h
                retn
sub_1000E8E0    endp
sub_1000F490    proc near               ; CODE XREF: sub_10004AA0+85p

var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                sub     esp, 34h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+34h+var_4], eax
                mov     eax, [esp+34h+arg_4]
                push    ebx
                mov     [esp+38h+var_28], eax
                mov     eax, [esp+38h+arg_8]
                push    ebp
                mov     ebp, [esp+3Ch+arg_0]
                push    edi
                mov     edi, [esi]
                mov     [esp+40h+var_30], eax
                xor     eax, eax
                mov     [esp+40h+var_14], eax
                mov     [esp+40h+var_2C], ecx
                mov     [esp+40h+var_34], edx
                mov     [esp+40h+var_10], eax
                mov     [esp+40h+var_C], eax
                push    10h
                xor     ebx, ebx
                lea     edx, [esp+44h+var_24]
                lea     ecx, [esp+44h+var_14]
                mov     [esp+44h+var_8], eax
                mov     [esp+44h+var_24], eax
                mov     [esp+44h+var_20], eax
                mov     [esp+44h+var_1C], eax
                mov     [esp+44h+var_18], eax
                mov     byte ptr [esp+44h+var_14], 46h
                mov     byte ptr [esp+44h+var_14+1], 2
                mov     byte ptr [esp+44h+var_14+2], 1
                mov     byte ptr [esp+44h+var_14+3], 0Dh
                mov     byte ptr [esp+44h+var_10+3], al
                mov     byte ptr [esp+44h+var_C], 10h
                call    sub_1000E9E0
                test    eax, eax
                jnz     loc_1000F5CA
                mov     ecx, [esp+40h+var_24]
                xor     edx, edx
                mov     dh, cl
                movzx   ecx, ch
                or      edx, ecx
                movzx   ecx, byte ptr [esp+40h+var_24+2]
                shl     edx, 8
                or      edx, ecx
                movzx   ecx, byte ptr [esp+40h+var_24+3]
                shl     edx, 8
                or      edx, ecx
                cmp     edx, 0Ch
                jb      short loc_1000F59B
                test    ebp, ebp
                jz      short loc_1000F548
                mov     dl, byte ptr [esp+40h+var_18+3]
                mov     [ebp+0], dl

loc_1000F548:                           ; CODE XREF: sub_1000F490+AFj
                mov     ecx, [esp+40h+var_28]
                test    ecx, ecx
                jz      short loc_1000F559
                mov     dl, byte ptr [esp+40h+var_18+2]
                and     dl, 0Fh
                mov     [ecx], dl

loc_1000F559:                           ; CODE XREF: sub_1000F490+BEj
                mov     ecx, [esp+40h+var_2C]
                test    ecx, ecx
                mov     edx, [esp+40h+var_18]
                jz      short loc_1000F56C
                mov     bl, dl
                and     bl, 1
                mov     [ecx], bl

loc_1000F56C:                           ; CODE XREF: sub_1000F490+D3j
                mov     ecx, [esp+40h+var_34]
                test    ecx, ecx
                jz      short loc_1000F576
                mov     [ecx], dh

loc_1000F576:                           ; CODE XREF: sub_1000F490+E2j
                mov     ecx, [esp+40h+var_30]
                test    ecx, ecx
                jz      short loc_1000F5CA
                mov     dl, byte ptr [esp+40h+var_1C+2]
                and     dl, 1
                mov     [ecx], dl
                pop     edi
                pop     ebp
                pop     ebx
                mov     ecx, [esp+34h+var_4]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 34h
                retn    0Ch
; ---------------------------------------------------------------------------

loc_1000F59B:                           ; CODE XREF: sub_1000F490+ABj
                test    ebp, ebp
                jz      short loc_1000F5A2
                mov     [ebp+0], bl

loc_1000F5A2:                           ; CODE XREF: sub_1000F490+10Dj
                mov     ecx, [esp+40h+var_28]
                test    ecx, ecx
                jz      short loc_1000F5AC
                mov     [ecx], bl

loc_1000F5AC:                           ; CODE XREF: sub_1000F490+118j
                mov     ecx, [esp+40h+var_2C]
                test    ecx, ecx
                jz      short loc_1000F5B6
                mov     [ecx], bl

loc_1000F5B6:                           ; CODE XREF: sub_1000F490+122j
                mov     ecx, [esp+40h+var_34]
                test    ecx, ecx
                jz      short loc_1000F5C0
                mov     [ecx], bl

loc_1000F5C0:                           ; CODE XREF: sub_1000F490+12Cj
                mov     ecx, [esp+40h+var_30]
                test    ecx, ecx
                jz      short loc_1000F5CA
                mov     [ecx], bl

loc_1000F5CA:                           ; CODE XREF: sub_1000F490+81j
                                        ; sub_1000F490+ECj ...
                mov     ecx, [esp+40h+var_4]
                pop     edi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 34h
                retn    0Ch
sub_1000F490    endp
sub_1000E9E0    proc near               ; CODE XREF: sub_1000F3D0+4Cp
                                        ; sub_1000F490+7Ap ...

BytesReturned   = dword ptr -4Ch
InBuffer        = word ptr -48h
var_46          = byte ptr -46h
var_45          = byte ptr -45h
var_44          = byte ptr -44h
var_43          = byte ptr -43h
var_42          = byte ptr -42h
var_41          = byte ptr -41h
var_40          = byte ptr -40h
var_3C          = dword ptr -3Ch
var_38          = dword ptr -38h
var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = word ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  4

                sub     esp, 50h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+50h+var_4], eax
                push    ebp
                mov     ebp, [esp+54h+arg_0]
                push    esi
                mov     esi, edx
                mov     edx, [edi]
                xor     eax, eax
                cmp     edx, eax
                jnz     short loc_1000EA16
                mov     eax, 0FFFFFFFCh
                pop     esi
                pop     ebp
                mov     ecx, [esp+50h+var_4]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 50h
                retn    4
; ---------------------------------------------------------------------------

loc_1000EA16:                           ; CODE XREF: sub_1000E9E0+1Cj
                cmp     esi, eax
                mov     [esp+58h+InBuffer], 2Ch
                mov     [esp+58h+var_45], al
                mov     [esp+58h+var_44], al
                mov     [esp+58h+var_43], al
                mov     [esp+58h+var_42], 0Ch
                mov     [esp+58h+var_41], 12h
                jz      short loc_1000EA5C
                cmp     ebx, eax
                jbe     short loc_1000EA49
                mov     [esp+58h+var_40], al
                mov     [esp+58h+var_3C], ebx
                mov     [esp+58h+var_34], esi
                jmp     short loc_1000EA69
; ---------------------------------------------------------------------------

loc_1000EA49:                           ; CODE XREF: sub_1000E9E0+59j
                cmp     ebp, eax
                jbe     short loc_1000EA5C
                mov     [esp+58h+var_40], 1
                mov     [esp+58h+var_3C], ebp
                mov     [esp+58h+var_34], esi
                jmp     short loc_1000EA69
; ---------------------------------------------------------------------------

loc_1000EA5C:                           ; CODE XREF: sub_1000E9E0+55j
                                        ; sub_1000E9E0+6Bj
                mov     [esp+58h+var_34], eax
                mov     [esp+58h+var_3C], eax
                mov     [esp+58h+var_40], 2

loc_1000EA69:                           ; CODE XREF: sub_1000E9E0+67j
                                        ; sub_1000E9E0+7Aj
                mov     esi, [ecx]
                push    eax             ; lpOverlapped
                mov     [esp+5Ch+var_2C], esi
                mov     esi, [ecx+4]
                mov     [esp+5Ch+var_1C], eax
                mov     [esp+5Ch+var_18], eax
                mov     [esp+5Ch+var_14], eax
                mov     [esp+5Ch+var_10], eax
                mov     [esp+5Ch+var_C], ax
                mov     [esp+5Ch+var_28], esi
                mov     esi, [ecx+8]
                mov     ecx, [ecx+0Ch]
                lea     eax, [esp+5Ch+BytesReturned]
                push    eax             ; lpBytesReturned
                push    40h             ; nOutBufferSize
                mov     [esp+64h+var_20], ecx
                lea     ecx, [esp+64h+InBuffer]
                push    ecx             ; lpOutBuffer
                push    40h             ; nInBufferSize
                mov     eax, ecx
                push    eax             ; lpInBuffer
                push    4D014h          ; dwIoControlCode
                push    edx             ; hDevice
                mov     [esp+78h+var_38], 5
                mov     [esp+78h+var_30], 2Ch
                mov     [esp+78h+var_24], esi
                call    ds:DeviceIoControl
                test    eax, eax
                jz      short loc_1000EB03
                movzx   eax, byte ptr [esp+58h+var_10+1]
                mov     cl, byte ptr [esp+58h+var_1C+2]
                mov     dl, byte ptr [esp+58h+var_10]
                mov     [edi+6], al
                movzx   eax, [esp+58h+var_46]
                and     cl, 0Fh
                neg     al
                mov     [edi+4], cl
                mov     [edi+5], dl
                sbb     eax, eax
                and     eax, 0FFFFFFFEh
                pop     esi
                pop     ebp
                mov     ecx, [esp+50h+var_4]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 50h
                retn    4
; ---------------------------------------------------------------------------

loc_1000EB03:                           ; CODE XREF: sub_1000E9E0+E9j
                mov     ecx, [esp+58h+var_4]
                pop     esi
                pop     ebp
                xor     ecx, esp
                or      eax, 0FFFFFFFFh
                call    f_check_gs_failure
                add     esp, 50h
                retn    4
sub_1000E9E0    endp
sub_10010630    proc near               ; CODE XREF: sub_10004AA0+AAp

var_29D         = byte ptr -29Dh
var_29C         = word ptr -29Ch
var_298         = dword ptr -298h
var_294         = dword ptr -294h
var_290         = dword ptr -290h
var_28C         = dword ptr -28Ch
var_288         = dword ptr -288h
var_284         = dword ptr -284h
var_280         = dword ptr -280h
var_27C         = dword ptr -27Ch
var_278         = dword ptr -278h
var_274         = dword ptr -274h
var_270         = dword ptr -270h
var_26C         = dword ptr -26Ch
var_268         = dword ptr -268h
var_264         = byte ptr -264h
var_263         = byte ptr -263h
var_262         = byte ptr -262h
var_261         = byte ptr -261h
var_260         = byte ptr -260h
var_250         = byte ptr -250h
var_240         = byte ptr -240h
var_230         = byte ptr -230h
var_21C         = byte ptr -21Ch
var_1F4         = byte ptr -1F4h
var_1CC         = byte ptr -1CCh
var_1A4         = byte ptr -1A4h
var_1A0         = byte ptr -1A0h
var_178         = byte ptr -178h
var_14C         = byte ptr -14Ch
var_14B         = byte ptr -14Bh
var_CC          = byte ptr -0CCh
var_6C          = byte ptr -6Ch
var_8           = dword ptr -8
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                sub     esp, 2A4h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+2A4h+var_8], eax
                mov     eax, [esp+2A4h+arg_4]
                push    ebx
                push    ebp
                mov     ebp, [esp+2ACh+arg_0]
                push    esi
                push    edi
                mov     ebx, ecx
                push    7Fh             ; size_t
                xor     edi, edi
                lea     ecx, [esp+2B8h+var_14B]
                push    edi             ; int
                push    ecx             ; void *
                mov     [esp+2C0h+var_294], ebx
                mov     [esp+2C0h+var_288], eax
                mov     [esp+2C0h+var_29D], 0
                mov     [esp+2C0h+var_14C], 0
                call    crt_memset
                add     esp, 0Ch
                push    2
                push    edi
                push    edi
                push    edi
                lea     esi, [esp+2C4h+var_29C]
                mov     cl, 3Fh
                mov     edx, ebp
                mov     [esp+2C4h+var_29C], di
                call    sub_1000FB70
                push    2
                push    edi
                push    edi
                push    1
                lea     esi, [esp+2C4h+var_29C]
                mov     cl, 3Fh
                mov     edx, ebp
                mov     [esp+2C4h+var_29C], di
                call    sub_1000FB70
                push    2
                push    edi
                push    edi
                push    2
                lea     esi, [esp+2C4h+var_29C]
                mov     cl, 3Fh
                mov     edx, ebp
                mov     [esp+2C4h+var_29C], di
                call    sub_1000FB70
                push    2
                push    edi
                push    edi
                push    3
                lea     esi, [esp+2C4h+var_29C]
                mov     cl, 3Fh
                mov     edx, ebp
                mov     [esp+2C4h+var_29C], di
                call    sub_1000FB70
                lea     esi, [esp+2B4h+var_14C]
                mov     ecx, ebp
                call    sub_1000F3D0
                cmp     eax, edi
                jl      loc_10010C20
                cmp     byte ptr [ebx+1], 0
                jz      short loc_1001071C
                cmp     byte ptr [ebx], 0
                mov     eax, [esp+2B4h+var_288]
                jz      short loc_10010712
                cmp     byte ptr [eax+2], 1
                jnb     short loc_1001071C
                mov     byte ptr [eax+2], 1
                jmp     short loc_1001071C
; ---------------------------------------------------------------------------

loc_10010712:                           ; CODE XREF: sub_10010630+D4j
                cmp     byte ptr [eax+2], 4
                jnb     short loc_1001071C
                mov     byte ptr [eax+2], 4

loc_1001071C:                           ; CODE XREF: sub_10010630+CBj
                                        ; sub_10010630+DAj ...
                mov     edi, offset aMc08100306 ; "MC0810/03/06"
                lea     esi, [esp+2B4h+var_14C]
                mov     ecx, 0Dh
                xor     edx, edx
                repe cmpsb
                jz      short loc_1001074A
                mov     edi, offset aTs06022607 ; "TS0602/26/07"
                lea     esi, [esp+2B4h+var_14C]
                mov     ecx, 0Dh
                xor     eax, eax
                repe cmpsb
                jnz     short loc_10010769

loc_1001074A:                           ; CODE XREF: sub_10010630+101j
                cmp     [ebx+1], dl
                jnz     short loc_10010769
                lea     ecx, [esp+2B4h+var_260]
                push    ecx
                lea     edx, [ebx+14h]
                push    edx
                mov     ecx, ebp
                call    sub_1000F870
                mov     edi, eax
                test    edi, edi
                jge     loc_10010C1E

loc_10010769:                           ; CODE XREF: sub_10010630+118j
                                        ; sub_10010630+11Dj
                xor     eax, eax
                push    8
                push    eax
                push    eax
                push    eax
                lea     esi, [esp+2C4h+var_284]
                xor     cl, cl
                mov     edx, ebp
                mov     [esp+2C4h+var_284], eax
                mov     [esp+2C4h+var_280], eax
                call    sub_1000FB70
                test    eax, eax
                jnz     short loc_10010796
                mov     cl, byte ptr [esp+2B4h+var_280+3]
                shr     cl, 6
                mov     byte ptr [esp+2B4h+var_298], cl
                jmp     short loc_1001079A
; ---------------------------------------------------------------------------

loc_10010796:                           ; CODE XREF: sub_10010630+157j
                mov     cl, byte ptr [esp+2B4h+var_298]

loc_1001079A:                           ; CODE XREF: sub_10010630+164j
                test    eax, eax
                jl      loc_10010C20
                cmp     byte ptr [ebx+1], 0
                jnz     short loc_100107BE
                lea     edx, [esp+2B4h+var_260]
                lea     eax, [ebx+14h]
                push    edx
                push    eax
                mov     esi, ebp
                mov     [esp+2BCh+var_290], eax
                call    sub_1000F790
                jmp     short loc_100107E9
; ---------------------------------------------------------------------------

loc_100107BE:                           ; CODE XREF: sub_10010630+176j
                mov     eax, [esp+2B4h+var_288]
                movzx   ecx, byte ptr [eax+2]
                mov     edx, [esp+2B4h+var_298]
                mov     eax, [esp+2B4h+var_294]
                push    ecx
                mov     ecx, [eax+4]
                lea     edi, [ebx+14h]
                push    edx
                lea     ebx, [esp+2BCh+var_260]
                mov     edx, ebp
                mov     [esp+2BCh+var_290], edi
                call    sub_1000FAD0
                mov     ebx, [esp+2B4h+var_294]

loc_100107E9:                           ; CODE XREF: sub_10010630+18Cj
                mov     edi, eax
                test    edi, edi
                jl      short loc_100107F4
                mov     [esp+2B4h+var_29D], 1

loc_100107F4:                           ; CODE XREF: sub_10010630+1BDj
                mov     ecx, [esp+2B4h+var_298]
                push    2
                push    0
                push    0
                push    ecx
                lea     esi, [esp+2C4h+var_29C]
                mov     cl, 3Fh
                mov     edx, ebp
                mov     [esp+2C4h+var_29C], 0
                call    sub_1000FB70
                cmp     [esp+2B4h+var_29D], 0
                jnz     loc_10010C1E
                mov     eax, [ebx+8]
                test    eax, eax
                jz      loc_10010C1B
                cmp     dword ptr [ebx+0Ch], 0
                jz      loc_10010C1B
                cmp     dword ptr [ebx+10h], 0
                jz      loc_10010C1B
                call    eax
                mov     [esp+2B4h+var_284], eax
                mov     [esp+2B4h+var_28C], 0

loc_1001084B:                           ; CODE XREF: sub_10010630+426j
                mov     edx, [esp+2B4h+var_284]
                cmp     [esp+2B4h+var_28C], edx
                jge     loc_10010A5E
                xor     eax, eax
                push    8
                push    eax
                push    eax
                push    eax
                lea     esi, [esp+2C4h+var_27C]
                xor     cl, cl
                mov     edx, ebp
                mov     [esp+2C4h+var_27C], eax
                mov     [esp+2C4h+var_278], eax
                call    sub_1000FB70
                test    eax, eax
                jnz     short loc_10010884
                mov     cl, byte ptr [esp+2B4h+var_278+3]
                shr     cl, 6
                mov     byte ptr [esp+2B4h+var_298], cl

loc_10010884:                           ; CODE XREF: sub_10010630+247j
                test    eax, eax
                mov     edi, eax
                jl      loc_10010A5E
                mov     ecx, [esp+2B4h+var_28C]
                mov     edx, [ebx+0Ch]
                push    5Ch
                lea     eax, [esp+2B8h+var_CC]
                push    eax
                push    ecx
                call    edx
                mov     edi, eax
                add     esp, 0Ch
                test    edi, edi
                jl      loc_10010A2D
                mov     esi, [esp+2B4h+var_298]
                push    esi
                lea     ecx, [esp+2B8h+var_CC]
                mov     ebx, ebp
                call    sub_1000F5E0
                mov     edi, eax
                test    edi, edi
                jl      loc_10010A29
                push    esi
                push    ebp
                lea     ecx, [esp+2BCh+var_6C]
                lea     ebx, [esp+2BCh+var_230]
                call    sub_1000F6F0
                mov     edi, eax
                test    edi, edi
                jl      loc_10010A29
                push    54h             ; size_t
                lea     eax, [esp+2B8h+var_1A4]
                push    0               ; int
                push    eax             ; void *
                call    crt_memset
                add     esp, 0Ch
                push    54h
                push    0
                push    0
                push    esi
                lea     esi, [esp+2C4h+var_1A4]
                mov     cl, 2
                mov     edx, ebp
                call    sub_1000FB70
                test    eax, eax
                jnz     short loc_10010944
                mov     ecx, 0Ah
                lea     esi, [esp+2B4h+var_1A0]
                lea     edi, [esp+2B4h+var_21C]
                rep movsd
                mov     ecx, 0Ah
                lea     esi, [esp+2B4h+var_178]
                lea     edi, [esp+2B4h+var_1CC]
                rep movsd

loc_10010944:                           ; CODE XREF: sub_10010630+2E8j
                test    eax, eax
                mov     edi, eax
                jl      loc_10010A29
                lea     ecx, [esp+2B4h+var_6C]
                push    ecx
                lea     edx, [esp+2B8h+var_21C]
                lea     ecx, [esp+2B8h+var_1CC]
                call    sub_1000B840
                mov     edi, eax
                add     esp, 4
                test    edi, edi
                jl      loc_10010A29
                mov     ecx, [esp+2B4h+var_28C]
                mov     esi, [esp+2B4h+var_294]
                push    offset byte_100804B8
                lea     edx, [esp+2B8h+var_230]
                push    edx
                mov     edx, [esi+10h]
                lea     eax, [esp+2BCh+var_1F4]
                push    eax
                push    ecx
                call    edx
                mov     edi, eax
                add     esp, 10h
                test    edi, edi
                jl      loc_10010A29
                mov     ecx, [esp+2B4h+var_298]
                lea     eax, [esp+2B4h+var_1F4]
                push    eax
                push    ecx
                mov     ebx, ebp
                call    sub_1000F680
                mov     edi, eax
                test    edi, edi
                jl      short loc_10010A29
                lea     edx, [esp+2B4h+var_240]
                push    edx
                lea     edx, [esp+2B8h+var_21C]
                lea     ecx, [esp+2B8h+var_CC]
                call    sub_1000BB30
                mov     edi, eax
                add     esp, 4
                test    edi, edi
                jl      short loc_10010A29
                cmp     byte ptr [esi+1], 0
                jnz     short loc_100109FE
                mov     ecx, [esp+2B4h+var_290]
                lea     eax, [esp+2B4h+var_260]
                push    eax
                push    ecx
                mov     cl, byte ptr [esp+2BCh+var_298]
                mov     esi, ebp
                call    sub_1000F790
                jmp     short loc_10010A1E
; ---------------------------------------------------------------------------

loc_100109FE:                           ; CODE XREF: sub_10010630+3B5j
                mov     edx, [esp+2B4h+var_288]
                movzx   eax, byte ptr [edx+2]
                mov     ecx, [esp+2B4h+var_298]
                mov     edi, [esp+2B4h+var_290]
                push    eax
                push    ecx
                mov     ecx, [esi+4]
                lea     ebx, [esp+2BCh+var_260]
                mov     edx, ebp
                call    sub_1000FAD0

loc_10010A1E:                           ; CODE XREF: sub_10010630+3CCj
                mov     edi, eax
                test    edi, edi
                jl      short loc_10010A29
                mov     [esp+2B4h+var_29D], 1

loc_10010A29:                           ; CODE XREF: sub_10010630+296j
                                        ; sub_10010630+2B5j ...
                mov     ebx, [esp+2B4h+var_294]

loc_10010A2D:                           ; CODE XREF: sub_10010630+279j
                mov     edx, [esp+2B4h+var_298]
                push    2
                push    0
                push    0
                push    edx
                lea     esi, [esp+2C4h+var_29C]
                mov     cl, 3Fh
                mov     edx, ebp
                mov     [esp+2C4h+var_29C], 0
                call    sub_1000FB70
                add     [esp+2B4h+var_28C], 1
                cmp     [esp+2B4h+var_29D], 0
                jz      loc_1001084B
                jmp     short loc_10010A69
; ---------------------------------------------------------------------------

loc_10010A5E:                           ; CODE XREF: sub_10010630+223j
                                        ; sub_10010630+258j
                cmp     [esp+2B4h+var_29D], 0
                jz      loc_10010C1E

loc_10010A69:                           ; CODE XREF: sub_10010630+42Cj
                cmp     byte ptr [ebx+1], 0
                jnz     loc_10010B2B
                mov     ecx, [esp+2B4h+var_290]
                lea     eax, [esp+2B4h+var_250]
                push    eax
                push    10h
                push    ecx
                lea     ecx, [esp+2C0h+var_240]
                call    calculate_volume_id_mac
                mov     edi, eax
                add     esp, 0Ch
                test    edi, edi
                jl      loc_10010C1E
                mov     eax, 10h
                lea     ecx, [esp+2B4h+var_260]
                lea     edx, [esp+2B4h+var_250]

loc_10010AA5:                           ; CODE XREF: sub_10010630+487j
                mov     esi, [edx]
                cmp     esi, [ecx]
                jnz     short loc_10010AC1
                sub     eax, 4
                add     ecx, 4
                add     edx, 4
                cmp     eax, 4
                jnb     short loc_10010AA5
                test    eax, eax
                jz      loc_10010C15

loc_10010AC1:                           ; CODE XREF: sub_10010630+479j
                movzx   esi, byte ptr [edx]
                movzx   ebx, byte ptr [ecx]
                sub     esi, ebx
                jnz     loc_10010C07
                sub     eax, 1
                add     ecx, 1
                add     edx, 1
                test    eax, eax
                jz      loc_10010C15
                movzx   esi, byte ptr [edx]
                movzx   ebx, byte ptr [ecx]
                sub     esi, ebx
                jnz     loc_10010C07
                sub     eax, 1
                add     ecx, 1
                add     edx, 1
                test    eax, eax
                jz      loc_10010C15
                movzx   esi, byte ptr [edx]
                movzx   ebx, byte ptr [ecx]
                sub     esi, ebx
                jnz     loc_10010C07
                sub     eax, 1
                add     ecx, 1
                add     edx, 1
                test    eax, eax
                jz      loc_10010C15
                movzx   esi, byte ptr [edx]
                movzx   edx, byte ptr [ecx]
                sub     esi, edx
                jmp     loc_10010C05
; ---------------------------------------------------------------------------

loc_10010B2B:                           ; CODE XREF: sub_10010630+43Dj
                mov     eax, [esp+2B4h+var_290]
                mov     ecx, [eax]
                mov     edx, [eax+4]
                mov     [esp+2B4h+var_274], ecx
                mov     ecx, [eax+8]
                mov     [esp+2B4h+var_270], edx
                mov     edx, [eax+0Ch]
                movzx   eax, byte ptr [ebx+7]
                mov     [esp+2B4h+var_26C], ecx
                mov     cl, [ebx+6]
                mov     [esp+2B4h+var_263], cl
                mov     [esp+2B4h+var_268], edx
                mov     dl, [ebx+5]
                lea     ecx, [esp+2B4h+var_250]
                push    ecx
                mov     [esp+2B8h+var_264], al
                movzx   eax, byte ptr [ebx+4]
                mov     [esp+2B8h+var_262], dl
                lea     edx, [esp+2B8h+var_274]
                push    14h
                push    edx
                lea     ecx, [esp+2C0h+var_240]
                mov     [esp+2C0h+var_261], al
                call    calculate_volume_id_mac
                mov     edi, eax
                add     esp, 0Ch
                test    edi, edi
                jl      loc_10010C1E
                mov     eax, 10h
                lea     ecx, [esp+2B4h+var_260]
                lea     edx, [esp+2B4h+var_250]
                lea     ebx, [ebx+0]

loc_10010BA0:                           ; CODE XREF: sub_10010630+582j
                mov     esi, [edx]
                cmp     esi, [ecx]
                jnz     short loc_10010BB8
                sub     eax, 4
                add     ecx, 4
                add     edx, 4
                cmp     eax, 4
                jnb     short loc_10010BA0
                test    eax, eax
                jz      short loc_10010C15

loc_10010BB8:                           ; CODE XREF: sub_10010630+574j
                movzx   ebx, byte ptr [ecx]
                movzx   esi, byte ptr [edx]
                sub     esi, ebx
                jnz     short loc_10010C07
                sub     eax, 1
                add     ecx, 1
                add     edx, 1
                test    eax, eax
                jz      short loc_10010C15
                movzx   ebx, byte ptr [ecx]
                movzx   esi, byte ptr [edx]
                sub     esi, ebx
                jnz     short loc_10010C07
                sub     eax, 1
                add     ecx, 1
                add     edx, 1
                test    eax, eax
                jz      short loc_10010C15
                movzx   ebx, byte ptr [ecx]
                movzx   esi, byte ptr [edx]
                sub     esi, ebx
                jnz     short loc_10010C07
                sub     eax, 1
                add     ecx, 1
                add     edx, 1
                test    eax, eax
                jz      short loc_10010C15
                movzx   eax, byte ptr [ecx]
                movzx   esi, byte ptr [edx]
                sub     esi, eax

loc_10010C05:                           ; CODE XREF: sub_10010630+4F6j
                jz      short loc_10010C15

loc_10010C07:                           ; CODE XREF: sub_10010630+499j
                                        ; sub_10010630+4B8j ...
                test    esi, esi
                mov     eax, 1
                jg      short loc_10010C17
                or      eax, 0FFFFFFFFh
                jmp     short loc_10010C17
; ---------------------------------------------------------------------------

loc_10010C15:                           ; CODE XREF: sub_10010630+48Bj
                                        ; sub_10010630+4AAj ...
                xor     eax, eax

loc_10010C17:                           ; CODE XREF: sub_10010630+5DEj
                                        ; sub_10010630+5E3j
                test    eax, eax
                jz      short loc_10010C1E

loc_10010C1B:                           ; CODE XREF: sub_10010630+1F3j
                                        ; sub_10010630+1FDj ...
                or      edi, 0FFFFFFFFh

loc_10010C1E:                           ; CODE XREF: sub_10010630+133j
                                        ; sub_10010630+1E8j ...
                mov     eax, edi

loc_10010C20:                           ; CODE XREF: sub_10010630+C1j
                                        ; sub_10010630+16Cj
                mov     ecx, [esp+2B4h+var_8]
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 2A4h
                retn
sub_10010630    endp
sub_1000B840    proc near               ; CODE XREF: sub_10010630+334p

var_60          = dword ptr -60h
var_5C          = dword ptr -5Ch
var_58          = byte ptr -58h
var_48          = byte ptr -48h
var_4           = dword ptr -4
arg_0           = dword ptr  4

                sub     esp, 60h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+60h+var_4], eax
                push    ebx
                push    ebp
                mov     ebp, [esp+68h+arg_0]
                push    esi
                push    edi
                mov     ebx, ecx
                mov     esi, edx
                call    EC_KEY_new
                mov     edi, eax
                test    edi, edi
                jz      short loc_1000B88F
                call    sub_1000B3F0
                push    eax
                push    edi
                mov     [esp+78h+var_5C], eax
                call    EC_KEY_set_group
                add     esp, 8
                test    eax, eax
                push    edi             ; void *
                jnz     short loc_1000B8A7
                call    EC_KEY_free
                mov     eax, [esp+74h+var_5C]
                push    eax             ; void *
                call    EC_GROUP_free
                add     esp, 8

loc_1000B88F:                           ; CODE XREF: sub_1000B840+23j
                mov     eax, 0FFFFFFFEh
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                mov     ecx, [esp+60h+var_4]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 60h
                retn
; ---------------------------------------------------------------------------

loc_1000B8A7:                           ; CODE XREF: sub_1000B840+3Bj
                mov     eax, ebp
                call    sub_1000B740
                add     esp, 4
                test    eax, eax
                jnz     short loc_1000B8BD
                lea     ebx, [eax-3]
                jmp     loc_1000B969
; ---------------------------------------------------------------------------

loc_1000B8BD:                           ; CODE XREF: sub_1000B840+73j
                lea     ecx, [esp+70h+var_58]
                push    ecx
                call    EVP_MD_CTX_init
                call    EVP_ecdsa
                push    eax
                lea     edx, [esp+78h+var_58]
                push    edx
                call    EVP_DigestInit
                push    14h
                lea     eax, [esp+80h+var_58]
                push    offset dword_10080490
                push    eax
                call    EVP_DigestUpdate
                push    28h
                lea     ecx, [esp+8Ch+var_58]
                push    esi
                push    ecx
                call    EVP_DigestUpdate
                lea     edx, [esp+94h+var_60]
                push    edx
                lea     eax, [esp+98h+var_48]
                push    eax
                lea     ecx, [esp+9Ch+var_58]
                push    ecx
                call    EVP_DigestFinal_ex
                add     esp, 30h
                call    ECDSA_SIG_new
                mov     esi, eax
                test    esi, esi
                jz      short loc_1000B957
                mov     edx, [esi]
                push    edx
                push    14h
                push    ebx
                call    BN_bin2bn
                add     esp, 0Ch
                test    eax, eax
                jz      short loc_1000B957
                mov     eax, [esi+4]
                push    eax
                push    14h
                add     ebx, 14h
                push    ebx
                call    BN_bin2bn
                add     esp, 0Ch
                test    eax, eax
                jz      short loc_1000B957
                mov     ecx, [esp+70h+var_60]
                push    edi
                push    esi
                push    ecx
                lea     edx, [esp+7Ch+var_48]
                push    edx
                call    ECDSA_do_verify
                add     esp, 10h
                mov     ebx, eax
                jmp     short loc_1000B95C
; ---------------------------------------------------------------------------

loc_1000B957:                           ; CODE XREF: sub_1000B840+D5j
                                        ; sub_1000B840+E7j ...
                mov     ebx, 0FFFFFFFCh

loc_1000B95C:                           ; CODE XREF: sub_1000B840+115j
                test    esi, esi
                jz      short loc_1000B969
                push    esi
                call    ECDSA_SIG_free
                add     esp, 4

loc_1000B969:                           ; CODE XREF: sub_1000B840+78j
                                        ; sub_1000B840+11Ej
                push    edi             ; void *
                call    EC_KEY_free
                mov     ecx, [esp+74h+var_4]
                add     esp, 4
                pop     edi
                pop     esi
                pop     ebp
                mov     eax, ebx
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 60h
                retn
sub_1000B840    endp

sub_1000F680    proc near               ; CODE XREF: sub_10010630+385p

var_60          = byte ptr -60h
var_5F          = byte ptr -5Fh
var_5C          = byte ptr -5Ch
var_34          = byte ptr -34h
var_4           = dword ptr -4
arg_0           = byte ptr  4
arg_4           = dword ptr  8

                sub     esp, 60h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+60h+var_4], eax
                push    ebp
                mov     ebp, [esp+64h+arg_4]
                push    esi
                push    edi
                push    54h             ; size_t
                lea     eax, [esp+70h+var_60]
                push    0               ; int
                push    eax             ; void *
                call    crt_memset
                mov     dl, [esp+78h+arg_0]
                mov     [esp+78h+var_5F], 52h
                mov     ecx, 0Ah
                mov     esi, offset byte_100804B8
                lea     edi, [esp+78h+var_5C]
                rep movsd
                add     esp, 0Ch
                mov     ecx, 0Ah
                mov     esi, ebp
                lea     edi, [esp+6Ch+var_34]
                rep movsd
                lea     ecx, [esp+6Ch+var_60]
                push    54h
                push    ecx
                mov     cl, 2
                mov     esi, ebx
                call    sub_1000FC30
                mov     ecx, [esp+6Ch+var_4]
                pop     edi
                pop     esi
                pop     ebp
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 60h
                retn    8
sub_1000F680    endp
sub_1000BB30    proc near               ; CODE XREF: sub_10010630+3A3p

var_80          = dword ptr -80h
var_7C          = dword ptr -7Ch
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = byte ptr -68h
var_63          = dword ptr -63h
var_5F          = dword ptr -5Fh
var_5B          = dword ptr -5Bh
var_57          = dword ptr -57h
var_4           = dword ptr -4
arg_0           = dword ptr  4

                sub     esp, 84h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+84h+var_4], eax
                mov     eax, [esp+84h+arg_0]
                push    ebx
                push    ebp
                xor     ebp, ebp
                push    esi
                push    edi
                mov     esi, ecx
                mov     ebx, edx
                mov     [esp+94h+var_70], eax
                mov     [esp+94h+var_78], ebp
                mov     [esp+94h+var_7C], ebp
                mov     [esp+94h+var_80], ebp
                mov     [esp+94h+var_74], ebp
                call    EC_KEY_new
                mov     edi, eax
                test    edi, edi
                jz      short loc_1000BB9E
                call    sub_1000B3F0
                push    eax
                push    edi
                mov     [esp+9Ch+var_6C], eax
                call    EC_KEY_set_group
                add     esp, 8
                test    eax, eax
                push    edi             ; void *
                jnz     short loc_1000BBA8
                call    EC_KEY_free
                mov     ecx, [esp+98h+var_6C]
                push    ecx             ; void *
                call    EC_GROUP_free
                add     esp, 8

loc_1000BB9E:                           ; CODE XREF: sub_1000BB30+42j
                mov     eax, 0FFFFFFFEh
                jmp     loc_1000BD5A
; ---------------------------------------------------------------------------

loc_1000BBA8:                           ; CODE XREF: sub_1000BB30+5Aj
                mov     eax, esi
                call    sub_1000B740
                add     esp, 4
                test    eax, eax
                jnz     short loc_1000BBC0
                lea     esi, [eax-3]
                mov     ebx, ebp
                jmp     loc_1000BCF1
; ---------------------------------------------------------------------------

loc_1000BBC0:                           ; CODE XREF: sub_1000BB30+84j
                push    0
                push    14h
                push    offset unk_100804A4
                call    BN_bin2bn
                add     esp, 0Ch
                test    eax, eax
                mov     [esp+94h+var_78], eax
                jnz     short loc_1000BBE3
                lea     esi, [eax-4]
                mov     ebx, ebp
                jmp     loc_1000BCF1
; ---------------------------------------------------------------------------

loc_1000BBE3:                           ; CODE XREF: sub_1000BB30+A7j
                push    edi
                call    EVP_CIPHER_block_size
                mov     esi, eax
                add     esp, 4
                test    esi, esi
                jnz     short loc_1000BBFC
                lea     esi, [eax-6]
                mov     ebx, ebp
                jmp     loc_1000BCF1
; ---------------------------------------------------------------------------

loc_1000BBFC:                           ; CODE XREF: sub_1000BB30+C0j
                push    0
                push    14h
                push    ebx
                call    BN_bin2bn
                add     esp, 0Ch
                test    eax, eax
                mov     [esp+94h+var_80], eax
                jnz     short loc_1000BC1B
                lea     esi, [eax-7]
                mov     ebx, ebp
                jmp     loc_1000BCF1
; ---------------------------------------------------------------------------

loc_1000BC1B:                           ; CODE XREF: sub_1000BB30+DFj
                push    0
                push    14h
                add     ebx, 14h
                push    ebx
                call    BN_bin2bn
                mov     ebx, eax
                add     esp, 0Ch
                test    ebx, ebx
                jnz     short loc_1000BC39
                lea     esi, [eax-8]
                jmp     loc_1000BCF1
; ---------------------------------------------------------------------------

loc_1000BC39:                           ; CODE XREF: sub_1000BB30+FFj
                push    esi
                call    EC_POINT_new
                mov     ebp, eax
                add     esp, 4
                test    ebp, ebp
                jnz     short loc_1000BC50
                lea     esi, [eax-9]
                jmp     loc_1000BCF1
; ---------------------------------------------------------------------------

loc_1000BC50:                           ; CODE XREF: sub_1000BB30+116j
                mov     edx, [esp+94h+var_80]
                push    0
                push    ebx
                push    edx
                push    ebp
                push    esi
                call    EC_POINT_set_affine_coordinates_GFp
                add     esp, 14h
                test    eax, eax
                jnz     short loc_1000BC6E
                lea     esi, [eax-0Ah]
                jmp     loc_1000BCF1
; ---------------------------------------------------------------------------

loc_1000BC6E:                           ; CODE XREF: sub_1000BB30+134j
                push    esi
                call    EC_POINT_new
                mov     ecx, [esp+98h+var_78]
                push    0
                push    ecx
                push    ebp
                push    0
                push    eax
                push    esi
                mov     [esp+0B0h+var_7C], eax
                call    EC_POINT_mul
                add     esp, 1Ch
                test    eax, eax
                jnz     short loc_1000BC95
                lea     esi, [eax-0Ch]
                jmp     short loc_1000BCF1
; ---------------------------------------------------------------------------

loc_1000BC95:                           ; CODE XREF: sub_1000BB30+15Ej
                mov     edx, [esp+94h+var_7C]
                push    0
                push    0
                push    4
                push    edx
                push    esi
                call    EC_POINT_point2bn
                add     esp, 14h
                test    eax, eax
                mov     [esp+94h+var_74], eax
                jnz     short loc_1000BCB6
                lea     esi, [eax-0Dh]
                jmp     short loc_1000BCF1
; ---------------------------------------------------------------------------

loc_1000BCB6:                           ; CODE XREF: sub_1000BB30+17Fj
                lea     ecx, [esp+94h+var_68]
                push    ecx
                push    eax
                call    BN_bn2bin
                add     esp, 8
                test    eax, eax
                jnz     short loc_1000BCCD
                lea     esi, [eax-0Eh]
                jmp     short loc_1000BCF1
; ---------------------------------------------------------------------------

loc_1000BCCD:                           ; CODE XREF: sub_1000BB30+196j
                mov     eax, [esp+94h+var_70]
                mov     edx, [esp+94h+var_63]
                mov     ecx, [esp+94h+var_5F]
                mov     [eax], edx
                mov     edx, [esp+94h+var_5B]
                mov     [eax+4], ecx
                mov     ecx, [esp+94h+var_57]
                mov     [eax+8], edx
                mov     [eax+0Ch], ecx
                mov     esi, 1

loc_1000BCF1:                           ; CODE XREF: sub_1000BB30+8Bj
                                        ; sub_1000BB30+AEj ...
                push    edi             ; void *
                call    EC_KEY_free
                mov     eax, [esp+98h+var_78]
                add     esp, 4
                test    eax, eax
                jz      short loc_1000BD0B
                push    eax             ; void *
                call    BN_free
                add     esp, 4

loc_1000BD0B:                           ; CODE XREF: sub_1000BB30+1D0j
                test    ebp, ebp
                jz      short loc_1000BD18
                push    ebp             ; void *
                call    EC_POINT_free
                add     esp, 4

loc_1000BD18:                           ; CODE XREF: sub_1000BB30+1DDj
                mov     eax, [esp+94h+var_7C]
                test    eax, eax
                jz      short loc_1000BD29
                push    eax             ; void *
                call    EC_POINT_free
                add     esp, 4

loc_1000BD29:                           ; CODE XREF: sub_1000BB30+1EEj
                mov     eax, [esp+94h+var_80]
                test    eax, eax
                jz      short loc_1000BD3A
                push    eax             ; void *
                call    BN_clear_free
                add     esp, 4

loc_1000BD3A:                           ; CODE XREF: sub_1000BB30+1FFj
                test    ebx, ebx
                jz      short loc_1000BD47
                push    ebx             ; void *
                call    BN_clear_free
                add     esp, 4

loc_1000BD47:                           ; CODE XREF: sub_1000BB30+20Cj
                mov     eax, [esp+94h+var_74]
                test    eax, eax
                jz      short loc_1000BD58
                push    eax             ; void *
                call    BN_free
                add     esp, 4

loc_1000BD58:                           ; CODE XREF: sub_1000BB30+21Dj
                mov     eax, esi

loc_1000BD5A:                           ; CODE XREF: sub_1000BB30+73j
                mov     ecx, [esp+94h+var_4]
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 84h
                retn
sub_1000BB30    endp

sub_1000B3F0    proc near               ; CODE XREF: sub_1000B840+25p
                                        ; sub_1000B990+3Dp ...

var_124         = dword ptr -124h
var_11C         = dword ptr -11Ch
var_118         = dword ptr -118h
var_114         = dword ptr -114h
var_110         = dword ptr -110h
var_10C         = dword ptr -10Ch
var_108         = word ptr -108h
var_106         = byte ptr -106h
var_104         = byte ptr -104h
var_D4          = byte ptr -0D4h
var_A0          = byte ptr -0A0h
var_6C          = byte ptr -6Ch
var_38          = byte ptr -38h
var_4           = dword ptr -4

                sub     esp, 124h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+124h+var_4], eax
                push    ebx
                push    ebp
                push    esi
                push    edi
                mov     ecx, 0Ch
                mov     esi, offset a90081282363758 ; "900812823637587646514106462588455890498"...
                lea     edi, [esp+134h+var_6C]
                rep movsd
                mov     cl, ds:byte_10060062
                movsb
                mov     [esp+134h+var_106], cl
                mov     ecx, 0Ch
                mov     esi, offset a36639403464723 ; "366394034647231750324370400222002566844"...
                lea     edi, [esp+134h+var_D4]
                rep movsd
                movsb
                mov     ecx, 0Ch
                mov     esi, offset a26486561395972 ; "264865613959729647018113670854605162895"...
                lea     edi, [esp+134h+var_A0]
                rep movsd
                mov     ax, ds:word_10060060
                movsb
                mov     ecx, 0Ch
                mov     esi, offset a51841075954883 ; "518410759548831625104133927451689362961"...
                lea     edi, [esp+134h+var_104]
                rep movsd
                mov     ecx, 0Ch
                mov     esi, offset a900812823637_0 ; "900812823637587646514106555566573588779"...
                lea     edi, [esp+134h+var_38]
                rep movsd
                xor     ebp, ebp
                xor     ebx, ebx
                mov     [esp+134h+var_110], ebp
                mov     [esp+134h+var_10C], ebp
                mov     [esp+134h+var_114], ebp
                mov     [esp+134h+var_124], ebp
                mov     [esp+134h+var_118], ebp
                mov     [esp+134h+var_11C], ebp
                mov     [esp+134h+var_108], ax
                movsb
                call    BN_CTX_new
                mov     esi, eax
                cmp     esi, ebp
                jnz     short loc_1000B4A8
                push    2Bh
                jmp     loc_1000B680
; ---------------------------------------------------------------------------

loc_1000B4A8:                           ; CODE XREF: sub_1000B3F0+AFj
                call    BN_new
                cmp     eax, ebp
                mov     [esp+134h+var_110], eax
                jz      loc_1000B67E
                call    BN_new
                cmp     eax, ebp
                mov     [esp+134h+var_10C], eax
                jz      loc_1000B67E
                call    BN_new
                cmp     eax, ebp
                mov     [esp+134h+var_114], eax
                jz      loc_1000B67E
                call    BN_new
                cmp     eax, ebp
                mov     [esp+134h+var_124], eax
                jz      loc_1000B67E
                call    BN_new
                cmp     eax, ebp
                mov     [esp+134h+var_118], eax
                jz      loc_1000B67E
                call    BN_new
                cmp     eax, ebp
                mov     [esp+134h+var_11C], eax
                jz      loc_1000B67E
                lea     edx, [esp+134h+var_6C]
                push    edx
                lea     eax, [esp+138h+var_110]
                push    eax
                call    BN_dec2bn
                add     esp, 8
                test    eax, eax
                jz      loc_1000B673
                lea     ecx, [esp+134h+var_108]
                push    ecx
                lea     edx, [esp+138h+var_10C]
                push    edx
                call    BN_dec2bn
                add     esp, 8
                test    eax, eax
                jz      loc_1000B673
                lea     eax, [esp+134h+var_D4]
                push    eax
                lea     ecx, [esp+138h+var_114]
                push    ecx
                call    BN_dec2bn
                add     esp, 8
                test    eax, eax
                jz      loc_1000B673
                mov     edx, [esp+134h+var_114]
                mov     eax, [esp+134h+var_10C]
                mov     ecx, [esp+134h+var_110]
                push    esi
                push    edx
                push    eax
                push    ecx
                call    EC_GROUP_new_curve_GFp
                mov     edi, eax
                add     esp, 10h
                cmp     edi, ebp
                jnz     short loc_1000B597
                push    3Ch

loc_1000B57F:                           ; CODE XREF: sub_1000B3F0+1B8j
                                        ; sub_1000B3F0+208j ...
                push    offset a____SrcAacsAac ; "..\\..\\src\\aacs\\aacs_ecdsa.cpp"
                push    10h
                push    0AFh
                push    10h
                call    ERR_put_error
                jmp     loc_1000B695
; ---------------------------------------------------------------------------

loc_1000B597:                           ; CODE XREF: sub_1000B3F0+18Bj
                push    edi
                call    EC_POINT_new
                mov     ebx, eax
                add     esp, 4
                cmp     ebx, ebp
                jnz     short loc_1000B5AA
                push    41h
                jmp     short loc_1000B57F
; ---------------------------------------------------------------------------

loc_1000B5AA:                           ; CODE XREF: sub_1000B3F0+1B4j
                lea     edx, [esp+134h+var_A0]
                push    edx
                lea     eax, [esp+138h+var_124]
                push    eax
                call    BN_dec2bn
                add     esp, 8
                test    eax, eax
                jz      loc_1000B65C
                lea     ecx, [esp+134h+var_104]
                push    ecx
                lea     edx, [esp+138h+var_118]
                push    edx
                call    BN_dec2bn
                add     esp, 8
                test    eax, eax
                jz      short loc_1000B65C
                mov     eax, [esp+134h+var_118]
                mov     ecx, [esp+134h+var_124]
                push    esi
                push    eax
                push    ecx
                push    ebx
                push    edi
                call    EC_POINT_set_affine_coordinates_GF2m
                add     esp, 14h
                test    eax, eax
                jnz     short loc_1000B5FA
                push    4Ah
                jmp     short loc_1000B57F
; ---------------------------------------------------------------------------

loc_1000B5FA:                           ; CODE XREF: sub_1000B3F0+204j
                lea     edx, [esp+134h+var_38]
                push    edx
                lea     eax, [esp+138h+var_11C]
                push    eax
                call    BN_dec2bn
                add     esp, 8
                test    eax, eax
                jz      short loc_1000B645
                mov     ecx, [esp+134h+var_124]
                push    1
                push    ecx
                call    BN_set_word
                add     esp, 8
                test    eax, eax
                jz      short loc_1000B645
                mov     edx, [esp+134h+var_124]
                mov     eax, [esp+134h+var_11C]
                push    edx
                push    eax
                push    ebx
                push    edi
                call    EC_GROUP_set_generator
                add     esp, 10h
                test    eax, eax
                jnz     short loc_1000B6A3
                push    52h
                jmp     loc_1000B57F
; ---------------------------------------------------------------------------

loc_1000B645:                           ; CODE XREF: sub_1000B3F0+221j
                                        ; sub_1000B3F0+234j
                push    4Eh
                push    offset a____SrcAacsAac ; "..\\..\\src\\aacs\\aacs_ecdsa.cpp"
                push    3
                push    0AFh
                push    10h
                call    ERR_put_error
                jmp     short loc_1000B695
; ---------------------------------------------------------------------------

loc_1000B65C:                           ; CODE XREF: sub_1000B3F0+1D1j
                                        ; sub_1000B3F0+1EBj
                push    46h
                push    offset a____SrcAacsAac ; "..\\..\\src\\aacs\\aacs_ecdsa.cpp"
                push    3
                push    0AFh
                push    10h
                call    ERR_put_error
                jmp     short loc_1000B695
; ---------------------------------------------------------------------------

loc_1000B673:                           ; CODE XREF: sub_1000B3F0+135j
                                        ; sub_1000B3F0+14Fj ...
                push    37h
                push    offset a____SrcAacsAac ; "..\\..\\src\\aacs\\aacs_ecdsa.cpp"
                push    3
                jmp     short loc_1000B687
; ---------------------------------------------------------------------------

loc_1000B67E:                           ; CODE XREF: sub_1000B3F0+C3j
                                        ; sub_1000B3F0+D4j ...
                push    31h

loc_1000B680:                           ; CODE XREF: sub_1000B3F0+B3j
                push    offset a____SrcAacsAac ; "..\\..\\src\\aacs\\aacs_ecdsa.cpp"
                push    41h

loc_1000B687:                           ; CODE XREF: sub_1000B3F0+28Cj
                push    0AFh
                push    10h
                call    ERR_put_error
                mov     edi, ebx

loc_1000B695:                           ; CODE XREF: sub_1000B3F0+1A2j
                                        ; sub_1000B3F0+26Aj ...
                add     esp, 14h
                push    edi             ; void *
                call    EC_GROUP_free
                add     esp, 4
                mov     edi, ebp

loc_1000B6A3:                           ; CODE XREF: sub_1000B3F0+24Cj
                cmp     ebx, ebp
                jz      short loc_1000B6B0
                push    ebx             ; void *
                call    EC_POINT_free
                add     esp, 4

loc_1000B6B0:                           ; CODE XREF: sub_1000B3F0+2B5j
                cmp     esi, ebp
                jz      short loc_1000B6BD
                push    esi             ; void *
                call    BN_CTX_free
                add     esp, 4

loc_1000B6BD:                           ; CODE XREF: sub_1000B3F0+2C2j
                mov     eax, [esp+134h+var_110]
                cmp     eax, ebp
                jz      short loc_1000B6CE
                push    eax             ; void *
                call    BN_free
                add     esp, 4

loc_1000B6CE:                           ; CODE XREF: sub_1000B3F0+2D3j
                mov     eax, [esp+134h+var_10C]
                cmp     eax, ebp
                jz      short loc_1000B6DF
                push    eax             ; void *
                call    BN_free
                add     esp, 4

loc_1000B6DF:                           ; CODE XREF: sub_1000B3F0+2E4j
                mov     eax, [esp+134h+var_114]
                cmp     eax, ebp
                jz      short loc_1000B6F0
                push    eax             ; void *
                call    BN_free
                add     esp, 4

loc_1000B6F0:                           ; CODE XREF: sub_1000B3F0+2F5j
                mov     eax, [esp+134h+var_11C]
                cmp     eax, ebp
                jz      short loc_1000B701
                push    eax             ; void *
                call    BN_free
                add     esp, 4

loc_1000B701:                           ; CODE XREF: sub_1000B3F0+306j
                mov     eax, [esp+134h+var_124]
                cmp     eax, ebp
                jz      short loc_1000B712
                push    eax             ; void *
                call    BN_free
                add     esp, 4

loc_1000B712:                           ; CODE XREF: sub_1000B3F0+317j
                mov     eax, [esp+134h+var_118]
                cmp     eax, ebp
                jz      short loc_1000B723
                push    eax             ; void *
                call    BN_free
                add     esp, 4

loc_1000B723:                           ; CODE XREF: sub_1000B3F0+328j
                mov     ecx, [esp+134h+var_4]
                mov     eax, edi
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 124h
                retn
sub_1000B3F0    endp


sub_1000B740    proc near               ; CODE XREF: sub_1000B840+69p
                                        ; sub_1000B990+83p ...

arg_0           = dword ptr  4

                push    ebp
                push    esi
                mov     esi, eax
                mov     eax, [esp+8+arg_0]
                push    eax
                call    EVP_CIPHER_block_size
                add     esp, 4
                cmp     byte ptr [esi+1], 0
                mov     ebp, eax
                jnz     loc_1000B836
                cmp     byte ptr [esi+2], 0
                jnz     loc_1000B836
                cmp     byte ptr [esi+3], 5Ch
                jnz     loc_1000B836
                push    ebx
                push    0
                lea     ecx, [esi+0Ch]
                push    14h
                push    ecx
                call    BN_bin2bn
                mov     ebx, eax
                add     esp, 0Ch
                test    ebx, ebx
                jnz     short loc_1000B78F
                lea     eax, [ebx-2]
                pop     ebx
                pop     esi
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_1000B78F:                           ; CODE XREF: sub_1000B740+46j
                push    edi
                push    0
                push    14h
                add     esi, 20h
                push    esi
                call    BN_bin2bn
                mov     edi, eax
                add     esp, 0Ch
                test    edi, edi
                jnz     short loc_1000B7B7
                push    ebx             ; void *
                call    BN_clear_free
                add     esp, 4
                lea     eax, [edi-3]
                pop     edi
                pop     ebx
                pop     esi
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_1000B7B7:                           ; CODE XREF: sub_1000B740+64j
                push    ebp
                call    EC_POINT_new
                mov     esi, eax
                add     esp, 4
                test    esi, esi
                jnz     short loc_1000B7DD
                push    ebx             ; void *
                call    BN_clear_free
                push    edi             ; void *
                call    BN_clear_free
                add     esp, 8
                pop     edi
                pop     ebx
                lea     eax, [esi-4]
                pop     esi
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_1000B7DD:                           ; CODE XREF: sub_1000B740+84j
                push    0
                push    edi
                push    ebx
                push    esi
                push    ebp
                call    EC_POINT_set_affine_coordinates_GFp
                add     esp, 14h
                test    eax, eax
                push    ebx             ; void *
                jnz     short loc_1000B80E
                call    BN_clear_free
                push    edi             ; void *
                call    BN_clear_free
                push    esi             ; void *
                call    EC_POINT_free
                add     esp, 0Ch
                pop     edi
                pop     ebx
                pop     esi
                mov     eax, 0FFFFFFFBh
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_1000B80E:                           ; CODE XREF: sub_1000B740+AEj
                call    BN_clear_free
                push    edi             ; void *
                call    BN_clear_free
                mov     edx, [esp+18h+arg_0]
                push    esi
                push    edx
                call    EC_KEY_set_public_key
                push    esi             ; void *
                mov     edi, eax
                call    EC_POINT_free
                add     esp, 14h
                mov     eax, edi
                pop     edi
                pop     ebx
                pop     esi
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_1000B836:                           ; CODE XREF: sub_1000B740+17j
                                        ; sub_1000B740+21j ...
                pop     esi
                or      eax, 0FFFFFFFFh
                pop     ebp
                retn
sub_1000B740    endp





sub_1000FC30    proc near               ; CODE XREF: sub_1000F5E0+79p
                                        ; sub_1000F680+57p

var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
arg_0           = dword ptr  4
arg_4           = word ptr  8

                sub     esp, 1Ch
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+1Ch+var_8], eax
                xor     eax, eax
                push    ebx
                mov     bx, [esp+20h+arg_4]
                push    edi
                mov     edi, [esp+24h+arg_0]
                mov     [esp+24h+var_10], eax
                and     cl, 3Fh
                shl     dl, 6
                or      cl, dl
                mov     byte ptr [esp+24h+var_10], bh
                mov     byte ptr [esp+24h+var_10+1], bl
                mov     byte ptr [esp+24h+var_10+2], cl
                movzx   ebx, bx
                mov     edx, edi
                mov     edi, [esi]
                mov     [esp+24h+var_18], eax
                mov     [esp+24h+var_14], eax
                push    eax
                lea     ecx, [esp+28h+var_18]
                mov     [esp+28h+var_C], eax
                mov     byte ptr [esp+28h+var_18], 0A3h
                mov     byte ptr [esp+28h+var_14+3], 2
                call    sub_1000E9E0
                mov     ecx, [esp+24h+var_8]
                pop     edi
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 1Ch
                retn    8
sub_1000FC30    endp




sub_1000FB70    proc near               ; CODE XREF: sub_1000F6F0+44p
                                        ; sub_1000FAD0+48p ...

var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
arg_0           = byte ptr  4
arg_4           = dword ptr  8
arg_8           = byte ptr  0Ch
arg_C           = word ptr  10h

                sub     esp, 1Ch
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+1Ch+var_8], eax
                xor     eax, eax
                test    esi, esi
                push    ebx
                push    edi
                mov     bl, cl
                mov     edi, edx
                mov     [esp+24h+var_18], eax
                mov     [esp+24h+var_14], eax
                mov     [esp+24h+var_10], eax
                mov     [esp+24h+var_C], eax
                jz      short loc_1000FBAB
                movzx   eax, [esp+24h+arg_C]
                push    eax             ; size_t
                push    0               ; int
                push    esi             ; void *
                call    crt_memset
                add     esp, 0Ch

loc_1000FBAB:                           ; CODE XREF: sub_1000FB70+28j
                mov     eax, [esp+24h+arg_4]
                mov     edi, [edi]
                mov     ecx, eax
                shr     ecx, 18h
                mov     byte ptr [esp+24h+var_18+2], cl
                mov     ecx, eax
                shr     ecx, 8
                mov     edx, eax
                mov     byte ptr [esp+24h+var_14], cl
                mov     cl, [esp+24h+arg_0]
                mov     byte ptr [esp+24h+var_14+1], al
                mov     ax, [esp+24h+arg_C]
                shr     edx, 10h
                shl     cl, 6
                mov     byte ptr [esp+24h+var_18+3], dl
                mov     dl, [esp+24h+arg_8]
                mov     byte ptr [esp+24h+var_10], ah
                mov     byte ptr [esp+24h+var_10+1], al
                and     bl, 3Fh
                or      bl, cl
                movzx   eax, ax
                mov     byte ptr [esp+24h+var_14+2], dl
                mov     byte ptr [esp+24h+var_10+2], bl
                push    eax
                xor     ebx, ebx
                mov     edx, esi
                lea     ecx, [esp+28h+var_18]
                mov     byte ptr [esp+28h+var_18], 0A4h
                mov     byte ptr [esp+28h+var_14+3], 2
                call    sub_1000E9E0
                mov     ecx, [esp+24h+var_8]
                pop     edi
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 1Ch
                retn    10h
sub_1000FB70    endp

sub_1000F3D0    proc near               ; CODE XREF: sub_10010630+BAp

var_7C          = dword ptr -7Ch
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_6C          = byte ptr -6Ch
var_68          = byte ptr -68h
var_4C          = byte ptr -4Ch
var_8           = dword ptr -8

                sub     esp, 7Ch
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+7Ch+var_8], eax
                push    ebx
                xor     eax, eax
                push    edi
                push    60h             ; size_t
                push    eax             ; int
                mov     [esp+8Ch+var_7C], eax
                mov     [esp+8Ch+var_78], eax
                mov     [esp+8Ch+var_74], eax
                mov     [esp+8Ch+var_70], eax
                lea     eax, [esp+8Ch+var_6C]
                push    eax             ; void *
                mov     edi, ecx
                call    crt_memset
                mov     edi, [edi]
                add     esp, 0Ch
                push    60h
                xor     ebx, ebx
                lea     edx, [esp+88h+var_6C]
                lea     ecx, [esp+88h+var_7C]
                mov     byte ptr [esp+88h+var_7C], 12h
                mov     byte ptr [esp+88h+var_78], 60h
                call    sub_1000E9E0
                mov     edi, eax
                test    edi, edi
                jnz     short loc_1000F47D
                mov     al, [esp+84h+var_68]
                cmp     al, 1Fh
                jnb     short loc_1000F45D
                mov     ecx, ds:dword_100602A0
                mov     [esi], ecx
                mov     edx, ds:dword_100602A4
                mov     [esi+4], edx
                mov     ax, ds:word_100602A8
                mov     [esi+8], ax
                mov     eax, edi
                pop     edi
                pop     ebx
                mov     ecx, [esp+7Ch+var_8]
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 7Ch
                retn
; ---------------------------------------------------------------------------

loc_1000F45D:                           ; CODE XREF: sub_1000F3D0+5Dj
                sub     al, 1Bh
                cmp     al, 18h
                jbe     short loc_1000F465
                mov     al, 18h

loc_1000F465:                           ; CODE XREF: sub_1000F3D0+91j
                movzx   ebx, al
                push    ebx             ; size_t
                lea     ecx, [esp+88h+var_4C]
                push    ecx             ; char *
                push    esi             ; char *
                call    crt_strncpy
                add     esp, 0Ch
                mov     byte ptr [ebx+esi], 0
                mov     eax, edi

loc_1000F47D:                           ; CODE XREF: sub_1000F3D0+55j
                mov     ecx, [esp+84h+var_8]
                pop     edi
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 7Ch
                retn
sub_1000F3D0    endp

sub_1000F870    proc near               ; CODE XREF: sub_10010630+12Ap

var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                sub     esp, 24h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+24h+var_8], eax
                mov     eax, [esp+24h+arg_4]
                push    ebx
                push    ebp
                mov     ebp, [esp+2Ch+arg_0]
                push    esi
                push    edi
                mov     esi, ecx
                mov     edi, [esi]
                mov     [esp+34h+var_24], eax
                xor     eax, eax
                mov     [esp+34h+var_C], eax
                mov     ebx, 8
                mov     [esp+34h+var_10], eax
                mov     [esp+34h+var_20], eax
                mov     [esp+34h+var_1C], eax
                push    eax
                lea     edx, [esp+38h+var_10]
                lea     ecx, [esp+38h+var_20]
                mov     [esp+38h+var_18], eax
                mov     [esp+38h+var_14], eax
                mov     byte ptr [esp+38h+var_20], 1Dh
                mov     byte ptr [esp+38h+var_1C], bl
                mov     byte ptr [esp+38h+var_10], 88h
                mov     byte ptr [esp+38h+var_10+3], 4
                mov     byte ptr [esp+38h+var_C], 2
                mov     byte ptr [esp+38h+var_C+1], 6Fh
                mov     byte ptr [esp+38h+var_C+2], 1
                mov     byte ptr [esp+38h+var_C+3], al
                call    sub_1000E9E0
                xor     edx, edx
                cmp     eax, edx
                jnz     loc_1000FAAD
                mov     edi, [esi]
                xor     eax, eax
                mov     [esp+34h+var_1C], eax
                mov     [esp+34h+var_18], eax
                mov     [esp+34h+var_20], eax
                mov     cl, 60h
                mov     [esp+34h+var_14], eax
                mov     al, 0C1h
                mov     byte ptr [esp+34h+var_1C], cl
                mov     byte ptr [esp+34h+var_1C+3], cl
                push    edx
                xor     ebx, ebx
                lea     ecx, [esp+38h+var_20]
                mov     byte ptr [esp+38h+var_20], 0DFh
                mov     byte ptr [esp+38h+var_20+2], 0E3h
                mov     byte ptr [esp+38h+var_1C+1], al
                mov     byte ptr [esp+38h+var_1C+2], 0CCh
                mov     byte ptr [esp+38h+var_18], al
                mov     byte ptr [esp+38h+var_18+1], 0CDh
                mov     byte ptr [esp+38h+var_18+2], dl
                mov     byte ptr [esp+38h+var_18+3], dl
                call    sub_1000E9E0
                test    eax, eax
                jnz     loc_1000FAAD
                mov     edi, [esi]
                mov     [esp+34h+var_1C], eax
                mov     [esp+34h+var_18], eax
                mov     [esp+34h+var_20], eax
                mov     cl, 60h
                mov     [esp+34h+var_14], eax
                mov     al, 0C1h
                mov     byte ptr [esp+34h+var_1C], cl
                mov     byte ptr [esp+34h+var_1C+3], cl
                push    ebx
                xor     edx, edx
                lea     ecx, [esp+38h+var_20]
                mov     byte ptr [esp+38h+var_20], 0DFh
                mov     byte ptr [esp+38h+var_20+2], 0E3h
                mov     byte ptr [esp+38h+var_1C+1], al
                mov     byte ptr [esp+38h+var_1C+2], 0CEh
                mov     byte ptr [esp+38h+var_18], al
                mov     byte ptr [esp+38h+var_18+1], 0CFh
                mov     byte ptr [esp+38h+var_18+2], bl
                mov     byte ptr [esp+38h+var_18+3], 1
                call    sub_1000E9E0
                xor     edx, edx
                cmp     eax, edx
                jnz     loc_1000FAAD
                mov     edi, [esi]
                xor     eax, eax
                mov     [esp+34h+var_1C], eax
                mov     [esp+34h+var_18], eax
                mov     [esp+34h+var_20], eax
                mov     cl, 60h
                mov     [esp+34h+var_14], eax
                mov     al, 0C1h
                mov     byte ptr [esp+34h+var_1C], cl
                mov     byte ptr [esp+34h+var_1C+3], cl
                push    edx
                lea     ecx, [esp+38h+var_20]
                mov     byte ptr [esp+38h+var_20], 0DFh
                mov     byte ptr [esp+38h+var_20+2], 0E3h
                mov     byte ptr [esp+38h+var_1C+1], al
                mov     byte ptr [esp+38h+var_1C+2], 0C8h
                mov     byte ptr [esp+38h+var_18], al
                mov     byte ptr [esp+38h+var_18+1], 0C9h
                mov     byte ptr [esp+38h+var_18+2], dl
                mov     byte ptr [esp+38h+var_18+3], dl
                call    sub_1000E9E0
                test    eax, eax
                jnz     loc_1000FAAD
                mov     edi, [esi]
                mov     [esp+34h+var_1C], eax
                mov     [esp+34h+var_18], eax
                mov     [esp+34h+var_20], eax
                mov     cl, 60h
                mov     [esp+34h+var_14], eax
                mov     al, 0C1h
                mov     byte ptr [esp+34h+var_1C], cl
                mov     byte ptr [esp+34h+var_1C+3], cl
                push    ebx
                xor     edx, edx
                lea     ecx, [esp+38h+var_20]
                mov     byte ptr [esp+38h+var_20], 0DFh
                mov     byte ptr [esp+38h+var_20+2], 0E3h
                mov     byte ptr [esp+38h+var_1C+1], al
                mov     byte ptr [esp+38h+var_1C+2], 0CAh
                mov     byte ptr [esp+38h+var_18], al
                mov     byte ptr [esp+38h+var_18+1], 0CBh
                mov     byte ptr [esp+38h+var_18+2], bl
                mov     byte ptr [esp+38h+var_18+3], 5
                call    sub_1000E9E0
                cmp     eax, ebx
                jnz     short loc_1000FAAD
                mov     ecx, [esp+34h+var_24]
                push    ecx
                push    ebp
                xor     cl, cl
                call    sub_1000F790
                cmp     eax, ebx
                jnz     short loc_1000FAAD
                mov     edi, [esi]
                xor     eax, eax
                mov     [esp+34h+var_C], eax
                mov     [esp+34h+var_10], eax
                mov     byte ptr [esp+34h+var_C+2], bl
                mov     byte ptr [esp+34h+var_C+3], bl
                push    ebx
                mov     [esp+38h+var_20], eax
                mov     [esp+38h+var_1C], eax
                lea     ebx, [eax+8]
                lea     edx, [esp+38h+var_10]
                lea     ecx, [esp+38h+var_20]
                mov     [esp+38h+var_18], eax
                mov     [esp+38h+var_14], eax
                mov     byte ptr [esp+38h+var_20], 1Dh
                mov     byte ptr [esp+38h+var_1C], 8
                mov     byte ptr [esp+38h+var_10], 88h
                mov     byte ptr [esp+38h+var_10+3], 4
                mov     byte ptr [esp+38h+var_C], 2
                mov     byte ptr [esp+38h+var_C+1], 6Fh
                call    sub_1000E9E0

loc_1000FAAD:                           ; CODE XREF: sub_1000F870+79j
                                        ; sub_1000F870+D1j ...
                mov     ecx, [esp+34h+var_8]
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 24h
                retn    8
sub_1000F870    endp
sub_1000F790    proc near               ; CODE XREF: sub_1000F870+1E1p
                                        ; sub_10010630+187p ...

var_40          = dword ptr -40h
var_3C          = dword ptr -3Ch
var_38          = dword ptr -38h
var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                sub     esp, 40h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+40h+var_8], eax
                mov     eax, [esp+40h+arg_4]
                mov     dl, [esi+4]
                push    ebx
                push    ebp
                mov     ebp, [esp+48h+arg_0]
                mov     [esp+48h+var_40], eax
                xor     eax, eax
                mov     [esp+48h+var_34], eax
                shl     cl, 6
                push    edi
                mov     edi, [esi]
                mov     [esp+4Ch+var_3C], eax
                mov     byte ptr [esp+4Ch+var_3C+1], dl
                mov     byte ptr [esp+4Ch+var_34+2], cl
                mov     [esp+4Ch+var_38], eax
                push    24h
                xor     ebx, ebx
                lea     edx, [esp+50h+var_2C]
                lea     ecx, [esp+50h+var_3C]
                mov     [esp+50h+var_30], eax
                mov     [esp+50h+var_2C], eax
                mov     [esp+50h+var_28], eax
                mov     [esp+50h+var_24], eax
                mov     [esp+50h+var_20], eax
                mov     [esp+50h+var_1C], eax
                mov     [esp+50h+var_18], eax
                mov     [esp+50h+var_14], eax
                mov     [esp+50h+var_10], eax
                mov     [esp+50h+var_C], eax
                mov     byte ptr [esp+50h+var_3C], 0ADh
                mov     byte ptr [esp+50h+var_38+3], 80h
                mov     byte ptr [esp+50h+var_34], al
                mov     byte ptr [esp+50h+var_34+1], 24h
                call    sub_1000E9E0
                test    eax, eax
                jnz     short loc_1000F856
                mov     ecx, [esp+4Ch+var_28]
                mov     edx, [esp+4Ch+var_24]
                mov     [ebp+0], ecx
                mov     ecx, [esp+4Ch+var_20]
                mov     [ebp+4], edx
                mov     edx, [esp+4Ch+var_1C]
                mov     [ebp+8], ecx
                mov     ecx, [esp+4Ch+var_40]
                mov     [ebp+0Ch], edx
                mov     edx, [esp+4Ch+var_18]
                mov     [ecx], edx
                mov     edx, [esp+4Ch+var_14]
                mov     [ecx+4], edx
                mov     edx, [esp+4Ch+var_10]
                mov     [ecx+8], edx
                mov     edx, [esp+4Ch+var_C]
                mov     [ecx+0Ch], edx

loc_1000F856:                           ; CODE XREF: sub_1000F790+89j
                mov     ecx, [esp+4Ch+var_8]
                pop     edi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 40h
                retn    8
sub_1000F790    endp

sub_1000FAD0    proc near               ; CODE XREF: sub_10010630+1B0p
                                        ; sub_10010630+3E9p

var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                sub     esp, 28h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+28h+var_4], eax
                xor     eax, eax
                push    esi
                mov     [esp+2Ch+var_28], eax
                mov     [esp+2Ch+var_24], eax
                mov     [esp+2Ch+var_20], eax
                mov     [esp+2Ch+var_1C], eax
                mov     [esp+2Ch+var_18], eax
                mov     [esp+2Ch+var_14], eax
                mov     [esp+2Ch+var_10], eax
                mov     [esp+2Ch+var_C], eax
                mov     [esp+2Ch+var_8], eax
                mov     eax, [esp+2Ch+arg_4]
                push    24h
                push    eax
                mov     eax, [esp+34h+arg_0]
                push    ecx
                push    eax
                lea     esi, [esp+3Ch+var_28]
                mov     cl, 21h
                call    sub_1000FB70
                test    eax, eax
                jnz     short loc_1000FB57
                mov     ecx, [esp+2Ch+var_24]
                mov     edx, [esp+2Ch+var_20]
                mov     [edi], ecx
                mov     ecx, [esp+2Ch+var_1C]
                mov     [edi+4], edx
                mov     edx, [esp+2Ch+var_18]
                mov     [edi+8], ecx
                mov     ecx, [esp+2Ch+var_14]
                mov     [edi+0Ch], edx
                mov     edx, [esp+2Ch+var_10]
                mov     [ebx], ecx
                mov     ecx, [esp+2Ch+var_C]
                mov     [ebx+4], edx
                mov     edx, [esp+2Ch+var_8]
                mov     [ebx+8], ecx
                mov     [ebx+0Ch], edx

loc_1000FB57:                           ; CODE XREF: sub_1000FAD0+4Fj
                mov     ecx, [esp+2Ch+var_4]
                pop     esi
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 28h
                retn    8
sub_1000FAD0    endp

sub_1000F5E0    proc near               ; CODE XREF: sub_10010630+28Dp

var_80          = byte ptr -80h
var_7F          = byte ptr -7Fh
var_7C          = dword ptr -7Ch
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = byte ptr -68h
var_4           = dword ptr -4
arg_0           = byte ptr  4

                sub     esp, 80h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+80h+var_4], eax
                push    esi
                push    edi
                push    74h             ; size_t
                lea     eax, [esp+8Ch+var_80]
                push    0               ; int
                push    eax             ; void *
                mov     esi, ecx
                call    crt_memset
                mov     ecx, dword_10080490
                mov     edx, dword_10080494
                mov     eax, dword_10080498
                mov     [esp+94h+var_7C], ecx
                mov     ecx, dword_1008049C
                mov     [esp+94h+var_78], edx
                mov     edx, dword_100804A0
                mov     [esp+94h+var_70], ecx
                add     esp, 0Ch
                mov     [esp+88h+var_74], eax
                mov     [esp+88h+var_6C], edx
                mov     dl, [esp+88h+arg_0]
                mov     [esp+88h+var_7F], 72h
                mov     ecx, 17h
                lea     edi, [esp+88h+var_68]
                rep movsd
                push    74h
                lea     eax, [esp+8Ch+var_80]
                push    eax
                mov     cl, 1
                mov     esi, ebx
                call    sub_1000FC30
                mov     ecx, [esp+88h+var_4]
                pop     edi
                pop     esi
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 80h
                retn    4
sub_1000F5E0    endp
sub_1000F6F0    proc near               ; CODE XREF: sub_10010630+2ACp

var_80          = byte ptr -80h
var_7C          = dword ptr -7Ch
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = byte ptr -68h
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                sub     esp, 80h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+80h+var_4], eax
                push    ebp
                mov     ebp, [esp+84h+arg_0]
                push    esi
                push    edi
                push    74h             ; size_t
                lea     eax, [esp+90h+var_80]
                push    0               ; int
                push    eax             ; void *
                mov     edi, ecx
                call    crt_memset
                mov     ecx, [esp+98h+arg_4]
                add     esp, 0Ch
                push    74h
                push    0
                push    0
                push    ecx
                lea     esi, [esp+9Ch+var_80]
                mov     cl, 1
                mov     edx, ebp
                call    sub_1000FB70
                test    eax, eax
                jnz     short loc_1000F76A
                mov     edx, [esp+8Ch+var_7C]
                mov     ecx, [esp+8Ch+var_78]
                mov     [ebx], edx
                mov     edx, [esp+8Ch+var_74]
                mov     [ebx+4], ecx
                mov     ecx, [esp+8Ch+var_70]
                mov     [ebx+8], edx
                mov     edx, [esp+8Ch+var_6C]
                mov     [ebx+0Ch], ecx
                mov     ecx, 17h
                lea     esi, [esp+8Ch+var_68]
                mov     [ebx+10h], edx
                rep movsd

loc_1000F76A:                           ; CODE XREF: sub_1000F6F0+4Bj
                mov     ecx, [esp+8Ch+var_4]
                pop     edi
                pop     esi
                pop     ebp
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 80h
                retn    8
sub_1000F6F0    endp





 sub_1003A7BD      proc near 
int 3;------if call here ,please copy real code!
sub_1003A7BD        endp 

 sub_10018B20      proc near 
int 3;------if call here ,please copy real code!
sub_10018B20        endp 
 sub_10018D30      proc near 
int 3;------if call here ,please copy real code!
sub_10018D30        endp 
 sub_100150C0      proc near 
int 3;------if call here ,please copy real code!
sub_100150C0        endp 
 sub_100150E0      proc near 
int 3;------if call here ,please copy real code!
sub_100150E0        endp 
 sub_100150F0      proc near 
int 3;------if call here ,please copy real code!
sub_100150F0        endp 
 sub_100150D0      proc near 
int 3;------if call here ,please copy real code!
sub_100150D0        endp 
 sub_10015110      proc near 
int 3;------if call here ,please copy real code!
sub_10015110        endp 
 sub_10015130      proc near 
int 3;------if call here ,please copy real code!
sub_10015130        endp 
 sub_10015140      proc near 
int 3;------if call here ,please copy real code!
sub_10015140        endp 
 sub_10015120      proc near 
int 3;------if call here ,please copy real code!
sub_10015120        endp 
 
; int __thiscall mybf_encrypt(void *outlen, int in_1, int inlen)
mybf_encrypt    proc near               ; CODE XREF: build_request+13p

var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_90          = byte ptr -90h
var_4           = dword ptr -4
in_1            = dword ptr  4
inlen           = dword ptr  8

                sub     esp, 9Ch
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                mov     [esp+9Ch+var_4], eax
                mov     eax, [esp+9Ch+in_1]
                mov     [esp+9Ch+var_98], eax
                mov     eax, offset a1qaz2wsx ; "1qaz2wsx"
                mov     [esp+9Ch+var_94], ecx
                lea     edx, [eax+1]
                jmp     short loc_100113D0
; ---------------------------------------------------------------------------
                lea     ecx, [ecx+0]

loc_100113D0:                           ; CODE XREF: mybf_encrypt+2Bj
                                        ; mybf_encrypt+37j
                mov     cl, [eax]
                add     eax, 1
                test    cl, cl
                jnz     short loc_100113D0
                push    ebx
                push    ebp
                push    esi
                sub     eax, edx
                push    edi
                mov     ebx, eax
                call    EVP_bf_ecb
                mov     edi, eax
                push    edi
                call    EVP_CIPHER_key_length
                mov     esi, eax
                add     esp, 4
                cmp     esi, ebx
                jle     short loc_10011419
                push    esi             ; size_t
                call    crt_malloc
                push    esi             ; size_t
                mov     ebp, eax
                push    0               ; int
                push    ebp             ; void *
                call    crt_memset
                push    ebx             ; size_t
                push    offset a1qaz2wsx ; "1qaz2wsx"
                push    ebp             ; void *
                call    crt_memcpy          ; Microsoft VisualC 2-9/net runtime
                add     esp, 1Ch
                jmp     short loc_1001141E
; ---------------------------------------------------------------------------

loc_10011419:                           ; CODE XREF: mybf_encrypt+55j
                mov     ebp, offset a1qaz2wsx ; "1qaz2wsx"

loc_1001141E:                           ; CODE XREF: mybf_encrypt+77j
                push    edi
                call    EVP_CIPHER_iv_length
                mov     esi, eax
                push    esi             ; size_t
                call    crt_malloc
                push    esi             ; size_t
                mov     ebx, eax
                push    0               ; int
                push    ebx             ; void *
                call    crt_memset
                push    edi
                call    EVP_CIPHER_block_size
                add     eax, [esp+0C4h+inlen]
                push    eax             ; size_t
                call    crt_malloc
                push    ebx             ; int
                push    ebp             ; int
                lea     edx, [esp+0D0h+var_90]
                push    edi             ; int
                push    edx             ; void *
                mov     esi, eax
                call    EVP_EncryptInit
                mov     eax, [esp+0D8h+inlen]
                mov     ecx, [esp+0D8h+var_98]
                push    eax
                push    ecx
                lea     edx, [esp+0E0h+var_9C]
                push    edx
                lea     eax, [esp+0E4h+var_90]
                push    esi
                push    eax
                call    EVP_EncryptUpdate
                mov     eax, [esp+0ECh+var_9C]
                add     esp, 40h
                lea     ecx, [esp+0ACh+var_9C]
                mov     edi, eax
                push    ecx
                add     eax, esi
                push    eax
                lea     edx, [esp+0B4h+var_90]
                push    edx
                call    EVP_EncryptFinal
                add     esp, 0Ch
                test    eax, eax
                jz      short loc_1001149E
                add     edi, [esp+0ACh+var_9C]
                jmp     short loc_100114AB
; ---------------------------------------------------------------------------

loc_1001149E:                           ; CODE XREF: mybf_encrypt+F6j
                push    esi             ; void *
                call    crt_free
                add     esp, 4
                xor     esi, esi
                xor     edi, edi

loc_100114AB:                           ; CODE XREF: mybf_encrypt+FCj
                cmp     ebp, offset a1qaz2wsx ; "1qaz2wsx"
                jz      short loc_100114BC
                push    ebp             ; void *
                call    crt_free
                add     esp, 4

loc_100114BC:                           ; CODE XREF: mybf_encrypt+111j
                push    ebx             ; void *
                call    crt_free
                mov     eax, [esp+0B0h+var_94]
                mov     ecx, [esp+0B0h+var_4]
                add     esp, 4
                mov     [eax], esi
                mov     eax, edi
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 9Ch
                retn
mybf_encrypt    endp


sub_100114F0    proc near               ; CODE XREF: AskKeyFromNet+50p
                                        ; sub_10011B70+4Cp ...

var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4

                sub     esp, 8
                push    ebx
                push    ebp
                push    esi
                push    edi
                push    eax
                push    ecx
                xor     esi, esi
                lea     ecx, [esp+20h+var_8]
                mov     [esp+20h+var_8], esi
                call    mybf_encrypt
                mov     ebx, eax
                add     esp, 8
                cmp     ebx, esi
                jz      short loc_1001156D
                mov     ebp, [esp+18h+var_8]
                cmp     ebp, esi
                jz      short loc_1001156D
                lea     edi, [ebx+8]
                push    edi             ; size_t
                mov     [esp+1Ch+var_4], esi
                call    crt_malloc
                add     esp, 4
                push    3               ; hostlong
                mov     esi, eax
                call    htonl
                push    edi             ; hostlong
                mov     [esp+1Ch+var_4], eax
                call    htonl
                mov     edx, [esp+18h+var_4]
                push    ebx
                mov     [esi], eax
                lea     eax, [esi+8]
                push    ebp
                push    eax
                mov     [esi+4], edx
                call    crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                push    ebp             ; void *
                call    crt_free
                add     esp, 10h
                test    edi, edi
                mov     eax, edi
                jz      short loc_10011565
                mov     ecx, [esp+18h+arg_0]
                mov     [ecx], esi

loc_10011565:                           ; CODE XREF: sub_100114F0+6Dj
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                add     esp, 8
                retn
; ---------------------------------------------------------------------------

loc_1001156D:                           ; CODE XREF: sub_100114F0+1Fj
                                        ; sub_100114F0+27j
                pop     edi
                pop     esi
                pop     ebp
                xor     eax, eax
                pop     ebx
                add     esp, 8
                retn
sub_100114F0    endp


; int __cdecl sub_10024750(void *)
sub_10024750    proc near               ; CODE XREF: EVP_EncryptInit+Fp

arg_0           = dword ptr  4

                mov     eax, [esp+arg_0]
                push    8Ch             ; size_t
                push    0               ; int
                push    eax             ; void *
                call    crt_memset
                add     esp, 0Ch
                retn
sub_10024750    endp


; int __cdecl sub_100247F0(void *)
sub_100247F0    proc near               ; CODE XREF: sub_10024900+5Fp

arg_0           = dword ptr  4

                push    esi
                mov     esi, [esp+4+arg_0]
                mov     eax, [esi]
                test    eax, eax
                jz      short loc_10024824
                mov     eax, [eax+1Ch]
                test    eax, eax
                jz      short loc_1002480E
                push    esi
                call    eax
                add     esp, 4
                test    eax, eax
                jnz     short loc_1002480E
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_1002480E:                           ; CODE XREF: sub_100247F0+10j
                                        ; sub_100247F0+1Aj
                mov     eax, [esi+60h]
                test    eax, eax
                jz      short loc_10024824
                mov     ecx, [esi]
                mov     edx, [ecx+20h]
                push    edx             ; size_t
                push    eax             ; void *
                call    OPENSSL_cleanse
                add     esp, 8

loc_10024824:                           ; CODE XREF: sub_100247F0+9j
                                        ; sub_100247F0+23j
                mov     eax, [esi+60h]
                test    eax, eax
                jz      short loc_10024834
                push    eax             ; void *
                call    CRYPTO_free
                add     esp, 4

loc_10024834:                           ; CODE XREF: sub_100247F0+39j
                mov     eax, [esi+4]
                test    eax, eax
                jz      short loc_10024844
                push    eax             ; void *
                call    sub_10018690
                add     esp, 4

loc_10024844:                           ; CODE XREF: sub_100247F0+49j
                push    8Ch             ; size_t
                push    0               ; int
                push    esi             ; void *
                call    crt_memset
                add     esp, 0Ch
                mov     eax, 1
                pop     esi
                retn
sub_100247F0    endp



sub_10024770    proc near               ; CODE XREF: sub_10024900+72p
                push    esi
                mov     esi, ecx
                test    esi, esi
                jz      short loc_100247A6
                push    esi
                call    sub_10018610
                add     esp, 4
                test    eax, eax
                jnz     short loc_100247B5
                push    9Bh

loc_10024789:                           ; CODE XREF: sub_10024770+60j
                push    offset a_CryptoEvpEnc_ ; ".\\crypto\\evp\\enc_min.c"
                push    86h
                push    8Ch
                push    6
                call    ERR_put_error
                add     esp, 14h
                xor     eax, eax
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_100247A6:                           ; CODE XREF: sub_10024770+5j
                mov     eax, [edi]
                mov     ecx, [eax]
                push    ecx
                call    sub_10033240
                add     esp, 4
                mov     esi, eax

loc_100247B5:                           ; CODE XREF: sub_10024770+12j
                test    esi, esi
                jz      short loc_100247DE
                mov     edx, [edi]
                mov     eax, [edx]
                push    eax
                push    esi
                call    sub_10033260
                add     esp, 8
                test    eax, eax
                jnz     short loc_100247D2
                push    0ACh
                jmp     short loc_10024789
; ---------------------------------------------------------------------------

loc_100247D2:                           ; CODE XREF: sub_10024770+59j
                mov     [edi], eax
                mov     [ebx+4], esi
                mov     eax, 1
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_100247DE:                           ; CODE XREF: sub_10024770+47j
                mov     dword ptr [ebx+4], 0
                mov     eax, 1
                pop     esi
                retn
sub_10024770    endp

sub_10033240    proc near               ; CODE XREF: sub_10024770+3Bp

arg_0           = dword ptr  4

                mov     eax, [esp+arg_0]
                push    eax
                push    offset byte_10085094
                call    sub_100278C0
                add     esp, 8
                retn
sub_10033240    endp
sub_10033260    proc near               ; CODE XREF: sub_10024770+4Fp

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                mov     ecx, [esp+arg_0]
                mov     eax, [ecx+24h]
                test    eax, eax
                jz      short loc_10033286
                mov     edx, [esp+arg_4]
                push    edx
                push    0
                lea     edx, [esp+8+arg_0]
                push    edx
                push    ecx
                call    eax
                add     esp, 10h
                test    eax, eax
                jz      short loc_10033286
                mov     eax, [esp+arg_0]
                retn
; ---------------------------------------------------------------------------

loc_10033286:                           ; CODE XREF: sub_10033260+9j
                                        ; sub_10033260+1Fj
                push    7Eh
                push    offset a_CryptoEngin_2 ; ".\\crypto\\engine\\tb_cipher.c"
                push    92h
                push    0B9h
                push    26h
                call    ERR_put_error
                add     esp, 14h
                xor     eax, eax
                retn
sub_10033260    endp
sub_10024860    proc near               ; CODE XREF: sub_10024900+D9p

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch
arg_C           = dword ptr  10h

                mov     ecx, [esp+arg_0]
                mov     eax, [ecx]
                test    eax, eax
                jnz     short loc_10024888
                push    168h
                push    offset a_CryptoEvpEnc_ ; ".\\crypto\\evp\\enc_min.c"
                push    83h
                push    7Ch
                push    6
                call    ERR_put_error
                add     esp, 14h
                xor     eax, eax
                retn
; ---------------------------------------------------------------------------

loc_10024888:                           ; CODE XREF: sub_10024860+8j
                mov     eax, [eax+2Ch]
                test    eax, eax
                jnz     short loc_100248AD
                push    16Dh
                push    offset a_CryptoEvpEnc_ ; ".\\crypto\\evp\\enc_min.c"
                push    84h
                push    7Ch
                push    6
                call    ERR_put_error
                add     esp, 14h
                xor     eax, eax
                retn
; ---------------------------------------------------------------------------

loc_100248AD:                           ; CODE XREF: sub_10024860+2Dj
                mov     edx, [esp+arg_C]
                push    edx
                mov     edx, [esp+4+arg_8]
                push    edx
                mov     edx, [esp+8+arg_4]
                push    edx
                push    ecx
                call    eax
                add     esp, 10h
                cmp     eax, 0FFFFFFFFh
                jnz     short locret_100248E4
                push    173h
                push    offset a_CryptoEvpEnc_ ; ".\\crypto\\evp\\enc_min.c"
                push    85h
                push    7Ch
                push    6
                call    ERR_put_error
                add     esp, 14h
                xor     eax, eax

locret_100248E4:                        ; CODE XREF: sub_10024860+65j
                retn
sub_10024860    endp


sub_10011A50    proc near               ; CODE XREF: AskKeyFromNet+8Dp
                                        ; sub_10011B70+86p
                cdq
                and     edx, 0Fh
                add     eax, edx
                sar     eax, 4
                xor     edx, edx
                test    eax, eax
                mov     [esi+8CDCh], eax
                jle     short locret_10011A9F
                lea     eax, [esi+50h]
                push    ebx
                lea     esp, [esp+0]

loc_10011A70:                           ; CODE XREF: sub_10011A50+4Cj
                mov     dword ptr [eax-14h], 2
                mov     ebx, [ecx]
                mov     [eax], ebx
                mov     ebx, [ecx+4]
                mov     [eax+4], ebx
                mov     ebx, [ecx+8]
                mov     [eax+8], ebx
                mov     ebx, [ecx+0Ch]
                mov     [eax+0Ch], ebx
                add     edx, 1
                add     ecx, 10h
                add     eax, 24h
                cmp     edx, [esi+8CDCh]
                jl      short loc_10011A70
                pop     ebx

locret_10011A9F:                        ; CODE XREF: sub_10011A50+13j
                retn
sub_10011A50    endp


sub_100116B0    proc near               ; CODE XREF: AskKeyFromNet+20p

var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                sub     esp, 14h
                mov     eax, [esp+14h+arg_0]
                push    ebx
                push    ebp
                push    esi
                xor     esi, esi
                mov     [eax], esi
                mov     [esp+20h+var_10], 10h
                mov     [esp+20h+var_C], 4
                mov     [esp+20h+var_8], 5
                mov     [esp+20h+var_4], 2
                mov     [esp+20h+var_14], esi
                lea     ebp, [edi+4]

loc_100116E5:                           ; CODE XREF: sub_100116B0+5Cj
                mov     bl, byte ptr [esp+esi*4+20h+var_10]
                lea     ecx, [esp+20h+var_14]
                push    ecx
                mov     edx, ebp
                call    sub_1000EB20
                add     esp, 4
                test    eax, eax
                jz      short loc_10011706
                mov     edx, [esp+20h+var_14]
                mov     eax, [esp+20h+arg_0]
                add     [eax], edx

loc_10011706:                           ; CODE XREF: sub_100116B0+4Aj
                add     esi, 1
                cmp     esi, 4
                jb      short loc_100116E5
                mov     ecx, [edi+8CDCh]
                test    ecx, ecx
                mov     edx, [esp+20h+arg_4]
                pop     esi
                pop     ebp
                mov     dword ptr [edx], 0
                pop     ebx
                jle     short loc_10011738
                lea     eax, [edi+3Ch]

loc_10011728:                           ; CODE XREF: sub_100116B0+86j
                cmp     dword ptr [eax], 1
                jnz     short loc_10011730
                add     dword ptr [edx], 10h

loc_10011730:                           ; CODE XREF: sub_100116B0+7Bj
                add     eax, 24h
                sub     ecx, 1
                jnz     short loc_10011728

loc_10011738:                           ; CODE XREF: sub_100116B0+73j
                mov     eax, [esp+14h+arg_0]
                mov     ecx, [eax]
                mov     edx, [edx]
                lea     eax, [ecx+edx+186Ch]
                add     esp, 14h
                retn
sub_100116B0    endp

sub_100118E0    proc near               ; CODE XREF: AskKeyFromNet+39p

var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
hostlong        = dword ptr  8
arg_8           = dword ptr  0Ch
arg_C           = dword ptr  10h

                sub     esp, 14h
                push    ebx
                push    ebp
                push    esi
                push    edi
                push    eax             ; size_t
                call    crt_malloc
                mov     ecx, ds:dword_10060398
                mov     esi, [esp+28h+arg_C]
                mov     [eax], ecx
                mov     edx, ds:dword_1006039C
                mov     [eax+4], edx
                lea     ebp, [eax+8]
                mov     edi, ebp
                mov     ecx, 12h
                rep movsd
                mov     edi, [esp+28h+arg_0]
                add     ebp, 48h
                mov     [esp+28h+var_14], eax
                mov     eax, [edi+8D04h]
                mov     [ebp+0], eax
                mov     ecx, [edi+8D08h]
                mov     [ebp+4], ecx
                mov     edx, [edi+8D0Ch]
                mov     ecx, [esp+28h+hostlong]
                mov     [ebp+8], edx
                mov     eax, [edi+8D10h]
                add     esp, 4
                mov     [ebp+0Ch], eax
                push    ecx             ; hostlong
                add     ebp, 10h
                call    htonl
                mov     [ebp+0], eax
                add     ebp, 4
                xor     esi, esi
                mov     [esp+24h+var_10], 10h
                mov     [esp+24h+var_C], 4
                mov     [esp+24h+var_8], 5
                mov     [esp+24h+var_4], 2
                mov     [esp+24h+arg_C], esi
                lea     esp, [esp+0]

loc_10011980:                           ; CODE XREF: sub_100118E0+D3j
                mov     bl, byte ptr [esp+esi*4+24h+var_10]
                lea     edx, [esp+24h+arg_C]
                push    edx
                lea     edx, [edi+4]
                call    sub_1000EB20
                add     esp, 4
                test    eax, eax
                jz      loc_10011A36
                mov     ebx, [esp+24h+arg_C]
                push    ebx
                push    eax
                push    ebp
                call    crt_memcpy          ; Microsoft VisualC 2-9/net runtime
                add     esi, 1
                add     esp, 0Ch
                add     ebp, ebx
                cmp     esi, 4
                jb      short loc_10011980
                mov     ecx, [esp+24h+arg_8]
                push    ecx             ; hostlong
                call    htonl
                mov     [ebp+0], eax
                xor     ecx, ecx
                add     ebp, 4
                cmp     [edi+8CDCh], ecx
                jle     short loc_10011A00
                lea     eax, [edi+40h]

loc_100119D2:                           ; CODE XREF: sub_100118E0+11Ej
                cmp     dword ptr [eax-4], 1
                jnz     short loc_100119F2
                mov     edx, [eax]
                mov     [ebp+0], edx
                mov     edx, [eax+4]
                mov     [ebp+4], edx
                mov     edx, [eax+8]
                mov     [ebp+8], edx
                mov     edx, [eax+0Ch]
                mov     [ebp+0Ch], edx
                add     ebp, 10h

loc_100119F2:                           ; CODE XREF: sub_100118E0+F6j
                add     ecx, 1
                add     eax, 24h
                cmp     ecx, [edi+8CDCh]
                jl      short loc_100119D2

loc_10011A00:                           ; CODE XREF: sub_100118E0+EDj
                push    1800h           ; hostlong
                call    htonl
                mov     [ebp+0], eax
                add     ebp, 4
                push    ebp
                mov     ebx, edi
                call    sub_100117F0
                add     esp, 4
                test    eax, eax
                mov     eax, [esp+24h+var_14]
                jnz     short loc_10011A2E
                push    eax             ; void *
                call    crt_free
                add     esp, 4
                xor     eax, eax

loc_10011A2E:                           ; CODE XREF: sub_100118E0+141j
                pop     edi
                pop     esi
                pop     ebp
                pop     ebx
                add     esp, 14h
                retn
; ---------------------------------------------------------------------------

loc_10011A36:                           ; CODE XREF: sub_100118E0+B6j
                mov     eax, [esp+24h+var_14]
                push    eax             ; void *
                call    crt_free
                add     esp, 4
                pop     edi
                pop     esi
                pop     ebp
                xor     eax, eax
                pop     ebx
                add     esp, 14h
                retn
sub_100118E0    endp

sub_100117F0    proc near               ; CODE XREF: sub_100118E0+133p

var_410         = dword ptr -410h
var_40C         = dword ptr -40Ch
var_408         = byte ptr -408h
var_407         = byte ptr -407h
var_4           = dword ptr -4
arg_0           = dword ptr  4

                sub     esp, 414h
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, esp
                mov     [esp+414h+var_4], eax
                mov     eax, [esp+414h+arg_0]
                push    ebp
                push    esi
                push    edi
                push    3FFh            ; size_t
                xor     ebp, ebp
                lea     ecx, [esp+424h+var_407]
                push    ebp             ; int
                push    ecx             ; void *
                mov     [esp+42Ch+var_40C], eax
                mov     [esp+42Ch+var_408], 0
                call    crt_memset
                add     esp, 0Ch
                xor     edi, edi

loc_1001182E:                           ; CODE XREF: sub_100117F0+CDj
                cmp     edi, 64h
                jge     loc_100118C3
                mov     edx, [ebx]
                push    edi
                push    edx
                lea     eax, [esp+428h+var_408]
                push    offset aSBdmvStream05d ; "%s\\BDMV\\STREAM\\%05d.m2ts"
                push    eax             ; char *
                mov     [esp+430h+var_410], 0
                call    crt_sprintf
                lea     ecx, [esp+430h+var_410]
                push    ecx
                mov     ecx, 1800h
                lea     eax, [esp+434h+var_408]
                call    sub_10011750
                mov     esi, [esp+434h+var_410]
                add     esp, 14h
                test    eax, eax
                jle     short loc_100118AB
                cmp     byte ptr [esi+4], 47h
                lea     eax, [esi+4]
                jnz     short loc_10011893
                lea     ecx, [esi+1800h]
                cmp     eax, ecx
                jnb     short loc_100118AB

loc_10011883:                           ; CODE XREF: sub_100117F0+9Fj
                cmp     byte ptr [eax], 47h
                jnz     short loc_10011893
                add     eax, 0C0h
                cmp     eax, ecx
                jb      short loc_10011883
                jmp     short loc_100118AB
; ---------------------------------------------------------------------------

loc_10011893:                           ; CODE XREF: sub_100117F0+87j
                                        ; sub_100117F0+96j
                mov     edx, [esp+420h+var_40C]
                push    1800h
                push    esi
                push    edx
                call    crt_memcpy          ; Microsoft VisualC 2-9/net runtime
                add     esp, 0Ch
                mov     ebp, 1800h

loc_100118AB:                           ; CODE XREF: sub_100117F0+7Ej
                                        ; sub_100117F0+91j ...
                test    esi, esi
                jz      short loc_100118B8
                push    esi             ; void *
                call    crt_free
                add     esp, 4

loc_100118B8:                           ; CODE XREF: sub_100117F0+BDj
                add     edi, 1
                test    ebp, ebp
                jz      loc_1001182E

loc_100118C3:                           ; CODE XREF: sub_100117F0+41j
                mov     ecx, [esp+420h+var_4]
                pop     edi
                pop     esi
                mov     eax, ebp
                pop     ebp
                xor     ecx, esp
                call    f_check_gs_failure
                add     esp, 414h
                retn
sub_100117F0    endp

; ------------------------------------------------------------------------

sub_1004BE66    proc near               ; DATA XREF: calculate_volume_id_mac+2o

arg_4           = dword ptr  8

                mov     edx, [esp+arg_4]
                lea     eax, [edx-220h]
                mov     ecx, [edx-224h]
                xor     ecx, eax
                call    f_check_gs_failure
                mov     eax, offset unk_10061490
                jmp     ___CxxFrameHandler3
sub_1004BE66    endp

 
; signed int __usercall calculate_volume_id_mac<eax>(int this<ecx>, int esi0<esi>, int volume_id, int len, int volume_id_mac)
calculate_volume_id_mac proc near       ; CODE XREF: DecryptTitleKey+4Fp
                                        ; volume_get_+456p ...

var_228         = dword ptr -228h
mac             = dword ptr -224h
var_21C         = qword ptr -21Ch
var_20C         = dword ptr -20Ch
var_200         = dword ptr -200h
var_1FC         = dword ptr -1FCh
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
volume_id       = dword ptr  4
len             = dword ptr  8
volume_id_mac   = dword ptr  0Ch

                push    0FFFFFFFFh
                push    offset sub_1004BE66
                mov     eax,  fs:0
                push    eax
                sub     esp, 21Ch
                push    ebx
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                push    eax
                lea     eax, [esp+230h+var_C]
                mov      fs:0, eax
                mov     [esp+230h+var_1FC], offset ??_7AES@@6B@ ; const AES::`vftable'
                mov     eax, 80h
                lea     ebx, [esp+230h+var_1FC]
                mov     [esp+230h+var_4], 0
                call    AES__ExpandKey
                lea     eax, [esp+230h+mac]
                push    eax
                mov     ecx, ebx
                call    ??0CMAC@@QAE@XZ ; CMAC::CMAC(void)
                lea     ecx, [esp+230h+mac]
                mov     byte ptr [esp+230h+var_4], 1
                call    CMAC__init
                mov     ecx, [esp+230h+len]
                mov     edx, [esp+230h+volume_id]
                push    0
                push    ecx
                push    edx
                lea     ecx, [esp+23Ch+mac]
                call    CMAC__update
                push    0               ; aad
                lea     ecx, [esp+234h+mac] ; this
                call    CMAC__finish
                mov     eax, [esp+230h+var_20C]
                cmp     eax, 0FFFFFFFFh
                jnz     short loc_1000B38E
                push    offset unk_10061444
                lea     eax, [esp+234h+var_228]
                push    eax
                mov     [esp+238h+var_228], offset aWrongOrderOfOp ; "wrong order of operations"
                call    __CxxThrowException@8 ; _CxxThrowException(x,x)
; ---------------------------------------------------------------------------

loc_1000B38E:                           ; CODE XREF: calculate_volume_id_mac+95j
                test    eax, eax
                jnz     short loc_1000B3A0
                mov     edx, [esp+230h+mac]
                push    eax
                mov     eax, [edx+10h]
                lea     ecx, [esp+234h+mac]
                call    eax

loc_1000B3A0:                           ; CODE XREF: calculate_volume_id_mac+B0j
                mov     eax, dword ptr [esp+230h+var_21C]
                cmp     eax, 10h
                jbe     short loc_1000B3AE
                mov     eax, 10h

loc_1000B3AE:                           ; CODE XREF: calculate_volume_id_mac+C7j
                mov     ecx, [esp+230h+var_200]
                mov     edx, [esp+230h+volume_id_mac]
                push    eax             ; size_t
                push    ecx             ; void *
                push    edx             ; void *
                call    crt_memmove         ; Microsoft VisualC 2-9/net runtime
                add     esp, 0Ch
                lea     ecx, [esp+230h+mac]
                call    ??1CMAC@@UAE@XZ ; CMAC::~CMAC(void)
                mov     eax, 1
                mov     ecx, [esp+230h+var_C]
                mov      fs:0, ecx
                pop     ecx
                pop     ebx
                add     esp, 228h
                retn
calculate_volume_id_mac endp


sub_1000B130    proc near   
int 3;
sub_1000B130        endp 
unknown_libname_46 proc near 
int 3;
unknown_libname_46      endp 
 
 sub_10024ED0    proc near               ; CODE XREF: BF_cbc_encrypt+5Ep
                                        ; BF_cbc_encrypt+E1p ...

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                push    ebp
                push    ebx
                mov     ebx, [esp+8+arg_0]
                mov     ebp, [esp+8+arg_4]
                push    esi
                push    edi
                mov     edi, [ebx]
                mov     esi, [ebx+4]
                xor     eax, eax
                mov     ebx, [ebp+0]
                xor     ecx, ecx
                xor     edi, ebx
                mov     edx, [ebp+4]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+8]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     edi, ebx
                mov     edx, [ebp+0Ch]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+10h]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     edi, ebx
                mov     edx, [ebp+14h]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+18h]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     edi, ebx
                mov     edx, [ebp+1Ch]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+20h]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     edi, ebx
                mov     edx, [ebp+24h]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+28h]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     edi, ebx
                mov     edx, [ebp+2Ch]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+30h]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     edi, ebx
                mov     edx, [ebp+34h]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+38h]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     edi, ebx
                mov     edx, [ebp+3Ch]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+40h]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                mov     eax, [esp+10h+arg_0]
                xor     edi, ebx
                mov     edx, [ebp+44h]
                xor     esi, edx
                mov     [eax+4], edi
                mov     [eax], esi
                pop     edi
                pop     esi
                pop     ebx
                pop     ebp
                retn
sub_10024ED0    endp




; =============== S U B R O U T I N E =======================================

sub_10008430    proc near               ; DATA XREF: sub_100084D0+29o

arg_0           = dword ptr  4

                push    esi
                mov     esi, [esp+4+arg_0]
                test    esi, esi
                jz      short loc_1000844A
                mov     eax, [esi]
                push    eax             ; FILE *
                call    crt_fclose
                push    esi             ; void *
                call    crt_free
                add     esp, 8

loc_1000844A:                           ; CODE XREF: sub_10008430+7j
                pop     esi
                retn
sub_10008430    endp



sub_10008450    proc near               ; DATA XREF: sub_100084D0+30o

arg_0           = dword ptr  4
Offset_a          = qword ptr  8
Origin          = dword ptr  10h

                mov     eax, [esp+Origin]
                mov     ecx, dword ptr [esp+Offset_a+4]
                mov     edx, dword ptr [esp+Offset_a]
                push    eax             ; Origin
                mov     eax, [esp+4+arg_0]
                push    ecx
                mov     ecx, [eax]
                ;push    edx             ; Offset
                push    ecx             ; File
                call    crt_fseek;----crt_fseek;--------instead crt_fseeki64
                add     esp, 0Ch;  0Ch----10h
                cdq
                retn
sub_10008450    endp


; =============== S U B R O U T I N E =======================================


sub_10008470    proc near               ; DATA XREF: sub_100084D0+45o

arg_0           = dword ptr  4

                mov     eax, [esp+arg_0]
                mov     ecx, [eax]
                mov     [esp+arg_0], ecx
                jmp     crt_ftell;----------crt_ftelli64
sub_10008470    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10008480    proc near               ; DATA XREF: sub_100084D0+4Co

arg_0           = dword ptr  4

                mov     eax, [esp+arg_0]
                mov     ecx, [eax]
                mov     [esp+arg_0], ecx
                jmp     crt_feof
sub_10008480    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_10008490    proc near               ; DATA XREF: sub_100084D0+37o

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                mov     eax, [esp+arg_0]
                mov     ecx, [eax]
                mov     edx, [esp+arg_8]
                mov     eax, [esp+arg_4]
                push    ecx             ; FILE *
                push    edx             ; size_t
                push    1               ; size_t
                push    eax             ; void *
                call    crt_fread          ; --------------------read key
                add     esp, 10h
                retn
sub_10008490    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


sub_100084B0    proc near               ; DATA XREF: sub_100084D0+3Eo

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                mov     eax, [esp+arg_0]
                mov     ecx, [eax]
                mov     edx, [esp+arg_8]
                mov     eax, [esp+arg_4]
                push    ecx             ; FILE *
                push    edx             ; size_t
                push    1               ; size_t
                push    eax             ; void *
                call    crt_fwrite
                add     esp, 10h
                retn
sub_100084B0    endp
__alloca_probe  proc near               ; CODE XREF: sub_10002E10+5p
                                        ; sub_10002F50+5p ...
                push    ecx
                lea     ecx, [esp+4]
                sub     ecx, eax
                sbb     eax, eax
                not     eax
                and     ecx, eax
                mov     eax, esp
                and     eax, 0FFFFF000h

cs10:                                   ; CODE XREF: __alloca_probe+29j
                cmp     ecx, eax
                jb      short cs20
                mov     eax, ecx
                pop     ecx
                xchg    eax, esp
                mov     eax, [eax]
                mov     [esp+0], eax
                retn
; ---------------------------------------------------------------------------

cs20:                                   ; CODE XREF: __alloca_probe+16j
                sub     eax, 1000h
                test    [eax], eax
                jmp     short cs10
__alloca_probe  endp

sub_100278C0    proc near               ; CODE XREF: sub_100184E0+Ap
                                        ; sub_100278A0+7p ...

var_10          = dword ptr -10h
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                mov     eax, 10h
                call    __alloca_probe
                push    esi
                push    edi
                mov     edi, [esp+18h+arg_0]
                xor     esi, esi
                cmp     [edi], esi
                jnz     short loc_100278DE
                pop     edi
                xor     eax, eax
                pop     esi
                add     esp, 10h
                retn
; ---------------------------------------------------------------------------

loc_100278DE:                           ; CODE XREF: sub_100278C0+14j
                call    sub_10017760
                push    0F1h
                push    offset a_CryptoEngin_0 ; ".\\crypto\\engine\\eng_table.c"
                push    1Eh
                push    9
                call    sub_100187A0
                mov     eax, [edi]
                add     esp, 10h
                test    eax, eax
                jz      loc_100279C1
                mov     ecx, [esp+18h+arg_4]
                lea     edx, [esp+18h+var_10]
                push    edx
                push    eax
                mov     [esp+20h+var_10], ecx
                call    sub_1002BEF0
                mov     edi, eax
                add     esp, 8
                test    edi, edi
                jz      loc_100279C1
                mov     eax, [edi+8]
                test    eax, eax
                jz      short loc_1002793C
                push    eax
                call    sub_10018550
                add     esp, 4
                test    eax, eax
                jz      short loc_1002793C

loc_10027937:                           ; CODE XREF: sub_100278C0+7Fj
                mov     esi, [edi+8]
                jmp      loc_100279BA
; ---------------------------------------------------------------------------

loc_1002793C:                           ; CODE XREF: sub_100278C0+68j
                                        ; sub_100278C0+75j
                cmp     [edi+0Ch], esi
                jnz     short loc_10027937
                mov     eax, [edi+4]
                push    ebp
                push    0
                push    eax
                call    sub_1002C990
                mov     esi, eax
                add     esp, 8
                mov     ebp, 1
                test    esi, esi
                jz      short loc_100279B9
                jmp     short loc_10027960
; ---------------------------------------------------------------------------
                align 10h

loc_10027960:                           ; CODE XREF: sub_100278C0+9Bj
                                        ; sub_100278C0+CEj
                cmp     dword ptr [esi+54h], 0
                jg      short loc_1002796F
                test    byte_10085074, 1
                jnz     short loc_1002797C

loc_1002796F:                           ; CODE XREF: sub_100278C0+A4j
                push    esi
                call    sub_10018550
                add     esp, 4
                test    eax, eax
                jnz     short loc_10027992

loc_1002797C:                           ; CODE XREF: sub_100278C0+ADj
                mov     ecx, [edi+4]
                push    ebp
                push    ecx
                call    sub_1002C990
                mov     esi, eax
                add     esp, 8
                inc     ebp
                test    esi, esi
                jnz     short loc_10027960
                jmp     short loc_100279B9
; ---------------------------------------------------------------------------

loc_10027992:                           ; CODE XREF: sub_100278C0+BAj
                cmp     [edi+8], esi
                jz      short loc_100279B9
                push    esi
                call    sub_10018550
                add     esp, 4
                test    eax, eax
                jz      short loc_100279B9
                mov     eax, [edi+8]
                test    eax, eax
                jz      short loc_100279B6
                push    0               ; int
                push    eax             ; void *
                call    sub_10018580
                add     esp, 8

loc_100279B6:                           ; CODE XREF: sub_100278C0+E9j
                mov     [edi+8], esi

loc_100279B9:                           ; CODE XREF: sub_100278C0+99j
                                        ; sub_100278C0+D0j ...
                pop     ebp

loc_100279BA:                           ; CODE XREF: sub_100278C0+7Aj
                mov     dword ptr [edi+0Ch], 1

loc_100279C1:                           ; CODE XREF: sub_100278C0+3Dj
                                        ; sub_100278C0+5Dj
                push    137h
                push    offset a_CryptoEngin_0 ; ".\\crypto\\engine\\eng_table.c"
                push    1Eh
                push    0Ah
                call    sub_100187A0
                add     esp, 10h
                call    sub_10017790
                pop     edi
                mov     eax, esi
                pop     esi
                add     esp, 10h
                retn
sub_100278C0    endp

sub_10017760    proc near               ; CODE XREF: sub_100278C0:loc_100278DEp
                call    ERR_get_state
                mov     ecx, [eax+188h]
                cmp     ecx, [eax+184h]
                jnz     short loc_10017776
                xor     eax, eax
                retn
; ---------------------------------------------------------------------------

loc_10017776:                           ; CODE XREF: sub_10017760+11j
                mov     edx, [eax+184h]
                or      dword ptr [eax+edx*4+4], 1
                lea     eax, [eax+edx*4+4]
                mov     eax, 1
                retn
sub_10017760    endp

sub_1002BEF0    proc near               ; CODE XREF: sub_1001F4C0+78p
                                        ; sub_1001F6E0+88p ...

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                mov     ecx, [esp+arg_4]
                push    esi
                mov     esi, [esp+4+arg_0]
                lea     eax, [esp+4+arg_0]
                push    eax
                push    ecx
                mov     dword ptr [esi+5Ch], 0
                call    sub_1002BC40
                mov     eax, [eax]
                add     esp, 8
                test    eax, eax
                jnz     short loc_1002BF19
                inc     dword ptr [esi+54h]
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_1002BF19:                           ; CODE XREF: sub_1002BEF0+22j
                mov     eax, [eax]
                inc     dword ptr [esi+50h]
                pop     esi
                retn
sub_1002BEF0    endp

sub_10018550    proc near               ; CODE XREF: sub_100278C0+6Bp
                                        ; sub_100278C0+B0p ...

arg_0           = dword ptr  4

                push    esi
                mov     esi, [esp+4+arg_0]
                cmp     dword ptr [esi+54h], 0
                mov     eax, 1
                jnz     short loc_10018571
                mov     ecx, [esi+30h]
                test    ecx, ecx
                jz      short loc_10018571
                push    esi
                call    ecx
                add     esp, 4
                test    eax, eax
                jz      short loc_10018577

loc_10018571:                           ; CODE XREF: sub_10018550+Ej
                                        ; sub_10018550+15j
                inc     dword ptr [esi+50h]
                inc     dword ptr [esi+54h]

loc_10018577:                           ; CODE XREF: sub_10018550+1Fj
                pop     esi
                retn
sub_10018550    endp
sub_1002C990    proc near               ; CODE XREF: sub_10021610+113p
                                        ; sub_10021F20+A2p ...

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                mov     ecx, [esp+arg_0]
                test    ecx, ecx
                jz      short loc_1002C9AB
                mov     eax, [esp+arg_4]
                test    eax, eax
                jl      short loc_1002C9AB
                cmp     eax, [ecx]
                jge     short loc_1002C9AB
                mov     ecx, [ecx+4]
                mov     eax, [ecx+eax*4]
                retn
; ---------------------------------------------------------------------------

loc_1002C9AB:                           ; CODE XREF: sub_1002C990+6j
                                        ; sub_1002C990+Ej ...
                xor     eax, eax
                retn
sub_1002C990    endp
sub_10017790    proc near               ; CODE XREF: sub_100278C0+117p
                push    esi
                call    ERR_get_state
                mov     esi, eax
                mov     eax, [esi+188h]
                cmp     eax, [esi+184h]
                jz      loc_1001785B
                push    ebp
                push    edi
                xor     edi, edi
                or      ebp, 0FFFFFFFFh

loc_100177B1:                           ; CODE XREF: sub_10017790+C3j
                mov     ecx, [esi+184h]
                test    byte ptr [esi+ecx*4+4], 1
                lea     eax, [esi+ecx*4+4]
                jnz     loc_10017859
                mov     [eax], edi
                mov     edx, [esi+184h]
                mov     [esi+edx*4+44h], edi
                mov     eax, [esi+184h]
                cmp     [esi+eax*4+84h], edi
                jz      short loc_10017808
                test    byte ptr [esi+eax*4+0C4h], 1
                jz      short loc_10017808
                mov     eax, [esi+eax*4+84h]
                push    eax             ; void *
                call    CRYPTO_free
                mov     ecx, [esi+184h]
                add     esp, 4
                mov     [esi+ecx*4+84h], edi

loc_10017808:                           ; CODE XREF: sub_10017790+4Fj
                                        ; sub_10017790+59j
                mov     edx, [esi+184h]
                mov     [esi+edx*4+0C4h], edi
                mov     eax, [esi+184h]
                mov     [esi+eax*4+104h], edi
                mov     ecx, [esi+184h]
                mov     [esi+ecx*4+144h], ebp
                add     [esi+184h], ebp
                cmp     [esi+184h], ebp
                jnz     short loc_10017847
                mov     dword ptr [esi+184h], 0Fh

loc_10017847:                           ; CODE XREF: sub_10017790+ABj
                mov     edx, [esi+188h]
                cmp     edx, [esi+184h]
                jnz     loc_100177B1

loc_10017859:                           ; CODE XREF: sub_10017790+30j
                pop     edi
                pop     ebp

loc_1001785B:                           ; CODE XREF: sub_10017790+14j
                mov     eax, [esi+184h]
                cmp     [esi+188h], eax
                jnz     short loc_1001786D
                xor     eax, eax
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_1001786D:                           ; CODE XREF: sub_10017790+D7j
                and     dword ptr [esi+eax*4+4], 0FFFFFFFEh
                mov     eax, 1
                pop     esi
                retn
sub_10017790    endp
sub_1002BC40    proc near               ; CODE XREF: sub_1002BDF0+2Fp
                                        ; sub_1002BE80+16p ...

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                mov     eax, [esp+arg_0]
                mov     ecx, [esi+8]
                push    ebx
                push    ebp
                push    edi
                push    eax
                call    ecx
                mov     edx, [esp+10h+arg_4]
                mov     ebp, eax
                mov     ecx, 1
                add     [esi+38h], ecx
                mov     [edx], ebp
                xor     edx, edx
                div     dword ptr [esi+18h]
                add     esp, 4
                cmp     edx, [esi+14h]
                jnb     short loc_1002BC71
                mov     eax, ebp
                xor     edx, edx
                div     dword ptr [esi+10h]

loc_1002BC71:                           ; CODE XREF: sub_1002BC40+28j
                mov     eax, [esi+4]
                mov     [esp+0Ch+arg_4], eax
                mov     eax, [esi]
                mov     edi, [eax+edx*4]
                lea     ebx, [eax+edx*4]
                test    edi, edi
                jz      short loc_1002BCB2

loc_1002BC84:                           ; CODE XREF: sub_1002BC40+70j
                add     [esi+58h], ecx
                cmp     [edi+8], ebp
                jnz     short loc_1002BCA7
                add     [esi+3Ch], ecx
                mov     ecx, [esp+0Ch+arg_0]
                mov     edx, [edi]
                push    ecx
                push    edx
                call    [esp+14h+arg_4]
                add     esp, 8
                test    eax, eax
                jz      short loc_1002BCB2
                mov     ecx, 1

loc_1002BCA7:                           ; CODE XREF: sub_1002BC40+4Aj
                lea     eax, [edi+4]
                mov     edi, [eax]
                mov     ebx, eax
                test    edi, edi
                jnz     short loc_1002BC84

loc_1002BCB2:                           ; CODE XREF: sub_1002BC40+42j
                                        ; sub_1002BC40+60j
                pop     edi
                pop     ebp
                mov     eax, ebx
                pop     ebx
                retn
sub_1002BC40    endp

; int __cdecl sub_10018580(void *, int)
sub_10018580    proc near               ; CODE XREF: sub_100278C0+EEp

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                push    esi
                mov     esi, [esp+4+arg_0]
                add     dword ptr [esi+54h], 0FFFFFFFFh
                push    edi
                mov     edi, 1
                jnz     short loc_100185DA
                cmp     dword ptr [esi+34h], 0
                jz      short loc_100185DA
                push    ebx
                mov     ebx, [esp+0Ch+arg_4]
                test    ebx, ebx
                jz      short loc_100185B3
                push    61h
                push    offset a_CryptoEngineE ; ".\\crypto\\engine\\eng_init.c"
                push    1Eh
                push    0Ah
                call    sub_100187A0
                add     esp, 10h

loc_100185B3:                           ; CODE XREF: sub_10018580+1Ej
                mov     eax, [esi+34h]
                push    esi
                call    eax
                add     esp, 4
                test    ebx, ebx
                mov     edi, eax
                pop     ebx
                jz      short loc_100185D6
                push    64h
                push    offset a_CryptoEngineE ; ".\\crypto\\engine\\eng_init.c"
                push    1Eh
                push    9
                call    sub_100187A0
                add     esp, 10h

loc_100185D6:                           ; CODE XREF: sub_10018580+41j
                test    edi, edi
                jz      short loc_10018601

loc_100185DA:                           ; CODE XREF: sub_10018580+Fj
                                        ; sub_10018580+15j
                push    0               ; int
                push    esi             ; void *
                call    sub_100279F0
                add     esp, 8
                test    eax, eax
                jnz     short loc_10018606
                push    72h
                push    offset a_CryptoEngineE ; ".\\crypto\\engine\\eng_init.c"
                push    6Ah
                push    0BFh
                push    26h
                call    ERR_put_error
                add     esp, 14h

loc_10018601:                           ; CODE XREF: sub_10018580+58j
                pop     edi
                xor     eax, eax
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_10018606:                           ; CODE XREF: sub_10018580+67j
                mov     eax, edi
                pop     edi
                pop     esi
                retn
sub_10018580    endp

sub_10015160    proc near               ; DATA XREF: .rdata:1004D418o

arg_0           = dword ptr  4

; FUNCTION CHUNK AT .text:1001D6A0 SIZE 0000002E BYTES

                mov     eax, [esp+arg_0]
                mov     ecx, [eax+0Ch]
                mov     [esp+arg_0], ecx
                jmp     loc_1001D6A0
sub_10015160    endp


; =============== S U B R O U T I N E =======================================


sub_10015170    proc near               ; DATA XREF: .rdata:1004D41Co

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

; FUNCTION CHUNK AT .text:1001D490 SIZE 000000DD BYTES

                mov     edx, [esp+arg_0]
                mov     eax, [edx+0Ch]
                mov     [esp+arg_0], eax
                jmp     loc_1001D490
sub_10015170    endp


; =============== S U B R O U T I N E =======================================


sub_10015180    proc near               ; DATA XREF: .rdata:1004D420o

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                mov     eax, [esp+arg_0]
                mov     ecx, [eax+0Ch]
                mov     edx, [esp+arg_4]
                push    ecx
                push    edx
                call    sub_1001D570
                add     esp, 8
                retn
sub_10015180    endp

loc_1001D6A0:                           ; CODE XREF: sub_10015160+Bj
                mov     eax, [esp+arg_0]
                xor     ecx, ecx
                mov     dword ptr [eax], 67452301h
                mov     dword ptr [eax+4], 0EFCDAB89h
                mov     dword ptr [eax+8], 98BADCFEh
                mov     dword ptr [eax+0Ch], 10325476h
                mov     [eax+10h], ecx
                mov     [eax+14h], ecx
                mov     [eax+58h], ecx
                lea     eax, [ecx+1]
                retn
loc_1001D490:                           ; CODE XREF: sub_10015170+Bj
                mov     edx, [esp+arg_4]
                push    ebp
                push    edi
                mov     edi, [esp+8+arg_8]
                mov     ebp, edx
                test    edi, edi
                jz      loc_1001D565
                push    esi
                mov     esi, [esp+0Ch+arg_0]
                mov     eax, [esi+10h]
                lea     ecx, [eax+edi*8]
                cmp     ecx, eax
                jnb     short loc_1001D4B6
                inc     dword ptr [esi+14h]

loc_1001D4B6:                           ; CODE XREF: sub_10015170+8341j
                mov     eax, edi
                shr     eax, 1Dh
                add     [esi+14h], eax
                mov     eax, [esi+58h]
                push    ebx
                mov     [esi+10h], ecx
                test    eax, eax
                jz      short loc_1001D533
                lea     ebp, [esi+18h]
                cmp     edi, 40h
                jnb     short loc_1001D4F3
                lea     ecx, [eax+edi]
                cmp     ecx, 40h
                jnb     short loc_1001D4F3
                push    edi
                push    edx
                add     ebp, eax
                push    ebp
                call    crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                add     esp, 0Ch
                add     [esi+58h], edi
                pop     ebx
                pop     esi
                pop     edi
                mov     eax, 1
                pop     ebp
                retn
; ---------------------------------------------------------------------------

loc_1001D4F3:                           ; CODE XREF: sub_10015170+835Fj
                                        ; sub_10015170+8367j
                mov     ebx, 40h
                sub     ebx, eax
                push    ebx
                push    edx
                lea     edx, [eax+ebp]
                push    edx
                call    crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                push    1
                push    ebp
                push    esi
                call    sub_100284F0
                mov     eax, [esp+28h+arg_4]
                push    40h             ; size_t
                lea     ecx, [ebx+eax]
                push    0               ; int
                push    ebp             ; void *
                mov     [esp+34h+arg_4], ecx
                sub     edi, ebx
                mov     dword ptr [esi+58h], 0
                call    crt_memset
                mov     ebp, [esp+34h+arg_4]
                add     esp, 24h

loc_1001D533:                           ; CODE XREF: sub_10015170+8357j
                mov     ebx, edi
                shr     ebx, 6
                test    ebx, ebx
                jbe     short loc_1001D54E
                push    ebx
                push    ebp
                push    esi
                call    sub_100284F0
                shl     ebx, 6
                add     esp, 0Ch
                add     ebp, ebx
                sub     edi, ebx

loc_1001D54E:                           ; CODE XREF: sub_10015170+83CAj
                test    edi, edi
                jz      short loc_1001D563
                push    edi
                mov     [esi+58h], edi
                push    ebp
                add     esi, 18h
                push    esi
                call    crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                add     esp, 0Ch

loc_1001D563:                           ; CODE XREF: sub_10015170+83E0j
                pop     ebx
                pop     esi

loc_1001D565:                           ; CODE XREF: sub_10015170+832Ej
                pop     edi
                mov     eax, 1
                pop     ebp
                retn
; END OF FUNCTION CHUNK FOR sub_10015170
sub_1001D570    proc near               ; CODE XREF: sub_10015180+Dp

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                push    ebx
                push    esi
                push    edi
                mov     edi, [esp+0Ch+arg_4]
                mov     ebx, [edi+58h]
                lea     esi, [edi+18h]
                mov     byte ptr [ebx+esi], 80h
                inc     ebx
                cmp     ebx, 38h
                jbe     short loc_1001D5A7
                mov     eax, 40h
                sub     eax, ebx
                push    eax             ; size_t
                push    0               ; int
                add     ebx, esi
                push    ebx             ; void *
                call    crt_memset
                push    1
                push    esi
                push    edi
                xor     ebx, ebx
                call    sub_100284F0
                add     esp, 18h

loc_1001D5A7:                           ; CODE XREF: sub_1001D570+15j
                mov     ecx, 38h
                sub     ecx, ebx
                push    ecx             ; size_t
                push    0               ; int
                add     ebx, esi
                push    ebx             ; void *
                call    crt_memset
                movzx   edx, byte ptr [edi+10h]
                mov     [esi+38h], dl
                movzx   eax, byte ptr [edi+11h]
                add     esi, 38h
                mov     [esi+1], al
                movzx   ecx, byte ptr [edi+12h]
                inc     esi
                mov     [esi+1], cl
                movzx   edx, byte ptr [edi+13h]
                inc     esi
                mov     [esi+1], dl
                movzx   eax, byte ptr [edi+14h]
                inc     esi
                mov     [esi+1], al
                movzx   ecx, byte ptr [edi+15h]
                inc     esi
                mov     [esi+1], cl
                movzx   edx, byte ptr [edi+16h]
                inc     esi
                inc     esi
                mov     [esi], dl
                movzx   eax, byte ptr [edi+17h]
                inc     esi
                mov     [esi], al
                push    1
                sub     esi, 3Fh
                push    esi
                push    edi
                call    sub_100284F0
                push    40h             ; size_t
                push    0               ; int
                push    esi             ; void *
                mov     dword ptr [edi+58h], 0
                call    crt_memset
                mov     ecx, [edi]
                mov     eax, [esp+30h+arg_0]
                mov     [eax], cl
                inc     eax
                mov     edx, ecx
                shr     edx, 8
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                shr     edx, 10h
                mov     [eax], dl
                inc     eax
                shr     ecx, 18h
                mov     [eax], cl
                mov     ecx, [edi+4]
                mov     [eax+1], cl
                inc     eax
                inc     eax
                mov     edx, ecx
                shr     edx, 8
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                shr     edx, 10h
                mov     [eax], dl
                inc     eax
                shr     ecx, 18h
                mov     [eax], cl
                mov     ecx, [edi+8]
                inc     eax
                mov     [eax], cl
                inc     eax
                mov     edx, ecx
                shr     edx, 8
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                add     esp, 24h
                shr     edx, 10h
                mov     [eax], dl
                inc     eax
                shr     ecx, 18h
                mov     [eax], cl
                mov     ecx, [edi+0Ch]
                mov     [eax+1], cl
                inc     eax
                mov     edx, ecx
                inc     eax
                shr     edx, 8
                mov     [eax], dl
                mov     edx, ecx
                inc     eax
                pop     edi
                shr     edx, 10h
                mov     [eax], dl
                shr     ecx, 18h
                pop     esi
                mov     [eax+1], cl
                mov     eax, 1
                pop     ebx
                retn
sub_1001D570    endp

sub_100284F0    proc near               ; CODE XREF: sub_10015170+8399p
                                        ; sub_10015170+83CFp ...

var_14          = dword ptr -14h
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                push    esi
                push    edi
                mov     edi, [esp+8+arg_0]
                mov     esi, [esp+8+arg_4]
                mov     ecx, [esp+8+arg_8]
                push    ebp
                shl     ecx, 6
                push    ebx
                add     ecx, esi
                sub     ecx, 40h
                mov     eax, [edi]
                push    ecx
                mov     ebx, [edi+4]
                mov     ecx, [edi+8]
                mov     edx, [edi+0Ch]

loc_10028517:                           ; CODE XREF: sub_100284F0+6A2j
                mov     edi, ecx
                mov     ebp, [esi]
                xor     edi, edx
                and     edi, ebx
                lea     eax, [eax+ebp-28955B88h]
                xor     edi, edx
                add     eax, edi
                mov     edi, ebx
                rol     eax, 7
                mov     ebp, [esi+4]
                add     eax, ebx
                xor     edi, ecx
                and     edi, eax
                lea     edx, [edx+ebp-173848AAh]
                xor     edi, ecx
                add     edx, edi
                mov     edi, eax
                rol     edx, 0Ch
                mov     ebp, [esi+8]
                add     edx, eax
                xor     edi, ebx
                and     edi, edx
                lea     ecx, [ecx+ebp+242070DBh]
                xor     edi, ebx
                add     ecx, edi
                mov     edi, edx
                rol     ecx, 11h
                mov     ebp, [esi+0Ch]
                add     ecx, edx
                xor     edi, eax
                and     edi, ecx
                lea     ebx, [ebx+ebp-3E423112h]
                xor     edi, eax
                add     ebx, edi
                mov     edi, ecx
                rol     ebx, 16h
                mov     ebp, [esi+10h]
                add     ebx, ecx
                xor     edi, edx
                and     edi, ebx
                lea     eax, [eax+ebp-0A83F051h]
                xor     edi, edx
                add     eax, edi
                mov     edi, ebx
                rol     eax, 7
                mov     ebp, [esi+14h]
                add     eax, ebx
                xor     edi, ecx
                and     edi, eax
                lea     edx, [edx+ebp+4787C62Ah]
                xor     edi, ecx
                add     edx, edi
                mov     edi, eax
                rol     edx, 0Ch
                mov     ebp, [esi+18h]
                add     edx, eax
                xor     edi, ebx
                and     edi, edx
                lea     ecx, [ecx+ebp-57CFB9EDh]
                xor     edi, ebx
                add     ecx, edi
                mov     edi, edx
                rol     ecx, 11h
                mov     ebp, [esi+1Ch]
                add     ecx, edx
                xor     edi, eax
                and     edi, ecx
                lea     ebx, [ebx+ebp-2B96AFFh]
                xor     edi, eax
                add     ebx, edi
                mov     edi, ecx
                rol     ebx, 16h
                mov     ebp, [esi+20h]
                add     ebx, ecx
                xor     edi, edx
                and     edi, ebx
                lea     eax, [eax+ebp+698098D8h]
                xor     edi, edx
                add     eax, edi
                mov     edi, ebx
                rol     eax, 7
                mov     ebp, [esi+24h]
                add     eax, ebx
                xor     edi, ecx
                and     edi, eax
                lea     edx, [edx+ebp-74BB0851h]
                xor     edi, ecx
                add     edx, edi
                mov     edi, eax
                rol     edx, 0Ch
                mov     ebp, [esi+28h]
                add     edx, eax
                xor     edi, ebx
                and     edi, edx
                lea     ecx, [ecx+ebp-0A44Fh]
                xor     edi, ebx
                add     ecx, edi
                mov     edi, edx
                rol     ecx, 11h
                mov     ebp, [esi+2Ch]
                add     ecx, edx
                xor     edi, eax
                and     edi, ecx
                lea     ebx, [ebx+ebp-76A32842h]
                xor     edi, eax
                add     ebx, edi
                mov     edi, ecx
                rol     ebx, 16h
                mov     ebp, [esi+30h]
                add     ebx, ecx
                xor     edi, edx
                and     edi, ebx
                lea     eax, [eax+ebp+6B901122h]
                xor     edi, edx
                add     eax, edi
                mov     edi, ebx
                rol     eax, 7
                mov     ebp, [esi+34h]
                add     eax, ebx
                xor     edi, ecx
                and     edi, eax
                lea     edx, [edx+ebp-2678E6Dh]
                xor     edi, ecx
                add     edx, edi
                mov     edi, eax
                rol     edx, 0Ch
                mov     ebp, [esi+38h]
                add     edx, eax
                xor     edi, ebx
                and     edi, edx
                lea     ecx, [ecx+ebp-5986BC72h]
                xor     edi, ebx
                add     ecx, edi
                mov     edi, edx
                rol     ecx, 11h
                mov     ebp, [esi+3Ch]
                add     ecx, edx
                xor     edi, eax
                and     edi, ecx
                lea     ebx, [ebx+ebp+49B40821h]
                xor     edi, eax
                add     ebx, edi
                mov     edi, ecx
                rol     ebx, 16h
                mov     ebp, [esi+4]
                add     ebx, ecx
                lea     eax, [eax+ebp-9E1DA9Eh]
                xor     edi, ebx
                and     edi, edx
                mov     ebp, [esi+18h]
                xor     edi, ecx
                add     eax, edi
                mov     edi, ebx
                rol     eax, 5
                add     eax, ebx
                lea     edx, [edx+ebp-3FBF4CC0h]
                xor     edi, eax
                and     edi, ecx
                mov     ebp, [esi+2Ch]
                xor     edi, ebx
                add     edx, edi
                mov     edi, eax
                rol     edx, 9
                add     edx, eax
                lea     ecx, [ecx+ebp+265E5A51h]
                xor     edi, edx
                and     edi, ebx
                mov     ebp, [esi]
                xor     edi, eax
                add     ecx, edi
                mov     edi, edx
                rol     ecx, 0Eh
                add     ecx, edx
                lea     ebx, [ebx+ebp-16493856h]
                xor     edi, ecx
                and     edi, eax
                mov     ebp, [esi+14h]
                xor     edi, edx
                add     ebx, edi
                mov     edi, ecx
                rol     ebx, 14h
                add     ebx, ecx
                lea     eax, [eax+ebp-29D0EFA3h]
                xor     edi, ebx
                and     edi, edx
                mov     ebp, [esi+28h]
                xor     edi, ecx
                add     eax, edi
                mov     edi, ebx
                rol     eax, 5
                add     eax, ebx
                lea     edx, [edx+ebp+2441453h]
                xor     edi, eax
                and     edi, ecx
                mov     ebp, [esi+3Ch]
                xor     edi, ebx
                add     edx, edi
                mov     edi, eax
                rol     edx, 9
                add     edx, eax
                lea     ecx, [ecx+ebp-275E197Fh]
                xor     edi, edx
                and     edi, ebx
                mov     ebp, [esi+10h]
                xor     edi, eax
                add     ecx, edi
                mov     edi, edx
                rol     ecx, 0Eh
                add     ecx, edx
                lea     ebx, [ebx+ebp-182C0438h]
                xor     edi, ecx
                and     edi, eax
                mov     ebp, [esi+24h]
                xor     edi, edx
                add     ebx, edi
                mov     edi, ecx
                rol     ebx, 14h
                add     ebx, ecx
                lea     eax, [eax+ebp+21E1CDE6h]
                xor     edi, ebx
                and     edi, edx
                mov     ebp, [esi+38h]
                xor     edi, ecx
                add     eax, edi
                mov     edi, ebx
                rol     eax, 5
                add     eax, ebx
                lea     edx, [edx+ebp-3CC8F82Ah]
                xor     edi, eax
                and     edi, ecx
                mov     ebp, [esi+0Ch]
                xor     edi, ebx
                add     edx, edi
                mov     edi, eax
                rol     edx, 9
                add     edx, eax
                lea     ecx, [ecx+ebp-0B2AF279h]
                xor     edi, edx
                and     edi, ebx
                mov     ebp, [esi+20h]
                xor     edi, eax
                add     ecx, edi
                mov     edi, edx
                rol     ecx, 0Eh
                add     ecx, edx
                lea     ebx, [ebx+ebp+455A14EDh]
                xor     edi, ecx
                and     edi, eax
                mov     ebp, [esi+34h]
                xor     edi, edx
                add     ebx, edi
                mov     edi, ecx
                rol     ebx, 14h
                add     ebx, ecx
                lea     eax, [eax+ebp-561C16FBh]
                xor     edi, ebx
                and     edi, edx
                mov     ebp, [esi+8]
                xor     edi, ecx
                add     eax, edi
                mov     edi, ebx
                rol     eax, 5
                add     eax, ebx
                lea     edx, [edx+ebp-3105C08h]
                xor     edi, eax
                and     edi, ecx
                mov     ebp, [esi+1Ch]
                xor     edi, ebx
                add     edx, edi
                mov     edi, eax
                rol     edx, 9
                add     edx, eax
                lea     ecx, [ecx+ebp+676F02D9h]
                xor     edi, edx
                and     edi, ebx
                mov     ebp, [esi+30h]
                xor     edi, eax
                add     ecx, edi
                mov     edi, edx
                rol     ecx, 0Eh
                add     ecx, edx
                lea     ebx, [ebx+ebp-72D5B376h]
                xor     edi, ecx
                and     edi, eax
                mov     ebp, [esi+14h]
                xor     edi, edx
                add     ebx, edi
                mov     edi, ecx
                rol     ebx, 14h
                add     ebx, ecx
                xor     edi, edx
                xor     edi, ebx
                lea     eax, [eax+ebp-5C6BEh]
                add     eax, edi
                rol     eax, 4
                mov     ebp, [esi+20h]
                mov     edi, ebx
                lea     edx, [edx+ebp-788E097Fh]
                add     eax, ebx
                xor     edi, ecx
                xor     edi, eax
                mov     ebp, [esi+2Ch]
                add     edx, edi
                mov     edi, eax
                rol     edx, 0Bh
                add     edx, eax
                xor     edi, ebx
                xor     edi, edx
                lea     ecx, [ecx+ebp+6D9D6122h]
                add     ecx, edi
                rol     ecx, 10h
                mov     ebp, [esi+38h]
                mov     edi, edx
                lea     ebx, [ebx+ebp-21AC7F4h]
                add     ecx, edx
                xor     edi, eax
                xor     edi, ecx
                mov     ebp, [esi+4]
                add     ebx, edi
                mov     edi, ecx
                rol     ebx, 17h
                add     ebx, ecx
                xor     edi, edx
                xor     edi, ebx
                lea     eax, [eax+ebp-5B4115BCh]
                add     eax, edi
                rol     eax, 4
                mov     ebp, [esi+10h]
                mov     edi, ebx
                lea     edx, [edx+ebp+4BDECFA9h]
                add     eax, ebx
                xor     edi, ecx
                xor     edi, eax
                mov     ebp, [esi+1Ch]
                add     edx, edi
                mov     edi, eax
                rol     edx, 0Bh
                add     edx, eax
                xor     edi, ebx
                xor     edi, edx
                lea     ecx, [ecx+ebp-944B4A0h]
                add     ecx, edi
                rol     ecx, 10h
                mov     ebp, [esi+28h]
                mov     edi, edx
                lea     ebx, [ebx+ebp-41404390h]
                add     ecx, edx
                xor     edi, eax
                xor     edi, ecx
                mov     ebp, [esi+34h]
                add     ebx, edi
                mov     edi, ecx
                rol     ebx, 17h
                add     ebx, ecx
                xor     edi, edx
                xor     edi, ebx
                lea     eax, [eax+ebp+289B7EC6h]
                add     eax, edi
                rol     eax, 4
                mov     ebp, [esi]
                mov     edi, ebx
                lea     edx, [edx+ebp-155ED806h]
                add     eax, ebx
                xor     edi, ecx
                xor     edi, eax
                mov     ebp, [esi+0Ch]
                add     edx, edi
                mov     edi, eax
                rol     edx, 0Bh
                add     edx, eax
                xor     edi, ebx
                xor     edi, edx
                lea     ecx, [ecx+ebp-2B10CF7Bh]
                add     ecx, edi
                rol     ecx, 10h
                mov     ebp, [esi+18h]
                mov     edi, edx
                lea     ebx, [ebx+ebp+4881D05h]
                add     ecx, edx
                xor     edi, eax
                xor     edi, ecx
                mov     ebp, [esi+24h]
                add     ebx, edi
                mov     edi, ecx
                rol     ebx, 17h
                add     ebx, ecx
                xor     edi, edx
                xor     edi, ebx
                lea     eax, [eax+ebp-262B2FC7h]
                add     eax, edi
                rol     eax, 4
                mov     ebp, [esi+30h]
                mov     edi, ebx
                lea     edx, [edx+ebp-1924661Bh]
                add     eax, ebx
                xor     edi, ecx
                xor     edi, eax
                mov     ebp, [esi+3Ch]
                add     edx, edi
                mov     edi, eax
                rol     edx, 0Bh
                add     edx, eax
                xor     edi, ebx
                xor     edi, edx
                lea     ecx, [ecx+ebp+1FA27CF8h]
                add     ecx, edi
                rol     ecx, 10h
                mov     ebp, [esi+8]
                mov     edi, edx
                lea     ebx, [ebx+ebp-3B53A99Bh]
                add     ecx, edx
                xor     edi, eax
                xor     edi, ecx
                mov     ebp, [esi]
                add     ebx, edi
                mov     edi, 0FFFFFFFFh
                rol     ebx, 17h
                add     ebx, ecx
                xor     edi, edx
                or      edi, ebx
                lea     eax, [eax+ebp-0BD6DDBCh]
                xor     edi, ecx
                mov     ebp, [esi+1Ch]
                add     eax, edi
                mov     edi, 0FFFFFFFFh
                rol     eax, 6
                xor     edi, ecx
                add     eax, ebx
                or      edi, eax
                lea     edx, [edx+ebp+432AFF97h]
                xor     edi, ebx
                mov     ebp, [esi+38h]
                add     edx, edi
                mov     edi, 0FFFFFFFFh
                rol     edx, 0Ah
                xor     edi, ebx
                add     edx, eax
                or      edi, edx
                lea     ecx, [ecx+ebp-546BDC59h]
                xor     edi, eax
                mov     ebp, [esi+14h]
                add     ecx, edi
                mov     edi, 0FFFFFFFFh
                rol     ecx, 0Fh
                xor     edi, eax
                add     ecx, edx
                or      edi, ecx
                lea     ebx, [ebx+ebp-36C5FC7h]
                xor     edi, edx
                mov     ebp, [esi+30h]
                add     ebx, edi
                mov     edi, 0FFFFFFFFh
                rol     ebx, 15h
                xor     edi, edx
                add     ebx, ecx
                or      edi, ebx
                lea     eax, [eax+ebp+655B59C3h]
                xor     edi, ecx
                mov     ebp, [esi+0Ch]
                add     eax, edi
                mov     edi, 0FFFFFFFFh
                rol     eax, 6
                xor     edi, ecx
                add     eax, ebx
                or      edi, eax
                lea     edx, [edx+ebp-70F3336Eh]
                xor     edi, ebx
                mov     ebp, [esi+28h]
                add     edx, edi
                mov     edi, 0FFFFFFFFh
                rol     edx, 0Ah
                xor     edi, ebx
                add     edx, eax
                or      edi, edx
                lea     ecx, [ecx+ebp-100B83h]
                xor     edi, eax
                mov     ebp, [esi+4]
                add     ecx, edi
                mov     edi, 0FFFFFFFFh
                rol     ecx, 0Fh
                xor     edi, eax
                add     ecx, edx
                or      edi, ecx
                lea     ebx, [ebx+ebp-7A7BA22Fh]
                xor     edi, edx
                mov     ebp, [esi+20h]
                add     ebx, edi
                mov     edi, 0FFFFFFFFh
                rol     ebx, 15h
                xor     edi, edx
                add     ebx, ecx
                or      edi, ebx
                lea     eax, [eax+ebp+6FA87E4Fh]
                xor     edi, ecx
                mov     ebp, [esi+3Ch]
                add     eax, edi
                mov     edi, 0FFFFFFFFh
                rol     eax, 6
                xor     edi, ecx
                add     eax, ebx
                or      edi, eax
                lea     edx, [edx+ebp-1D31920h]
                xor     edi, ebx
                mov     ebp, [esi+18h]
                add     edx, edi
                mov     edi, 0FFFFFFFFh
                rol     edx, 0Ah
                xor     edi, ebx
                add     edx, eax
                or      edi, edx
                lea     ecx, [ecx+ebp-5CFEBCECh]
                xor     edi, eax
                mov     ebp, [esi+34h]
                add     ecx, edi
                mov     edi, 0FFFFFFFFh
                rol     ecx, 0Fh
                xor     edi, eax
                add     ecx, edx
                or      edi, ecx
                lea     ebx, [ebx+ebp+4E0811A1h]
                xor     edi, edx
                mov     ebp, [esi+10h]
                add     ebx, edi
                mov     edi, 0FFFFFFFFh
                rol     ebx, 15h
                xor     edi, edx
                add     ebx, ecx
                or      edi, ebx
                lea     eax, [eax+ebp-8AC817Eh]
                xor     edi, ecx
                mov     ebp, [esi+2Ch]
                add     eax, edi
                mov     edi, 0FFFFFFFFh
                rol     eax, 6
                xor     edi, ecx
                add     eax, ebx
                or      edi, eax
                lea     edx, [edx+ebp-42C50DCBh]
                xor     edi, ebx
                mov     ebp, [esi+8]
                add     edx, edi
                mov     edi, 0FFFFFFFFh
                rol     edx, 0Ah
                xor     edi, ebx
                add     edx, eax
                or      edi, edx
                lea     ecx, [ecx+ebp+2AD7D2BBh]
                xor     edi, eax
                mov     ebp, [esi+24h]
                add     ecx, edi
                mov     edi, 0FFFFFFFFh
                rol     ecx, 0Fh
                xor     edi, eax
                add     ecx, edx
                or      edi, ecx
                lea     ebx, [ebx+ebp-14792C6Fh]
                xor     edi, edx
                mov     ebp, [esp+14h+arg_0]
                add     ebx, edi
                add     esi, 40h
                rol     ebx, 15h
                mov     edi, [ebp+0]
                add     ebx, ecx
                add     eax, edi
                mov     edi, [ebp+4]
                add     ebx, edi
                mov     edi, [ebp+8]
                add     ecx, edi
                mov     edi, [ebp+0Ch]
                add     edx, edi
                mov     [ebp+0], eax
                mov     [ebp+4], ebx
                mov     edi, [esp+14h+var_14]
                mov     [ebp+8], ecx
                mov     [ebp+0Ch], edx
                cmp     edi, esi
                jnb     loc_10028517
                pop     eax
                pop     ebx
                pop     ebp
                pop     edi
                pop     esi
                retn
sub_100284F0    endp



sub_10017AC0    proc near               ; CODE XREF: sub_10017E50+Bp

arg_0           = dword ptr  4

                mov     eax, [esp+arg_0]
                mov     eax, [eax+58h]
                retn
sub_10017AC0    endp

sub_10025E10    proc near               ; CODE XREF: sub_10017E50+18p

var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                mov     eax, 8
                call    __alloca_probe
                push    ebx
                mov     ebx, [esp+0Ch+arg_0]
                push    esi
                push    1048h
                push    offset byte_10059380
                push    ebx
                call    crt_memcpy;----unknown_libname_46 ; Microsoft VisualC 2-9/net runtime
                mov     ecx, [esp+1Ch+arg_4]
                add     esp, 0Ch
                cmp     ecx, 48h
                jle     short loc_10025E41
                mov     ecx, 48h

loc_10025E41:                           ; CODE XREF: sub_10025E10+2Aj
                push    edi
                mov     edi, [esp+14h+arg_8]
                mov     eax, edi
                add     ecx, edi
                lea     esi, [ebx+8]
                mov     [esp+14h+arg_0], 6
                push    ebp

loc_10025E56:                           ; CODE XREF: sub_10025E10+FBj
                movzx   edx, byte ptr [eax]
                inc     eax
                cmp     eax, ecx
                jb      short loc_10025E60
                mov     eax, edi

loc_10025E60:                           ; CODE XREF: sub_10025E10+4Cj
                movzx   ebp, byte ptr [eax]
                shl     edx, 8
                inc     eax
                or      edx, ebp
                cmp     eax, ecx
                jb      short loc_10025E6F
                mov     eax, edi

loc_10025E6F:                           ; CODE XREF: sub_10025E10+5Bj
                movzx   ebp, byte ptr [eax]
                shl     edx, 8
                inc     eax
                or      edx, ebp
                cmp     eax, ecx
                jb      short loc_10025E7E
                mov     eax, edi

loc_10025E7E:                           ; CODE XREF: sub_10025E10+6Aj
                movzx   ebp, byte ptr [eax]
                shl     edx, 8
                inc     eax
                or      edx, ebp
                cmp     eax, ecx
                jb      short loc_10025E8D
                mov     eax, edi

loc_10025E8D:                           ; CODE XREF: sub_10025E10+79j
                xor     [esi-8], edx
                movzx   edx, byte ptr [eax]
                inc     eax
                cmp     eax, ecx
                jb      short loc_10025E9A
                mov     eax, edi

loc_10025E9A:                           ; CODE XREF: sub_10025E10+86j
                movzx   ebp, byte ptr [eax]
                shl     edx, 8
                inc     eax
                or      edx, ebp
                cmp     eax, ecx
                jb      short loc_10025EA9
                mov     eax, edi

loc_10025EA9:                           ; CODE XREF: sub_10025E10+95j
                movzx   ebp, byte ptr [eax]
                shl     edx, 8
                inc     eax
                or      edx, ebp
                cmp     eax, ecx
                jb      short loc_10025EB8
                mov     eax, edi

loc_10025EB8:                           ; CODE XREF: sub_10025E10+A4j
                movzx   ebp, byte ptr [eax]
                shl     edx, 8
                inc     eax
                or      edx, ebp
                cmp     eax, ecx
                jb      short loc_10025EC7
                mov     eax, edi

loc_10025EC7:                           ; CODE XREF: sub_10025E10+B3j
                xor     [esi-4], edx
                movzx   edx, byte ptr [eax]
                inc     eax
                cmp     eax, ecx
                jb      short loc_10025ED4
                mov     eax, edi

loc_10025ED4:                           ; CODE XREF: sub_10025E10+C0j
                movzx   ebp, byte ptr [eax]
                shl     edx, 8
                inc     eax
                or      edx, ebp
                cmp     eax, ecx
                jb      short loc_10025EE3
                mov     eax, edi

loc_10025EE3:                           ; CODE XREF: sub_10025E10+CFj
                movzx   ebp, byte ptr [eax]
                shl     edx, 8
                inc     eax
                or      edx, ebp
                cmp     eax, ecx
                jb      short loc_10025EF2
                mov     eax, edi

loc_10025EF2:                           ; CODE XREF: sub_10025E10+DEj
                movzx   ebp, byte ptr [eax]
                shl     edx, 8
                inc     eax
                or      edx, ebp
                cmp     eax, ecx
                jb      short loc_10025F01
                mov     eax, edi

loc_10025F01:                           ; CODE XREF: sub_10025E10+EDj
                xor     [esi], edx
                add     esi, 0Ch
                sub     [esp+18h+arg_0], 1
                jnz     loc_10025E56
                xor     edi, edi
                mov     [esp+18h+var_8], edi
                mov     [esp+18h+var_4], edi
                xor     esi, esi
                pop     ebp
                mov     edi, edi

loc_10025F20:                           ; CODE XREF: sub_10025E10+133j
                lea     eax, [esp+14h+var_8]
                push    ebx
                push    eax
                call    sub_10024ED0
                mov     ecx, [esp+1Ch+var_8]
                mov     edx, [esp+1Ch+var_4]
                mov     [ebx+esi*4], ecx
                mov     [ebx+esi*4+4], edx
                add     esi, 2
                add     esp, 8
                cmp     esi, 12h
                jl      short loc_10025F20
                xor     esi, esi
                pop     edi

loc_10025F48:                           ; CODE XREF: sub_10025E10+15Fj
                lea     eax, [esp+10h+var_8]
                push    ebx
                push    eax
                call    sub_10024ED0
                mov     ecx, [esp+18h+var_8]
                mov     edx, [esp+18h+var_4]
                mov     [ebx+esi*4+48h], ecx
                mov     [ebx+esi*4+4Ch], edx
                add     esi, 2
                add     esp, 8
                cmp     esi, 400h
                jl      short loc_10025F48
                pop     esi
                pop     ebx
                add     esp, 8
                retn
sub_10025E10    endp



sub_10017E50    proc near               ; DATA XREF: .rdata:1004D784o
                                        ; .rdata:1004D7B8o ...

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                mov     eax, [esp+arg_4]
                push    esi
                mov     esi, [esp+4+arg_0]
                push    eax
                push    esi
                call    sub_10017AC0
                mov     ecx, [esi+60h]
                add     esp, 4
                push    eax
                push    ecx
                call    sub_10025E10
                add     esp, 0Ch
                mov     eax, 1
                pop     esi
                retn
sub_10017E50    endp
sub_10017DB0    proc near               ; DATA XREF: .rdata:1004D824o

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch
arg_C           = dword ptr  10h

                mov     eax, [esp+arg_0]
                mov     ecx, [eax]
                push    edi
                mov     edi, [ecx+4]
                cmp     [esp+4+arg_C], edi
                jb      short loc_10017DFB
                sub     [esp+4+arg_C], edi
                push    ebx
                push    ebp
                mov     ebp, [esp+0Ch+arg_4]
                push    esi
                mov     esi, [esp+10h+arg_8]
                xor     ebx, ebx
                sub     ebp, esi
                jmp     short loc_10017DD9
; ---------------------------------------------------------------------------

loc_10017DD5:                           ; CODE XREF: sub_10017DB0+46j
                mov     eax, [esp+10h+arg_0]

loc_10017DD9:                           ; CODE XREF: sub_10017DB0+23j
                mov     edx, [eax+8]
                mov     eax, [eax+60h]
                push    edx
                push    eax
                lea     ecx, [esi+ebp]
                push    ecx
                push    esi
                call    sub_10025B50
                add     ebx, edi
                add     esp, 10h
                add     esi, edi
                cmp     ebx, [esp+10h+arg_C]
                jbe     short loc_10017DD5
                pop     esi
                pop     ebp
                pop     ebx

loc_10017DFB:                           ; CODE XREF: sub_10017DB0+Ej
                mov     eax, 1
                pop     edi
                retn
sub_10017DB0    endp
sub_10025B50    proc near               ; CODE XREF: sub_10017DB0+36p

var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch
arg_C           = dword ptr  10h

                mov     eax, 8
                call    __alloca_probe
                mov     eax, [esp+8+arg_0]
                movzx   ecx, byte ptr [eax]
                movzx   edx, byte ptr [eax+1]
                inc     eax
                shl     edx, 10h
                shl     ecx, 18h
                or      ecx, edx
                movzx   edx, byte ptr [eax+1]
                inc     eax
                shl     edx, 8
                or      ecx, edx
                movzx   edx, byte ptr [eax+1]
                inc     eax
                or      ecx, edx
                inc     eax
                movzx   edx, byte ptr [eax+1]
                mov     [esp+8+var_8], ecx
                movzx   ecx, byte ptr [eax]
                inc     eax
                shl     edx, 10h
                shl     ecx, 18h
                or      ecx, edx
                movzx   edx, byte ptr [eax+1]
                inc     eax
                movzx   eax, byte ptr [eax+1]
                shl     edx, 8
                or      edx, eax
                or      edx, ecx
                cmp     [esp+8+arg_C], 0
                mov     [esp+8+var_4], edx
                jz      short loc_10025BBF
                mov     ecx, [esp+8+arg_8]
                push    ecx
                lea     edx, [esp+0Ch+var_8]
                push    edx
                call    sub_10024ED0
                jmp     short loc_10025BCE
; ---------------------------------------------------------------------------

loc_10025BBF:                           ; CODE XREF: sub_10025B50+5Cj
                mov     eax, [esp+8+arg_8]
                push    eax
                lea     ecx, [esp+0Ch+var_8]
                push    ecx
                call    sub_100252EB

loc_10025BCE:                           ; CODE XREF: sub_10025B50+6Dj
                mov     ecx, [esp+10h+var_8]
                mov     eax, [esp+10h+arg_4]
                mov     edx, ecx
                shr     edx, 18h
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                shr     edx, 10h
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                shr     edx, 8
                mov     [eax], dl
                mov     [eax+1], cl
                mov     ecx, [esp+10h+var_4]
                inc     eax
                inc     eax
                mov     edx, ecx
                shr     edx, 18h
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                shr     edx, 10h
                mov     [eax], dl
                inc     eax
                mov     edx, ecx
                add     esp, 8
                shr     edx, 8
                mov     [eax], dl
                mov     [eax+1], cl
                add     esp, 8
                retn
sub_10025B50    endp

sub_100252EB    proc near               ; CODE XREF: BF_cbc_encrypt+121p
                                        ; BF_cbc_encrypt+189p ...

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                push    ebp
                push    ebx
                mov     ebx, [esp+8+arg_0]
                mov     ebp, [esp+8+arg_4]
                push    esi
                push    edi
                mov     edi, [ebx]
                mov     esi, [ebx+4]
                xor     eax, eax
                mov     ebx, [ebp+44h]
                xor     ecx, ecx
                xor     edi, ebx
                mov     edx, [ebp+40h]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+3Ch]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     edi, ebx
                mov     edx, [ebp+38h]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+34h]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     edi, ebx
                mov     edx, [ebp+30h]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+2Ch]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     edi, ebx
                mov     edx, [ebp+28h]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+24h]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     edi, ebx
                mov     edx, [ebp+20h]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+1Ch]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     edi, ebx
                mov     edx, [ebp+18h]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+14h]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     edi, ebx
                mov     edx, [ebp+10h]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+0Ch]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     edi, ebx
                mov     edx, [ebp+8]
                mov     ebx, edi
                xor     esi, edx
                shr     ebx, 10h
                mov     edx, edi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                xor     eax, eax
                xor     esi, ebx
                mov     edx, [ebp+4]
                mov     ebx, esi
                xor     edi, edx
                shr     ebx, 10h
                mov     edx, esi
                mov     al, bh
                and     ebx, 0FFh
                mov     cl, dh
                and     edx, 0FFh
                mov     eax, [ebp+eax*4+48h]
                mov     ebx, [ebp+ebx*4+448h]
                add     ebx, eax
                mov     eax, [ebp+ecx*4+848h]
                xor     ebx, eax
                mov     edx, [ebp+edx*4+0C48h]
                add     ebx, edx
                mov     eax, [esp+10h+arg_0]
                xor     edi, ebx
                mov     edx, [ebp+0]
                xor     esi, edx
                mov     [eax+4], edi
                mov     [eax], esi
                pop     edi
                pop     esi
                pop     ebx
                pop     ebp
                retn
sub_100252EB    endp
; void *__cdecl operator new(unsigned int)
j_??2@YAPAXI@Z  proc near               ; CODE XREF: sub_100126F0+4Bp
                jmp     crt_malloc    ; operator new(uint)
j_??2@YAPAXI@Z  endp

sub_10003BD0    proc near               ; CODE XREF: sub_10002590+51p
                                        ; sub_100026A0+56p ...

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_C           = dword ptr  10h

                push    ebx
                mov     ebx, [esp+4+arg_0]
                push    ebp
                mov     ebp, [esp+8+arg_4]
                cmp     [ebx+14h], ebp
                push    esi
                push    edi
                mov     esi, ecx
                jnb     short loc_10003BE8
                call    sub_1004AAFE
; ---------------------------------------------------------------------------

loc_10003BE8:                           ; CODE XREF: sub_10003BD0+11j
                mov     edi, [ebx+14h]
                mov     eax, [esp+1Ch]
                sub     edi, ebp
                cmp     eax, edi
                jnb     short loc_10003BF7
                mov     edi, eax

loc_10003BF7:                           ; CODE XREF: sub_10003BD0+23j
                cmp     esi, ebx
                jnz     short loc_10003C1A
                push    0FFFFFFFFh
                add     edi, ebp
                push    edi
                mov     ecx, esi
                call    sub_10003EA0
                push    ebp
                push    0
                mov     ecx, esi
                call    sub_10003EA0
                pop     edi
                mov     eax, esi
                pop     esi
                pop     ebp
                pop     ebx
                retn    0Ch
; ---------------------------------------------------------------------------

loc_10003C1A:                           ; CODE XREF: sub_10003BD0+29j
                cmp     edi, 0FFFFFFFEh
                jbe     short loc_10003C24
                call    sub_1004AABF
; ---------------------------------------------------------------------------

loc_10003C24:                           ; CODE XREF: sub_10003BD0+4Dj
                mov     eax, [esi+18h]
                cmp     eax, edi
                jnb     short loc_10003C46
                mov     eax, [esi+14h]
                push    eax             ; MaxCount
                push    edi             ; Dst
                mov     ecx, esi
                call    sub_10004300
                test    edi, edi

loc_10003C39:                           ; CODE XREF: sub_10003BD0+78j
                jbe     short loc_10003CA1
                cmp     dword ptr [ebx+18h], 10h
                jb      short loc_10003C70
                mov     edx, [ebx+4]
                jmp     short loc_10003C73
; ---------------------------------------------------------------------------

loc_10003C46:                           ; CODE XREF: sub_10003BD0+59j
                test    edi, edi
                jnz     short loc_10003C39
                cmp     eax, 10h
                mov     [esi+14h], edi
                jb      short loc_10003C61
                mov     eax, [esi+4]
                pop     edi
                mov     byte ptr [eax], 0
                mov     eax, esi
                pop     esi
                pop     ebp
                pop     ebx
                retn    0Ch
; ---------------------------------------------------------------------------

loc_10003C61:                           ; CODE XREF: sub_10003BD0+80j
                lea     eax, [esi+4]
                pop     edi
                mov     byte ptr [eax], 0
                mov     eax, esi
                pop     esi
                pop     ebp
                pop     ebx
                retn    0Ch
; ---------------------------------------------------------------------------

loc_10003C70:                           ; CODE XREF: sub_10003BD0+6Fj
                lea     edx, [ebx+4]

loc_10003C73:                           ; CODE XREF: sub_10003BD0+74j
                mov     ecx, [esi+18h]
                cmp     ecx, 10h
                lea     ebx, [esi+4]
                jb      short loc_10003C82
                mov     eax, [ebx]
                jmp     short loc_10003C84
; ---------------------------------------------------------------------------

loc_10003C82:                           ; CODE XREF: sub_10003BD0+ACj
                mov     eax, ebx

loc_10003C84:                           ; CODE XREF: sub_10003BD0+B0j
                push    edi             ; MaxCount
                add     edx, ebp
                push    edx             ; Src
                push    ecx             ; DstSize
                push    eax             ; Dst
                call    _memcpy_s
                add     esp, 10h
                cmp     dword ptr [esi+18h], 10h
                mov     [esi+14h], edi
                jb      short loc_10003C9D
                mov     ebx, [ebx]

loc_10003C9D:                           ; CODE XREF: sub_10003BD0+C9j
                mov     byte ptr [ebx+edi], 0

loc_10003CA1:                           ; CODE XREF: sub_10003BD0:loc_10003C39j
                pop     edi
                mov     eax, esi
                pop     esi
                pop     ebp
                pop     ebx
                retn    0Ch
sub_10003BD0    endp
; int __stdcall sub_10004300(void *Dst, rsize_t MaxCount)
sub_10004300    proc near               ; CODE XREF: sub_100039F0+5Fp
                                        ; sub_10003AE0+89p ...

var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
Dst_1             = dword ptr  8
MaxCount        = dword ptr  0Ch

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset sub_1004BE90
                mov     eax,  fs:0
                push    eax
                sub     esp, 0Ch
                push    ebx
                push    esi
                push    edi
                mov     eax, dword ptr gs_cookie_magic1
                xor     eax, ebp
                push    eax
                lea     eax, [ebp+var_C]
                mov      fs:0, eax
                mov     [ebp+var_10], esp
                mov     edi, ecx
                mov     [ebp+var_14], edi
                mov     eax, [ebp+Dst_1]
                mov     esi, eax
                or      esi, 0Fh
                cmp     esi, 0FFFFFFFEh
                jbe     short loc_10004341
                mov     esi, eax
                jmp     short loc_10004363
; ---------------------------------------------------------------------------

loc_10004341:                           ; CODE XREF: sub_10004300+3Bj
                mov     ebx, [edi+18h]
                mov     eax, 0AAAAAAABh
                mul     esi
                mov     ecx, ebx
                shr     ecx, 1
                shr     edx, 1
                cmp     edx, ecx
                jnb     short loc_10004363
                mov     eax, 0FFFFFFFEh
                sub     eax, ecx
                cmp     ebx, eax
                ja      short loc_10004363
                lea     esi, [ecx+ebx]

loc_10004363:                           ; CODE XREF: sub_10004300+3Fj
                                        ; sub_10004300+53j ...
                lea     ecx, [esi+1]
                push    ecx
                mov     ecx, edi
                mov     [ebp+var_4], 0
                call    sub_10004440
                mov     [ebp+Dst_1], eax
                jmp     short loc_100043A2
; ---------------------------------------------------------------------------

loc_1000437A:                           ; DATA XREF: .rdata:100614F0o
                mov     eax, [ebp+Dst_1]
                mov     ecx, [ebp+var_14]
                mov     [ebp+var_18], eax
                add     eax, 1
                mov     [ebp+var_10], esp
                push    eax
                mov     byte ptr [ebp+var_4], 2
                call    sub_10004440
                mov     [ebp+Dst_1], eax
                mov     eax, offset loc_1000439C
                retn
; ---------------------------------------------------------------------------

loc_1000439C:                           ; DATA XREF: sub_10004300+96o
                mov     edi, [ebp+var_14]
                mov     esi, [ebp+var_18]

loc_100043A2:                           ; CODE XREF: sub_10004300+78j
                mov     ebx, [ebp+MaxCount]
                test    ebx, ebx
                jbe     short loc_100043C9
                cmp     dword ptr [edi+18h], 10h
                jb      short loc_100043B4
                mov     eax, [edi+4]
                jmp     short loc_100043B7
; ---------------------------------------------------------------------------

loc_100043B4:                           ; CODE XREF: sub_10004300+ADj
                lea     eax, [edi+4]

loc_100043B7:                           ; CODE XREF: sub_10004300+B2j
                push    ebx             ; MaxCount
                push    eax             ; Src
                mov     eax, [ebp+Dst_1]
                lea     edx, [esi+1]
                push    edx             ; DstSize
                push    eax             ; Dst
                call    _memcpy_s
                add     esp, 10h

loc_100043C9:                           ; CODE XREF: sub_10004300+A7j
                cmp     dword ptr [edi+18h], 10h
                jb      short loc_100043DB
                mov     ecx, [edi+4]
                push    ecx             ; void *
                call    j__free
                add     esp, 4

loc_100043DB:                           ; CODE XREF: sub_10004300+CDj
                cmp     esi, 10h
                mov     ecx, [ebp+Dst_1]
                lea     eax, [edi+4]
                mov     byte ptr [eax], 0
                mov     [eax], ecx
                mov     [edi+18h], esi
                mov     [edi+14h], ebx
                jb      short loc_100043F3
                mov     eax, ecx

loc_100043F3:                           ; CODE XREF: sub_10004300+EFj
                mov     byte ptr [eax+ebx], 0
                mov     ecx, [ebp+var_C]
                mov      fs:0, ecx
                pop     ecx
                pop     edi
                pop     esi
                pop     ebx
                mov     esp, ebp
                pop     ebp
                retn    8
sub_10004300    endp

sub_10003EA0    proc near               ; CODE XREF: sub_10003BD0+32p
                                        ; sub_10003BD0+3Cp

arg_0           = dword ptr  4
arg_4           = dword ptr  8
arg_8           = dword ptr  0Ch

                push    ebx
                mov     ebx, [esp+4+arg_0]
                push    esi
                mov     esi, ecx
                cmp     [esi+14h], ebx
                push    edi
                jnb     short loc_10003EB3
                call    sub_1004AAFE
; ---------------------------------------------------------------------------

loc_10003EB3:                           ; CODE XREF: sub_10003EA0+Cj
                mov     eax, [esi+14h]
                mov     edi, [esp+0Ch+arg_4]
                sub     eax, ebx
                cmp     eax, edi
                jnb     short loc_10003EC2
                mov     edi, eax

loc_10003EC2:                           ; CODE XREF: sub_10003EA0+1Ej
                test    edi, edi
                jbe     short loc_10003F1B
                mov     ecx, [esi+18h]
                cmp     ecx, 10h
                push    ebp
                lea     ebp, [esi+4]
                jb      short loc_10003EDB
                mov     edx, [ebp+0]
                mov     [esp+10h+arg_0], edx
                jmp     short loc_10003EDF
; ---------------------------------------------------------------------------

loc_10003EDB:                           ; CODE XREF: sub_10003EA0+30j
                mov     [esp+10h+arg_0], ebp

loc_10003EDF:                           ; CODE XREF: sub_10003EA0+39j
                cmp     ecx, 10h
                jb      short loc_10003EE9
                mov     edx, [ebp+0]
                jmp     short loc_10003EEB
; ---------------------------------------------------------------------------

loc_10003EE9:                           ; CODE XREF: sub_10003EA0+42j
                mov     edx, ebp

loc_10003EEB:                           ; CODE XREF: sub_10003EA0+47j
                sub     eax, edi
                push    eax             ; MaxCount
                mov     eax, [esp+14h+arg_0]
                add     eax, ebx
                add     eax, edi
                push    eax             ; Src
                sub     ecx, ebx
                push    ecx             ; DstSize
                add     edx, ebx
                push    edx             ; Dst
                call    _memmove_s
                mov     eax, [esi+14h]
                sub     eax, edi
                add     esp, 10h
                cmp     dword ptr [esi+18h], 10h
                mov     [esi+14h], eax
                jb      short loc_10003F16
                mov     ebp, [ebp+0]

loc_10003F16:                           ; CODE XREF: sub_10003EA0+71j
                mov     byte ptr [eax+ebp], 0
                pop     ebp

loc_10003F1B:                           ; CODE XREF: sub_10003EA0+24j
                pop     edi
                mov     eax, esi
                pop     esi
                pop     ebx
                retn    8
sub_10003EA0    endp
; int __thiscall CMAC___CMAC(void *, char)
CMAC___CMAC     proc near               ; DATA XREF: .rdata:const CMAC::`vftable'o

__flags$        = byte ptr  4

                push    esi
                mov     esi, ecx
                call    ??1CMAC@@UAE@XZ ; CMAC::~CMAC(void)
                test    [esp+4+__flags$], 1
                jz      short loc_1000BE98
                push    esi             ; void *
                call    j__free
                add     esp, 4

loc_1000BE98:                           ; CODE XREF: CMAC___CMAC+Dj
                mov     eax, esi
                pop     esi
                retn    4
CMAC___CMAC     endp
CMAC__init      proc near               ; CODE XREF: calculate_volume_id_mac+63p
                                        ; DATA XREF: .rdata:100601A4o
                push    esi
                mov     esi, ecx
                mov     ecx, [esi+0Ch]
                mov     edx, [esi+1Ch]
                mov     eax, [esi+8]
                push    ecx             ; size_t
                push    0               ; int
                push    edx             ; void *
                mov     [esi+10h], eax
                call    crt_memset
                mov     eax, [esi+1Ch]
                mov     ecx, [esi+4]
                mov     edx, [ecx]
                add     esp, 0Ch
                push    eax
                push    eax
                mov     eax, [edx+20h]
                call    eax
                mov     ecx, [esi+1Ch]
                test    dword ptr [ecx], 80000000h
                jz      short loc_1000BF4A
                mov     edx, [esi+14h]
                jmp     short loc_1000BF4C
; ---------------------------------------------------------------------------

loc_1000BF4A:                           ; CODE XREF: CMAC__init+33j
                xor     edx, edx

loc_1000BF4C:                           ; CODE XREF: CMAC__init+38j
                mov     eax, [esi+0Ch]
                xor     ecx, ecx
                sub     eax, 1
                jz      short loc_1000BF85
                push    ebx
                push    edi
                jmp     short loc_1000BF60
; ---------------------------------------------------------------------------
                lea     ebx, [ebx+0]

loc_1000BF60:                           ; CODE XREF: CMAC__init+48j
                                        ; CMAC__init+71j
                mov     eax, [esi+1Ch]
                mov     edi, [eax+ecx*4+4]
                mov     ebx, [eax+ecx*4]
                lea     eax, [eax+ecx*4]
                shr     edi, 1Fh
                add     ebx, ebx
                or      edi, ebx
                mov     [eax], edi
                mov     eax, [esi+0Ch]
                add     ecx, 1
                sub     eax, 1
                cmp     ecx, eax
                jb      short loc_1000BF60
                pop     edi
                pop     ebx

loc_1000BF85:                           ; CODE XREF: CMAC__init+44j
                mov     ecx, [esi+0Ch]
                mov     eax, [esi+1Ch]
                lea     eax, [eax+ecx*4-4]
                mov     ecx, [eax]
                add     ecx, ecx
                xor     ecx, edx
                mov     [eax], ecx
                mov     edx, [esi+8]
                mov     eax, [esi+24h]
                push    edx             ; size_t
                push    0               ; int
                push    eax             ; void *
                call    crt_memset
                add     esp, 0Ch
                mov     dword ptr [esi+18h], 0
                pop     esi
                retn
CMAC__init      endp
; public: __thiscall CMAC::CMAC(void)
??0CMAC@@QAE@XZ proc near               ; CODE XREF: calculate_volume_id_mac+52p

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4
arg_0           = dword ptr  4

                push    0FFFFFFFFh
                push    offset sub_1004BE28
                mov     eax,  fs:0
                push    eax
                push    ecx
                push    esi
                mov     eax, gs_cookie_magic1
                xor     eax, esp
                push    eax             ; size_t
                lea     eax, [esp+18h+var_C]
                mov      fs:0, eax
                mov     esi, [esp+18h+arg_0]
                mov     [esp+18h+var_4], 0
                mov     dword ptr [esi], offset ??_7CMAC@@6B@ ; const CMAC::`vftable'
                mov     [esi+4], ecx
                mov     eax, [ecx]
                mov     edx, [eax+8]
                call    edx
                cmp     eax, 10h
                mov     [esi+8], eax
                jz      short loc_1000BE12
                cmp     eax, 8
                jz      short loc_1000BE12
                push    offset unk_10061444
                lea     eax, [esp+1Ch+var_10]
                push    eax
                mov     [esp+20h+var_10], offset aInvalidBlockSi ; "invalid block size"
                call    __CxxThrowException@8 ; _CxxThrowException(x,x)
; ---------------------------------------------------------------------------

loc_1000BE12:                           ; CODE XREF: CMAC::CMAC(void)+44j
                                        ; CMAC::CMAC(void)+49j
                mov     ecx, eax
                sub     eax, 10h
                shr     ecx, 2
                neg     eax
                sbb     eax, eax
                and     eax, 0FFFFFF94h
                add     eax, 87h
                push    4               ; size_t
                push    ecx             ; size_t
                mov     [esi+0Ch], ecx
                mov     dword ptr [esi+10h], 0
                mov     [esi+14h], eax
                call    crt_calloc
                mov     ecx, [esi+0Ch]
                push    4               ; size_t
                push    ecx             ; size_t
                mov     [esi+1Ch], eax
                call    crt_calloc
                mov     edx, [esi+8]
                push    1               ; size_t
                push    edx             ; size_t
                mov     [esi+20h], eax
                call    crt_calloc
                mov     [esi+24h], eax
                add     esp, 18h
                mov     dword ptr [esi+18h], 0FFFFFFFFh
                mov     eax, esi
                mov     ecx, [esp+18h+var_C]
                mov      fs:0, ecx
                pop     ecx
                pop     esi
                add     esp, 10h
                retn    4
??0CMAC@@QAE@XZ endp
; int __thiscall CMAC__finish(int this, bool aad_1)
CMAC__finish    proc near               ; CODE XREF: calculate_volume_id_mac+89p
                                        ; DATA XREF: .rdata:100601B0o

var_4           = dword ptr -4
aad_1           = dword ptr  4
a2              = dword ptr  8

                push    ecx
                push    esi
                mov     esi, ecx
                mov     eax, [esi+18h]
                cmp     eax, 0FFFFFFFFh
                jnz     short loc_1000C143
                push    offset unk_10061444
                lea     eax, [esp+0Ch+var_4]
                push    eax
                mov     [esp+10h+var_4], offset aWrongOrderOfOp ; "wrong order of operations"
                call    __CxxThrowException@8 ; _CxxThrowException(x,x)
; ---------------------------------------------------------------------------

loc_1000C143:                           ; CODE XREF: CMAC__finish+Aj
                test    eax, eax
                jnz     loc_1000C212
                cmp     [esi+10h], eax
                jbe     short loc_1000C1BA
                mov     ecx, [esi+1Ch]
                test    dword ptr [ecx], 80000000h
                jz      short loc_1000C160
                mov     edx, [esi+14h]
                jmp     short loc_1000C162
; ---------------------------------------------------------------------------

loc_1000C160:                           ; CODE XREF: CMAC__finish+39j
                xor     edx, edx

loc_1000C162:                           ; CODE XREF: CMAC__finish+3Ej
                mov     eax, [esi+0Ch]
                xor     ecx, ecx
                sub     eax, 1
                jz      short loc_1000C195
                push    ebx
                push    edi
                mov     edi, edi

loc_1000C170:                           ; CODE XREF: CMAC__finish+71j
                mov     eax, [esi+1Ch]
                mov     edi, [eax+ecx*4+4]
                mov     ebx, [eax+ecx*4]
                lea     eax, [eax+ecx*4]
                shr     edi, 1Fh
                add     ebx, ebx
                or      edi, ebx
                mov     [eax], edi
                mov     eax, [esi+0Ch]
                add     ecx, 1
                sub     eax, 1
                cmp     ecx, eax
                jb      short loc_1000C170
                pop     edi
                pop     ebx

loc_1000C195:                           ; CODE XREF: CMAC__finish+4Aj
                mov     ecx, [esi+0Ch]
                mov     eax, [esi+1Ch]
                lea     eax, [eax+ecx*4-4]
                mov     ecx, [eax]
                add     ecx, ecx
                xor     ecx, edx
                mov     [eax], ecx
                mov     eax, [esi+24h]
                add     eax, [esi+8]
                sub     eax, [esi+10h]
                xor     byte ptr [eax], 80h
                mov     dword ptr [esi+10h], 0

loc_1000C1BA:                           ; CODE XREF: CMAC__finish+2Ej
                mov     eax, [esi+20h]
                mov     ecx, [esi+4]
                mov     edx, [ecx]
                mov     edx, [edx+14h]
                push    eax
                mov     eax, [esi+24h]
                push    eax
                call    edx
                xor     eax, eax
                cmp     [esi+0Ch], eax
                jbe     short loc_1000C1EA

loc_1000C1D3:                           ; CODE XREF: CMAC__finish+C8j
                mov     ecx, [esi+20h]
                mov     edx, [esi+1Ch]
                mov     edx, [edx+eax*4]
                xor     [ecx+eax*4], edx
                lea     ecx, [ecx+eax*4]
                add     eax, 1
                cmp     eax, [esi+0Ch]
                jb      short loc_1000C1D3

loc_1000C1EA:                           ; CODE XREF: CMAC__finish+B1j
                mov     eax, [esi+20h]
                mov     ecx, [esi+4]
                mov     edx, [ecx]
                push    eax
                push    eax
                mov     eax, [edx+20h]
                call    eax
                mov     eax, [esi+24h]
                mov     ecx, [esi+4]
                mov     edx, [ecx]
                mov     edx, [edx+18h]
                push    eax
                mov     eax, [esi+20h]
                push    eax
                call    edx
                mov     dword ptr [esi+18h], 1

loc_1000C212:                           ; CODE XREF: CMAC__finish+25j
                pop     esi
                pop     ecx
                retn    4
CMAC__finish    endp


; public: virtual __thiscall CMAC::~CMAC(void)
??1CMAC@@UAE@XZ proc near               ; CODE XREF: calculate_volume_id_mac+E8p
                                        ; CMAC___CMAC+3p ...
                push    esi
                mov     esi, ecx
                mov     eax, [esi+1Ch]
                push    edi
                xor     edi, edi
                push    edi             ; size_t
                push    edi             ; int
                push    eax             ; void *
                mov     dword ptr [esi], offset ??_7CMAC@@6B@ ; const CMAC::`vftable'
                mov     [esi+4], edi
                mov     [esi+8], edi
                mov     [esi+0Ch], edi
                mov     [esi+10h], edi
                mov     [esi+14h], edi
                call    crt_memset
                mov     ecx, [esi+1Ch]
                push    ecx             ; void *
                call    crt_free
                mov     edx, [esi+8]
                mov     eax, [esi+20h]
                push    edx             ; size_t
                push    edi             ; int
                push    eax             ; void *
                call    crt_memset
                mov     ecx, [esi+20h]
                push    ecx             ; void *
                call    crt_free
                mov     edx, [esi+8]
                mov     eax, [esi+24h]
                push    edx             ; size_t
                push    edi             ; int
                push    eax             ; void *
                call    crt_memset
                mov     ecx, [esi+24h]
                push    ecx             ; void *
                call    crt_free
                add     esp, 30h
                pop     edi
                mov     dword ptr [esi+18h], 0FFFFFFFFh
                mov     dword ptr [esi], offset ??_7MAC@@6B@ ; const MAC::`vftable'
                pop     esi
                retn
??1CMAC@@UAE@XZ endp

CMAC__update    proc near               ; CODE XREF: calculate_volume_id_mac+7Ep
                                        ; DATA XREF: .rdata:100601ACo

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                push    esi
                mov     esi, ecx
                cmp     dword ptr [esi+18h], 0
                jz      short loc_1000BFE0
                push    offset unk_10061444
                lea     eax, [esp+8+arg_4]
                push    eax
                mov     [esp+0Ch+arg_4], offset aWrongOrderOfOp ; "wrong order of operations"
                call    __CxxThrowException@8 ; _CxxThrowException(x,x)
; ---------------------------------------------------------------------------

loc_1000BFE0:                           ; CODE XREF: CMAC__update+7j
                mov     eax, [esi+8]
                sub     eax, [esi+10h]
                push    ebx
                add     eax, [esi+24h]
                mov     ebx, [esp+8+arg_4]
                push    edi
                mov     edi, [esp+0Ch+arg_0]

loc_1000BFF3:                           ; CODE XREF: CMAC__update+F1j
                mov     ecx, [esi+10h]
                cmp     ebx, ecx
                ja      short loc_1000BFFC
                mov     ecx, ebx

loc_1000BFFC:                           ; CODE XREF: CMAC__update+38j
                sub     ecx, 1          ; switch 16 cases
                cmp     ecx, 0Fh
                ja      short loc_1000C069 ; default
                jmp     ds:off_1000C0C0[ecx*4] ; switch jump

loc_1000C00B:                           ; DATA XREF: .text:off_1000C0C0o
                mov     cl, [edi+0Fh]   ; jumptable 1000C004 case 16
                xor     [eax+0Fh], cl

loc_1000C011:                           ; CODE XREF: CMAC__update+44j
                                        ; DATA XREF: .text:off_1000C0C0o
                mov     dl, [edi+0Eh]   ; jumptable 1000C004 case 15
                xor     [eax+0Eh], dl

loc_1000C017:                           ; CODE XREF: CMAC__update+44j
                                        ; DATA XREF: .text:off_1000C0C0o
                mov     cl, [edi+0Dh]   ; jumptable 1000C004 case 14
                xor     [eax+0Dh], cl

loc_1000C01D:                           ; CODE XREF: CMAC__update+44j
                                        ; DATA XREF: .text:off_1000C0C0o
                mov     dl, [edi+0Ch]   ; jumptable 1000C004 case 13
                xor     [eax+0Ch], dl

loc_1000C023:                           ; CODE XREF: CMAC__update+44j
                                        ; DATA XREF: .text:off_1000C0C0o
                mov     cl, [edi+0Bh]   ; jumptable 1000C004 case 12
                xor     [eax+0Bh], cl

loc_1000C029:                           ; CODE XREF: CMAC__update+44j
                                        ; DATA XREF: .text:off_1000C0C0o
                mov     dl, [edi+0Ah]   ; jumptable 1000C004 case 11
                xor     [eax+0Ah], dl

loc_1000C02F:                           ; CODE XREF: CMAC__update+44j
                                        ; DATA XREF: .text:off_1000C0C0o
                mov     cl, [edi+9]     ; jumptable 1000C004 case 10
                xor     [eax+9], cl

loc_1000C035:                           ; CODE XREF: CMAC__update+44j
                                        ; DATA XREF: .text:off_1000C0C0o
                mov     dl, [edi+8]     ; jumptable 1000C004 case 9
                xor     [eax+8], dl

loc_1000C03B:                           ; CODE XREF: CMAC__update+44j
                                        ; DATA XREF: .text:off_1000C0C0o
                mov     cl, [edi+7]     ; jumptable 1000C004 case 8
                xor     [eax+7], cl

loc_1000C041:                           ; CODE XREF: CMAC__update+44j
                                        ; DATA XREF: .text:off_1000C0C0o
                mov     dl, [edi+6]     ; jumptable 1000C004 case 7
                xor     [eax+6], dl

loc_1000C047:                           ; CODE XREF: CMAC__update+44j
                                        ; DATA XREF: .text:off_1000C0C0o
                mov     cl, [edi+5]     ; jumptable 1000C004 case 6
                xor     [eax+5], cl

loc_1000C04D:                           ; CODE XREF: CMAC__update+44j
                                        ; DATA XREF: .text:off_1000C0C0o
                mov     dl, [edi+4]     ; jumptable 1000C004 case 5
                xor     [eax+4], dl

loc_1000C053:                           ; CODE XREF: CMAC__update+44j
                                        ; DATA XREF: .text:off_1000C0C0o
                mov     cl, [edi+3]     ; jumptable 1000C004 case 4
                xor     [eax+3], cl

loc_1000C059:                           ; CODE XREF: CMAC__update+44j
                                        ; DATA XREF: .text:off_1000C0C0o
                mov     dl, [edi+2]     ; jumptable 1000C004 case 3
                xor     [eax+2], dl

loc_1000C05F:                           ; CODE XREF: CMAC__update+44j
                                        ; DATA XREF: .text:off_1000C0C0o
                mov     cl, [edi+1]     ; jumptable 1000C004 case 2
                xor     [eax+1], cl

loc_1000C065:                           ; CODE XREF: CMAC__update+44j
                                        ; DATA XREF: .text:off_1000C0C0o
                mov     dl, [edi]       ; jumptable 1000C004 case 1
                xor     [eax], dl

loc_1000C069:                           ; CODE XREF: CMAC__update+42j
                cmp     ebx, [esi+10h]  ; default
                jbe     short loc_1000C0B6
                mov     edx, [esi+20h]
                mov     ecx, [esi+4]
                mov     eax, [ecx]
                mov     eax, [eax+14h]
                push    edx
                mov     edx, [esi+24h]
                push    edx
                call    eax
                mov     eax, [esi+20h]
                mov     ecx, [esi+4]
                mov     edx, [ecx]
                push    eax
                push    eax
                mov     eax, [edx+20h]
                call    eax
                mov     eax, [esi+24h]
                mov     ecx, [esi+4]
                mov     edx, [ecx]
                mov     edx, [edx+18h]
                push    eax
                mov     eax, [esi+20h]
                push    eax
                call    edx
                mov     eax, [esi+10h]
                sub     ebx, eax
                add     edi, eax
                mov     eax, [esi+8]
                mov     [esi+10h], eax
                mov     eax, [esi+24h]
                jmp     loc_1000BFF3
; ---------------------------------------------------------------------------

loc_1000C0B6:                           ; CODE XREF: CMAC__update+ACj
                sub     [esi+10h], ebx
                pop     edi
                pop     ebx
                pop     esi
                retn    0Ch
                
off_1000C0C0    dd offset loc_1000C065  ; DATA XREF: CMAC__update+44r
                dd offset loc_1000C05F  ; jump table for switch statement
                dd offset loc_1000C059
                dd offset loc_1000C053
                dd offset loc_1000C04D
                dd offset loc_1000C047
                dd offset loc_1000C041
                dd offset loc_1000C03B
                dd offset loc_1000C035
                dd offset loc_1000C02F
                dd offset loc_1000C029
                dd offset loc_1000C023
                dd offset loc_1000C01D
                dd offset loc_1000C017
                dd offset loc_1000C011
                dd offset loc_1000C00B                
CMAC__update    endp

; ---------------------------------------------------------------------------
                align 10h


; =============== S U B R O U T I N E =======================================


CMAC__update_0  proc near               ; DATA XREF: .rdata:100601A8o

arg_0           = dword ptr  4

                mov     edx, [ecx+8]
                mov     eax, [ecx]
                mov     eax, [eax+0Ch]
                push    0
                push    edx
                mov     edx, [esp+8+arg_0]
                push    edx
                call    eax
                retn    4
CMAC__update_0  endp
; public: virtual __thiscall type_info::~type_info(void)
??1type_info@@UAE@XZ proc near          ; CODE XREF: type_info::`scalar deleting destructor'(uint)+3p
                push    ecx
                mov     dword ptr [ecx], offset ??_7type_info@@6B@ ; const type_info::`vftable'
                call    sub_1003E334
                pop     ecx
                retn
??1type_info@@UAE@XZ endp


; int __thiscall type_info___scalar deleting destructor_(void *, char)
??_Gtype_info@@UAEPAXI@Z proc near      ; DATA XREF: .rdata:const type_info::`vftable'o

__flags$        = byte ptr  4

                push    esi
                mov     esi, ecx
                call    ??1type_info@@UAE@XZ ; type_info::~type_info(void)
                test    [esp+4+__flags$], 1
                jz      short loc_10038520
                push    esi             ; void *
                call    j__free
                pop     ecx

loc_10038520:                           ; CODE XREF: type_info::`scalar deleting destructor'(uint)+Dj
                mov     eax, esi
                pop     esi
                retn    4
??_Gtype_info@@UAEPAXI@Z endp
; int __thiscall BlockCipher___BlockCipher(void *, char)
BlockCipher___BlockCipher proc near     ; DATA XREF: .rdata:const BlockCipher::`vftable'o

__flags$        = byte ptr  4

                test    [esp+__flags$], 1
                push    esi
                mov     esi, ecx
                mov     dword ptr [esi], offset ??_7BlockCipher@@6B@ ; const BlockCipher::`vftable'
                jz      short loc_1000C299
                push    esi             ; void *
                call    j__free
                add     esp, 4

loc_1000C299:                           ; CODE XREF: BlockCipher___BlockCipher+Ej
                mov     eax, esi
                pop     esi
                retn    4
BlockCipher___BlockCipher endp
sub_1004BE28    proc near               ; DATA XREF: CMAC::CMAC(void)+2o

arg_4           = dword ptr  8

                mov     edx, [esp+arg_4]
                lea     eax, [edx-8]
                mov     ecx, [edx-0Ch]
                xor     ecx, eax
                call    f_check_gs_failure
                mov     eax, offset unk_1006145C
                jmp     ___CxxFrameHandler3
sub_1004BE28    endp

; int __thiscall AES___AES(void *, char)
AES___AES       proc near               ; DATA XREF: .rdata:const AES::`vftable'o

arg_0           = byte ptr  4

                push    esi
                mov     esi, ecx
                push    0F0h            ; size_t
                lea     eax, [esi+8]
                push    0               ; int
                push    eax             ; void *
                mov     dword ptr [esi+4], 0
                call    crt_memset
                push    0F0h            ; size_t
                lea     ecx, [esi+0F8h]
                push    0               ; int
                push    ecx             ; void *
                call    crt_memset
                add     esp, 18h
                test    [esp+4+arg_0], 1
                mov     dword ptr [esi], offset ??_7BlockCipher@@6B@ ; const BlockCipher::`vftable'
                jz      short loc_1000C326
                push    esi             ; void *
                call    j__free
                add     esp, 4

loc_1000C326:                           ; CODE XREF: AES___AES+3Bj
                mov     eax, esi
                pop     esi
                retn    4
AES___AES       endp
AES__blockBits  proc near               ; DATA XREF: .rdata:10060204o
                mov     eax, 80h
                retn
AES__blockBits  endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


AES__blockSize  proc near               ; DATA XREF: .rdata:10060208o
                mov     eax, 10h
                retn
AES__blockSize  endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


AES__keyBits    proc near               ; DATA XREF: .rdata:1006020Co
                mov     eax, [ecx+4]
                sub     eax, 6
                shl     eax, 5
                retn
AES__keyBits    endp

AES__keySize    proc near               ; DATA XREF: .rdata:10060210o
                mov     eax, [ecx+4]
                lea     eax, ds:0FFFFFFE8h[eax*4]
                retn
AES__keySize    endp


; int __stdcall AES__byteInt(int this_1, int a2)
AES__byteInt    proc near               ; DATA XREF: .rdata:10060214o
                                        ; .rdata:10060218o

this_1          = dword ptr  4
a2              = dword ptr  8

                mov     ecx, [esp+this_1]
                mov     eax, [ecx]
                mov     edx, [esp+a2]
                push    esi
                mov     esi, eax
                ror     esi, 8
                and     esi, 0FF00FF00h
                rol     eax, 8
                and     eax, 0FF00FFh
                or      esi, eax
                mov     [edx], esi
                mov     eax, [ecx+4]
                mov     esi, eax
                ror     esi, 8
                and     esi, 0FF00FF00h
                rol     eax, 8
                and     eax, 0FF00FFh
                or      esi, eax
                mov     [edx+4], esi
                mov     eax, [ecx+8]
                mov     esi, eax
                ror     esi, 8
                and     esi, 0FF00FF00h
                rol     eax, 8
                and     eax, 0FF00FFh
                or      esi, eax
                mov     [edx+8], esi
                mov     eax, [ecx+0Ch]
                mov     ecx, eax
                ror     ecx, 8
                and     ecx, 0FF00FF00h
                rol     eax, 8
                and     eax, 0FF00FFh
                or      ecx, eax
                mov     [edx+0Ch], ecx
                pop     esi
                retn    8
AES__byteInt    endp
; int __thiscall AES__makeKey(int a1, int cipherKey, int keySize, int dir)
AES__makeKey    proc near               ; DATA XREF: .rdata:1006021Co

cipherKey       = dword ptr  4
keySize         = dword ptr  8
dir             = dword ptr  0Ch

                mov     eax, [esp+keySize]
                push    edi
                mov     edi, ecx
                lea     ecx, [eax-10h]
                cmp     ecx, 0F0h       ; switch 241 cases
                ja      short loc_1000CB0A ; default
                                        ; jumptable 1000CAD9 cases 1-7,9-15,17-111,113-175,177-239
                movzx   ecx, ds:byte_1000CB30[ecx]
                jmp     ds:off_1000CB24[ecx*4] ; switch jump

loc_1000CAE0:                           ; DATA XREF: .text:off_1000CB24o
                add     eax, eax        ; jumptable 1000CAD9 cases 0,8,16
                add     eax, eax
                add     eax, eax

loc_1000CAE6:                           ; CODE XREF: AES__makeKey+19j
                                        ; DATA XREF: .text:off_1000CB24o
                cmp     [esp+4+dir], 0  ; jumptable 1000CAD9 cases 112,176,240
                jz      short loc_1000CB06
                mov     ecx, [esp+4+cipherKey] ; this
                push    ebx             ; a2
                mov     ebx, edi
                call    AES__ExpandKey
                test    byte ptr [esp+8+dir], 2
                pop     ebx
                jz      short loc_1000CB06
                call    AES__InvertKey

loc_1000CB06:                           ; CODE XREF: AES__makeKey+2Bj
                                        ; AES__makeKey+3Fj
                pop     edi
                retn    0Ch
; ---------------------------------------------------------------------------

loc_1000CB0A:                           ; CODE XREF: AES__makeKey+10j
                                        ; AES__makeKey+19j
                                        ; DATA XREF: ...
                push    offset unk_10061444 ; default
                                        ; jumptable 1000CAD9 cases 1-7,9-15,17-111,113-175,177-239
                lea     edx, [esp+8+dir]
                push    edx
                mov     [esp+0Ch+dir], offset aInvalidAesKeyS ; "Invalid AES key size"
                call    __CxxThrowException@8 ; _CxxThrowException(x,x)
                
                
                
off_1000CB24    dd offset loc_1000CAE0, offset loc_1000CAE6, offset loc_1000CB0A
                                        ; DATA XREF: AES__makeKey+19r
                                        ; jump table for switch statement
byte_1000CB30   db 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2
                                        ; DATA XREF: AES__makeKey+12r
                db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 ; indirect table for switch statement
                db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
                db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
                db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
                db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
                db 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
                db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
                db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
                db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2
                db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
                db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
                db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
                db 2, 2, 2, 2, 2, 2, 1
                align 10h
                
AES__makeKey    endp
; int __thiscall AES__InvertKey(int this)
AES__InvertKey  proc near               ; CODE XREF: AES__makeKey+41p
                mov     eax, [edi+4]
                shl     eax, 4
                mov     edx, [eax+edi+8]
                lea     eax, [eax+edi+8]
                mov     [edi+0F8h], edx
                mov     edx, [eax+4]
                lea     ecx, [edi+0F8h]
                mov     [ecx+4], edx
                mov     edx, [eax+8]
                mov     [ecx+8], edx
                mov     edx, [eax+0Ch]
                push    esi
                mov     [ecx+0Ch], edx
                mov     esi, 1
                add     ecx, 10h
                sub     eax, 10h
                cmp     [edi+4], esi
                jbe     loc_1000CA19
                push    ebx
                push    ebp

loc_1000C863:                           ; CODE XREF: AES__InvertKey+1F1j
                mov     edx, [eax]
                movzx   ebx, byte ptr [eax+1]
                mov     ebx, ds:Te4[ebx*4]
                and     ebx, 0FFh
                mov     ebx, ds:Td2[ebx*4]
                mov     ebp, edx
                shr     ebp, 18h
                mov     ebp, ds:Te4[ebp*4]
                and     ebp, 0FFh
                xor     ebx, ds:Td0[ebp*4]
                movzx   ebp, byte ptr [eax+2]
                mov     ebp, ds:Te4[ebp*4]
                and     ebp, 0FFh
                xor     ebx, ds:Td1[ebp*4]
                and     edx, 0FFh
                mov     edx, ds:Te4[edx*4]
                and     edx, 0FFh
                xor     ebx, ds:Td3[edx*4]
                add     esi, 1
                mov     [ecx], ebx
                mov     edx, [eax+4]
                movzx   ebp, byte ptr [eax+5]
                mov     ebp, ds:Te4[ebp*4]
                mov     ebx, edx
                shr     ebx, 18h
                mov     ebx, ds:Te4[ebx*4]
                and     ebx, 0FFh
                mov     ebx, ds:Td0[ebx*4]
                and     ebp, 0FFh
                xor     ebx, ds:Td2[ebp*4]
                movzx   ebp, byte ptr [eax+6]
                mov     ebp, ds:Te4[ebp*4]
                and     ebp, 0FFh
                xor     ebx, ds:Td1[ebp*4]
                and     edx, 0FFh
                mov     edx, ds:Te4[edx*4]
                and     edx, 0FFh
                xor     ebx, ds:Td3[edx*4]
                add     ecx, 10h
                mov     [ecx-0Ch], ebx
                mov     edx, [eax+8]
                movzx   ebp, byte ptr [eax+9]
                mov     ebp, ds:Te4[ebp*4]
                mov     ebx, edx
                shr     ebx, 18h
                mov     ebx, ds:Te4[ebx*4]
                and     ebx, 0FFh
                mov     ebx, ds:Td0[ebx*4]
                and     ebp, 0FFh
                xor     ebx, ds:Td2[ebp*4]
                movzx   ebp, byte ptr [eax+0Ah]
                mov     ebp, ds:Te4[ebp*4]
                and     ebp, 0FFh
                xor     ebx, ds:Td1[ebp*4]
                and     edx, 0FFh
                mov     edx, ds:Te4[edx*4]
                and     edx, 0FFh
                xor     ebx, ds:Td3[edx*4]
                sub     eax, 10h
                mov     [ecx-8], ebx
                mov     edx, [eax+1Ch]
                movzx   ebp, byte ptr [eax+1Dh]
                mov     ebp, ds:Te4[ebp*4]
                mov     ebx, edx
                shr     ebx, 18h
                mov     ebx, ds:Te4[ebx*4]
                and     ebx, 0FFh
                mov     ebx, ds:Td0[ebx*4]
                and     ebp, 0FFh
                xor     ebx, ds:Td2[ebp*4]
                movzx   ebp, byte ptr [eax+1Eh]
                mov     ebp, ds:Te4[ebp*4]
                and     edx, 0FFh
                mov     edx, ds:Te4[edx*4]
                and     ebp, 0FFh
                xor     ebx, ds:Td1[ebp*4]
                and     edx, 0FFh
                xor     ebx, ds:Td3[edx*4]
                mov     [ecx-4], ebx
                cmp     esi, [edi+4]
                jb      loc_1000C863
                pop     ebp
                pop     ebx

loc_1000CA19:                           ; CODE XREF: AES__InvertKey+3Bj
                mov     edx, [eax]
                mov     [ecx], edx
                mov     edx, [eax+4]
                mov     [ecx+4], edx
                mov     edx, [eax+8]
                mov     [ecx+8], edx
                mov     eax, [eax+0Ch]
                mov     [ecx+0Ch], eax
                pop     esi
                retn
AES__InvertKey  endp


AES__encrypt    proc near               ; DATA XREF: .rdata:10060220o

var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                sub     esp, 10h
                push    ebx
                mov     ebx, [esp+14h+arg_0]
                push    ebp
                push    esi
                mov     ebp, ecx
                mov     ecx, [ebp+10h]
                xor     ecx, [ebx+8]
                mov     esi, [ebp+0Ch]
                xor     esi, [ebx+4]
                mov     edx, [ebp+8]
                xor     edx, [ebx]
                mov     [esp+1Ch+var_10], esi
                shr     esi, 10h
                and     esi, 0FFh
                lea     eax, [ebp+8]
                mov     [esp+1Ch+var_C], ecx
                movzx   ecx, ch
                mov     ecx, ds:Te2[ecx*4]
                xor     ecx, ds:Te1[esi*4]
                push    edi
                mov     edi, [eax+0Ch]
                xor     edi, [ebx+0Ch]
                mov     esi, edx
                shr     esi, 18h
                xor     ecx, ds:Te0[esi*4]
                mov     [esp+20h+var_4], edi
                movzx   esi, byte ptr [esp+20h+var_4+1]
                mov     esi, ds:Te2[esi*4]
                and     edi, 0FFh
                xor     ecx, ds:Te3[edi*4]
                mov     edi, [esp+20h+var_C]
                shr     edi, 10h
                and     edi, 0FFh
                xor     esi, ds:Te1[edi*4]
                mov     edi, [esp+20h+var_10]
                mov     ebx, edx
                shr     edi, 18h
                xor     esi, ds:Te0[edi*4]
                mov     edi, 0FFh
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                movzx   ebx, dh
                xor     esi, [eax+14h]
                xor     ecx, [eax+10h]
                mov     [esp+20h+arg_0], esi
                mov     esi, [esp+20h+var_4]
                shr     esi, 10h
                and     esi, edi
                mov     esi, ds:Te1[esi*4]
                xor     esi, ds:Te2[ebx*4]
                mov     ebx, [esp+20h+var_C]
                shr     ebx, 18h
                xor     esi, ds:Te0[ebx*4]
                mov     ebx, [esp+20h+var_10]
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                mov     ebx, [esp+20h+arg_0]
                xor     esi, [eax+18h]
                shr     edx, 10h
                mov     [esp+20h+var_8], esi
                movzx   esi, byte ptr [esp+20h+var_10+1]
                mov     esi, ds:Te2[esi*4]
                and     edx, edi
                xor     esi, ds:Te1[edx*4]
                mov     edx, [esp+20h+var_4]
                shr     edx, 18h
                xor     esi, ds:Te0[edx*4]
                mov     edx, [esp+20h+var_C]
                and     edx, edi
                xor     esi, ds:Te3[edx*4]
                movzx   edx, byte ptr [esp+20h+var_8+1]
                mov     edx, ds:Te2[edx*4]
                xor     esi, [eax+1Ch]
                shr     ebx, 10h
                and     ebx, edi
                xor     edx, ds:Te1[ebx*4]
                mov     ebx, ecx
                shr     ebx, 18h
                xor     edx, ds:Te0[ebx*4]
                mov     [esp+20h+var_4], esi
                and     esi, edi
                xor     edx, ds:Te3[esi*4]
                movzx   esi, byte ptr [esp+20h+var_4+1]
                mov     esi, ds:Te2[esi*4]
                mov     ebx, [esp+20h+var_8]
                shr     ebx, 10h
                and     ebx, edi
                xor     esi, ds:Te1[ebx*4]
                mov     ebx, [esp+20h+arg_0]
                shr     ebx, 18h
                xor     esi, ds:Te0[ebx*4]
                mov     ebx, ecx
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                movzx   ebx, ch
                xor     esi, [eax+24h]
                xor     edx, [eax+20h]
                mov     [esp+20h+var_10], esi
                mov     esi, [esp+20h+var_4]
                shr     esi, 10h
                and     esi, edi
                mov     esi, ds:Te1[esi*4]
                xor     esi, ds:Te2[ebx*4]
                mov     ebx, [esp+20h+arg_0]
                mov     [esp+20h+var_C], esi
                mov     esi, [esp+20h+var_8]
                shr     esi, 18h
                mov     esi, ds:Te0[esi*4]
                xor     [esp+20h+var_C], esi
                mov     esi, [esp+20h+var_C]
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                mov     ebx, [esp+20h+var_10]
                xor     esi, [eax+28h]
                shr     ecx, 10h
                mov     [esp+20h+var_C], esi
                movzx   esi, byte ptr [esp+20h+arg_0+1]
                mov     esi, ds:Te2[esi*4]
                and     ecx, edi
                xor     esi, ds:Te1[ecx*4]
                mov     ecx, [esp+20h+var_4]
                shr     ecx, 18h
                xor     esi, ds:Te0[ecx*4]
                mov     ecx, [esp+20h+var_8]
                and     ecx, edi
                xor     esi, ds:Te3[ecx*4]
                movzx   ecx, byte ptr [esp+20h+var_C+1]
                xor     esi, [eax+2Ch]
                mov     ecx, ds:Te2[ecx*4]
                shr     ebx, 10h
                and     ebx, edi
                xor     ecx, ds:Te1[ebx*4]
                mov     [esp+20h+var_4], esi
                and     esi, edi
                mov     ebx, edx
                shr     ebx, 18h
                xor     ecx, ds:Te0[ebx*4]
                mov     ebx, [esp+20h+var_C]
                xor     ecx, ds:Te3[esi*4]
                movzx   esi, byte ptr [esp+20h+var_4+1]
                mov     esi, ds:Te2[esi*4]
                shr     ebx, 10h
                and     ebx, edi
                xor     esi, ds:Te1[ebx*4]
                mov     ebx, [esp+20h+var_10]
                xor     ecx, [eax+30h]
                shr     ebx, 18h
                xor     esi, ds:Te0[ebx*4]
                mov     ebx, edx
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                movzx   ebx, dh
                xor     esi, [eax+34h]
                mov     [esp+20h+arg_0], esi
                mov     esi, [esp+20h+var_4]
                shr     esi, 10h
                and     esi, edi
                mov     esi, ds:Te1[esi*4]
                xor     esi, ds:Te2[ebx*4]
                mov     [esp+20h+var_8], esi
                mov     esi, [esp+20h+var_C]
                shr     esi, 18h
                mov     esi, ds:Te0[esi*4]
                xor     [esp+20h+var_8], esi
                mov     ebx, [esp+20h+var_10]
                mov     esi, [esp+20h+var_8]
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                mov     ebx, [esp+20h+arg_0]
                xor     esi, [eax+38h]
                shr     edx, 10h
                mov     [esp+20h+var_8], esi
                movzx   esi, byte ptr [esp+20h+var_10+1]
                mov     esi, ds:Te2[esi*4]
                and     edx, edi
                xor     esi, ds:Te1[edx*4]
                mov     edx, [esp+20h+var_4]
                shr     edx, 18h
                xor     esi, ds:Te0[edx*4]
                mov     edx, [esp+20h+var_C]
                shr     ebx, 10h
                and     ebx, edi
                and     edx, edi
                xor     esi, ds:Te3[edx*4]
                movzx   edx, byte ptr [esp+20h+var_8+1]
                xor     esi, [eax+3Ch]
                mov     edx, ds:Te2[edx*4]
                xor     edx, ds:Te1[ebx*4]
                mov     [esp+20h+var_4], esi
                and     esi, edi
                mov     ebx, ecx
                shr     ebx, 18h
                xor     edx, ds:Te0[ebx*4]
                mov     ebx, [esp+20h+var_8]
                xor     edx, ds:Te3[esi*4]
                movzx   esi, byte ptr [esp+20h+var_4+1]
                mov     esi, ds:Te2[esi*4]
                shr     ebx, 10h
                and     ebx, edi
                xor     esi, ds:Te1[ebx*4]
                mov     ebx, [esp+20h+arg_0]
                shr     ebx, 18h
                xor     esi, ds:Te0[ebx*4]
                mov     ebx, ecx
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                movzx   ebx, ch
                xor     esi, [eax+44h]
                xor     edx, [eax+40h]
                mov     [esp+20h+var_10], esi
                mov     esi, [esp+20h+var_4]
                shr     esi, 10h
                and     esi, edi
                mov     esi, ds:Te1[esi*4]
                xor     esi, ds:Te2[ebx*4]
                mov     ebx, [esp+20h+arg_0]
                mov     [esp+20h+var_C], esi
                mov     esi, [esp+20h+var_8]
                shr     esi, 18h
                mov     esi, ds:Te0[esi*4]
                xor     [esp+20h+var_C], esi
                mov     esi, [esp+20h+var_C]
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                mov     ebx, [esp+20h+var_10]
                xor     esi, [eax+48h]
                shr     ecx, 10h
                mov     [esp+20h+var_C], esi
                movzx   esi, byte ptr [esp+20h+arg_0+1]
                mov     esi, ds:Te2[esi*4]
                and     ecx, edi
                xor     esi, ds:Te1[ecx*4]
                mov     ecx, [esp+20h+var_4]
                shr     ecx, 18h
                xor     esi, ds:Te0[ecx*4]
                mov     ecx, [esp+20h+var_8]
                and     ecx, edi
                xor     esi, ds:Te3[ecx*4]
                movzx   ecx, byte ptr [esp+20h+var_C+1]
                xor     esi, [eax+4Ch]
                shr     ebx, 10h
                mov     [esp+20h+var_4], esi
                and     ebx, edi
                mov     ecx, ds:Te2[ecx*4]
                xor     ecx, ds:Te1[ebx*4]
                and     esi, edi
                mov     ebx, edx
                shr     ebx, 18h
                xor     ecx, ds:Te0[ebx*4]
                mov     ebx, [esp+20h+var_C]
                xor     ecx, ds:Te3[esi*4]
                movzx   esi, byte ptr [esp+20h+var_4+1]
                mov     esi, ds:Te2[esi*4]
                shr     ebx, 10h
                and     ebx, edi
                xor     esi, ds:Te1[ebx*4]
                mov     ebx, [esp+20h+var_10]
                shr     ebx, 18h
                xor     esi, ds:Te0[ebx*4]
                mov     ebx, edx
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                movzx   ebx, dh
                xor     esi, [eax+54h]
                xor     ecx, [eax+50h]
                mov     [esp+20h+arg_0], esi
                mov     esi, [esp+20h+var_4]
                shr     esi, 10h
                and     esi, edi
                mov     esi, ds:Te1[esi*4]
                xor     esi, ds:Te2[ebx*4]
                mov     ebx, [esp+20h+var_10]
                mov     [esp+20h+var_8], esi
                mov     esi, [esp+20h+var_C]
                shr     esi, 18h
                mov     esi, ds:Te0[esi*4]
                xor     [esp+20h+var_8], esi
                mov     esi, [esp+20h+var_8]
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                mov     ebx, [esp+20h+arg_0]
                xor     esi, [eax+58h]
                shr     edx, 10h
                mov     [esp+20h+var_8], esi
                movzx   esi, byte ptr [esp+20h+var_10+1]
                mov     esi, ds:Te2[esi*4]
                and     edx, edi
                xor     esi, ds:Te1[edx*4]
                mov     edx, [esp+20h+var_4]
                shr     edx, 18h
                xor     esi, ds:Te0[edx*4]
                mov     edx, [esp+20h+var_C]
                and     edx, edi
                xor     esi, ds:Te3[edx*4]
                movzx   edx, byte ptr [esp+20h+var_8+1]
                xor     esi, [eax+5Ch]
                mov     edx, ds:Te2[edx*4]
                shr     ebx, 10h
                and     ebx, edi
                xor     edx, ds:Te1[ebx*4]
                mov     [esp+20h+var_4], esi
                and     esi, edi
                mov     ebx, ecx
                shr     ebx, 18h
                xor     edx, ds:Te0[ebx*4]
                mov     ebx, [esp+20h+var_8]
                xor     edx, ds:Te3[esi*4]
                movzx   esi, byte ptr [esp+20h+var_4+1]
                mov     esi, ds:Te2[esi*4]
                xor     edx, [eax+60h]
                shr     ebx, 10h
                and     ebx, edi
                xor     esi, ds:Te1[ebx*4]
                mov     ebx, [esp+20h+arg_0]
                shr     ebx, 18h
                xor     esi, ds:Te0[ebx*4]
                mov     ebx, ecx
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                xor     esi, [eax+64h]
                mov     [esp+20h+var_10], esi
                mov     esi, [esp+20h+var_4]
                shr     esi, 10h
                and     esi, edi
                mov     esi, ds:Te1[esi*4]
                movzx   ebx, ch
                xor     esi, ds:Te2[ebx*4]
                mov     ebx, [esp+20h+arg_0]
                mov     [esp+20h+var_C], esi
                mov     esi, [esp+20h+var_8]
                shr     esi, 18h
                mov     esi, ds:Te0[esi*4]
                xor     [esp+20h+var_C], esi
                mov     esi, [esp+20h+var_C]
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                mov     ebx, [esp+20h+var_10]
                xor     esi, [eax+68h]
                shr     ecx, 10h
                mov     [esp+20h+var_C], esi
                movzx   esi, byte ptr [esp+20h+arg_0+1]
                mov     esi, ds:Te2[esi*4]
                and     ecx, edi
                xor     esi, ds:Te1[ecx*4]
                mov     ecx, [esp+20h+var_4]
                shr     ecx, 18h
                xor     esi, ds:Te0[ecx*4]
                mov     ecx, [esp+20h+var_8]
                shr     ebx, 10h
                and     ecx, edi
                xor     esi, ds:Te3[ecx*4]
                movzx   ecx, byte ptr [esp+20h+var_C+1]
                xor     esi, [eax+6Ch]
                mov     ecx, ds:Te2[ecx*4]
                mov     [esp+20h+var_4], esi
                and     esi, edi
                and     ebx, edi
                xor     ecx, ds:Te1[ebx*4]
                mov     ebx, edx
                shr     ebx, 18h
                xor     ecx, ds:Te0[ebx*4]
                mov     ebx, [esp+20h+var_C]
                xor     ecx, ds:Te3[esi*4]
                movzx   esi, byte ptr [esp+20h+var_4+1]
                mov     esi, ds:Te2[esi*4]
                shr     ebx, 10h
                and     ebx, edi
                xor     esi, ds:Te1[ebx*4]
                mov     ebx, [esp+20h+var_10]
                shr     ebx, 18h
                xor     esi, ds:Te0[ebx*4]
                mov     ebx, edx
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                movzx   ebx, dh
                xor     esi, [eax+74h]
                xor     ecx, [eax+70h]
                mov     [esp+20h+arg_0], esi
                mov     esi, [esp+20h+var_4]
                shr     esi, 10h
                and     esi, edi
                mov     esi, ds:Te1[esi*4]
                xor     esi, ds:Te2[ebx*4]
                mov     ebx, [esp+20h+var_10]
                mov     [esp+20h+var_8], esi
                mov     esi, [esp+20h+var_C]
                shr     esi, 18h
                mov     esi, ds:Te0[esi*4]
                xor     [esp+20h+var_8], esi
                mov     esi, [esp+20h+var_8]
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                shr     edx, 10h
                xor     esi, [eax+78h]
                and     edx, edi
                mov     [esp+20h+var_8], esi
                movzx   esi, byte ptr [esp+20h+var_10+1]
                mov     esi, ds:Te2[esi*4]
                xor     esi, ds:Te1[edx*4]
                mov     edx, [esp+20h+var_4]
                shr     edx, 18h
                xor     esi, ds:Te0[edx*4]
                mov     edx, [esp+20h+var_C]
                and     edx, edi
                xor     esi, ds:Te3[edx*4]
                xor     esi, [eax+7Ch]
                mov     ebx, [esp+20h+arg_0]
                movzx   edx, byte ptr [esp+20h+var_8+1]
                mov     edx, ds:Te2[edx*4]
                mov     [esp+20h+var_4], esi
                and     esi, edi
                shr     ebx, 10h
                and     ebx, edi
                xor     edx, ds:Te1[ebx*4]
                mov     ebx, ecx
                shr     ebx, 18h
                xor     edx, ds:Te0[ebx*4]
                mov     ebx, [esp+20h+var_8]
                xor     edx, ds:Te3[esi*4]
                movzx   esi, byte ptr [esp+20h+var_4+1]
                mov     esi, ds:Te2[esi*4]
                shr     ebx, 10h
                and     ebx, edi
                xor     esi, ds:Te1[ebx*4]
                mov     ebx, [esp+20h+arg_0]
                shr     ebx, 18h
                xor     esi, ds:Te0[ebx*4]
                mov     ebx, ecx
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                movzx   ebx, ch
                xor     esi, [eax+84h]
                xor     edx, [eax+80h]
                mov     [esp+20h+var_10], esi
                mov     esi, [esp+20h+var_4]
                shr     esi, 10h
                and     esi, edi
                mov     esi, ds:Te1[esi*4]
                xor     esi, ds:Te2[ebx*4]
                mov     ebx, [esp+20h+arg_0]
                mov     [esp+20h+var_C], esi
                mov     esi, [esp+20h+var_8]
                shr     esi, 18h
                mov     esi, ds:Te0[esi*4]
                xor     [esp+20h+var_C], esi
                mov     esi, [esp+20h+var_C]
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                shr     ecx, 10h
                xor     esi, [eax+88h]
                and     ecx, edi
                mov     [esp+20h+var_C], esi
                movzx   esi, byte ptr [esp+20h+arg_0+1]
                mov     ebx, ds:Te2[esi*4]
                xor     ebx, ds:Te1[ecx*4]
                mov     ecx, [esp+20h+var_4]
                mov     esi, [esp+20h+var_10]
                shr     ecx, 18h
                xor     ebx, ds:Te0[ecx*4]
                mov     ecx, [esp+20h+var_8]
                and     ecx, edi
                xor     ebx, ds:Te3[ecx*4]
                movzx   ecx, byte ptr [esp+20h+var_C+1]
                xor     ebx, [eax+8Ch]
                shr     esi, 10h
                and     esi, edi
                mov     [esp+20h+arg_0], esi
                mov     esi, ds:Te2[ecx*4]
                mov     ecx, [esp+20h+arg_0]
                xor     esi, ds:Te1[ecx*4]
                mov     ecx, edx
                shr     ecx, 18h
                xor     esi, ds:Te0[ecx*4]
                mov     ecx, ebx
                and     ecx, edi
                xor     esi, ds:Te3[ecx*4]
                movzx   ecx, bh
                xor     esi, [eax+90h]
                mov     [esp+20h+var_4], esi
                mov     esi, [esp+20h+var_C]
                shr     esi, 10h
                and     esi, edi
                mov     [esp+20h+arg_0], esi
                mov     esi, ds:Te2[ecx*4]
                mov     ecx, [esp+20h+arg_0]
                xor     esi, ds:Te1[ecx*4]
                mov     ecx, [esp+20h+var_10]
                shr     ecx, 18h
                xor     esi, ds:Te0[ecx*4]
                mov     ecx, edx
                and     ecx, edi
                xor     esi, ds:Te3[ecx*4]
                mov     ecx, ebx
                xor     esi, [eax+94h]
                shr     ecx, 10h
                and     ecx, edi
                mov     [esp+20h+arg_0], esi
                movzx   esi, dh
                mov     [esp+20h+var_8], esi
                mov     esi, ds:Te1[ecx*4]
                mov     ecx, [esp+20h+var_8]
                xor     esi, ds:Te2[ecx*4]
                mov     ecx, [esp+20h+var_C]
                shr     ecx, 18h
                mov     ecx, ds:Te0[ecx*4]
                mov     ebp, [ebp+4]
                mov     [esp+20h+var_8], esi
                xor     [esp+20h+var_8], ecx
                mov     ecx, [esp+20h+var_10]
                mov     esi, [esp+20h+var_8]
                and     ecx, edi
                xor     esi, ds:Te3[ecx*4]
                movzx   ecx, byte ptr [esp+20h+var_10+1]
                mov     ecx, ds:Te2[ecx*4]
                xor     esi, [eax+98h]
                shr     edx, 10h
                and     edx, edi
                xor     ecx, ds:Te1[edx*4]
                mov     edx, [esp+20h+var_C]
                shr     ebx, 18h
                xor     ecx, ds:Te0[ebx*4]
                and     edx, edi
                xor     ecx, ds:Te3[edx*4]
                mov     [esp+20h+var_8], esi
                xor     ecx, [eax+9Ch]
                cmp     ebp, 0Ah
                jbe     loc_1000D91F
                mov     esi, [esp+20h+arg_0]
                shr     esi, 10h
                and     esi, edi
                movzx   edx, byte ptr [esp+20h+var_8+1]
                mov     edx, ds:Te2[edx*4]
                xor     edx, ds:Te1[esi*4]
                mov     esi, [esp+20h+var_4]
                shr     esi, 18h
                xor     edx, ds:Te0[esi*4]
                mov     ebx, [esp+20h+var_8]
                mov     esi, ecx
                and     esi, edi
                xor     edx, ds:Te3[esi*4]
                movzx   esi, ch
                mov     esi, ds:Te2[esi*4]
                shr     ebx, 10h
                and     ebx, edi
                xor     esi, ds:Te1[ebx*4]
                mov     ebx, [esp+20h+var_4]
                mov     [esp+20h+var_C], esi
                mov     esi, [esp+20h+arg_0]
                shr     esi, 18h
                mov     esi, ds:Te0[esi*4]
                xor     [esp+20h+var_C], esi
                mov     esi, [esp+20h+var_C]
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                movzx   ebx, byte ptr [esp+20h+var_4+1]
                xor     esi, [eax+0A4h]
                xor     edx, [eax+0A0h]
                mov     [esp+20h+var_10], esi
                mov     esi, ecx
                shr     esi, 10h
                and     esi, edi
                mov     esi, ds:Te1[esi*4]
                xor     esi, ds:Te2[ebx*4]
                mov     ebx, [esp+20h+arg_0]
                mov     [esp+20h+var_C], esi
                mov     esi, [esp+20h+var_8]
                shr     esi, 18h
                mov     esi, ds:Te0[esi*4]
                xor     [esp+20h+var_C], esi
                mov     esi, [esp+20h+var_C]
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                mov     ebx, [esp+20h+var_4]
                xor     esi, [eax+0A8h]
                shr     ebx, 10h
                mov     [esp+20h+var_C], esi
                movzx   esi, byte ptr [esp+20h+arg_0+1]
                and     ebx, edi
                shr     ecx, 18h
                mov     [esp+20h+arg_0], ebx
                mov     ebx, ds:Te2[esi*4]
                mov     esi, [esp+20h+arg_0]
                xor     ebx, ds:Te1[esi*4]
                mov     esi, [esp+20h+var_10]
                xor     ebx, ds:Te0[ecx*4]
                mov     ecx, [esp+20h+var_8]
                and     ecx, edi
                xor     ebx, ds:Te3[ecx*4]
                movzx   ecx, byte ptr [esp+20h+var_C+1]
                mov     ecx, ds:Te2[ecx*4]
                xor     ebx, [eax+0ACh]
                shr     esi, 10h
                and     esi, edi
                xor     ecx, ds:Te1[esi*4]
                mov     esi, edx
                shr     esi, 18h
                xor     ecx, ds:Te0[esi*4]
                mov     esi, ebx
                and     esi, edi
                xor     ecx, ds:Te3[esi*4]
                mov     esi, [esp+20h+var_C]
                xor     ecx, [eax+0B0h]
                shr     esi, 10h
                mov     [esp+20h+var_4], ecx
                movzx   ecx, bh
                mov     ecx, ds:Te2[ecx*4]
                and     esi, edi
                xor     ecx, ds:Te1[esi*4]
                mov     esi, [esp+20h+var_10]
                shr     esi, 18h
                xor     ecx, ds:Te0[esi*4]
                mov     esi, edx
                and     esi, edi
                xor     ecx, ds:Te3[esi*4]
                movzx   esi, dh
                xor     ecx, [eax+0B4h]
                shr     edx, 10h
                mov     [esp+20h+arg_0], ecx
                mov     ecx, ebx
                shr     ecx, 10h
                and     ecx, edi
                mov     ecx, ds:Te1[ecx*4]
                xor     ecx, ds:Te2[esi*4]
                mov     esi, [esp+20h+var_C]
                shr     esi, 18h
                xor     ecx, ds:Te0[esi*4]
                mov     esi, [esp+20h+var_10]
                and     esi, edi
                xor     ecx, ds:Te3[esi*4]
                and     edx, edi
                xor     ecx, [eax+0B8h]
                shr     ebx, 18h
                mov     [esp+20h+var_8], ecx
                movzx   ecx, byte ptr [esp+20h+var_10+1]
                mov     esi, ds:Te2[ecx*4]
                xor     esi, ds:Te1[edx*4]
                mov     ecx, [esp+20h+var_C]
                xor     esi, ds:Te0[ebx*4]
                and     ecx, edi
                xor     esi, ds:Te3[ecx*4]
                xor     esi, [eax+0BCh]
                cmp     ebp, 0Ch
                mov     ecx, esi
                jbe     loc_1000D91F
                mov     esi, [esp+20h+arg_0]
                shr     esi, 10h
                and     esi, edi
                movzx   edx, byte ptr [esp+20h+var_8+1]
                mov     edx, ds:Te2[edx*4]
                xor     edx, ds:Te1[esi*4]
                mov     esi, [esp+20h+var_4]
                shr     esi, 18h
                xor     edx, ds:Te0[esi*4]
                mov     ebx, [esp+20h+var_8]
                mov     esi, ecx
                and     esi, edi
                xor     edx, ds:Te3[esi*4]
                movzx   esi, ch
                mov     esi, ds:Te2[esi*4]
                shr     ebx, 10h
                and     ebx, edi
                xor     esi, ds:Te1[ebx*4]
                mov     ebx, [esp+20h+var_4]
                mov     [esp+20h+var_C], esi
                mov     esi, [esp+20h+arg_0]
                shr     esi, 18h
                mov     esi, ds:Te0[esi*4]
                xor     [esp+20h+var_C], esi
                mov     esi, [esp+20h+var_C]
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                movzx   ebx, byte ptr [esp+20h+var_4+1]
                xor     esi, [eax+0C4h]
                xor     edx, [eax+0C0h]
                mov     [esp+20h+var_10], esi
                mov     esi, ecx
                shr     esi, 10h
                and     esi, edi
                mov     esi, ds:Te1[esi*4]
                xor     esi, ds:Te2[ebx*4]
                mov     ebx, [esp+20h+arg_0]
                mov     [esp+20h+var_C], esi
                mov     esi, [esp+20h+var_8]
                shr     esi, 18h
                mov     esi, ds:Te0[esi*4]
                xor     [esp+20h+var_C], esi
                mov     esi, [esp+20h+var_C]
                and     ebx, edi
                xor     esi, ds:Te3[ebx*4]
                mov     ebx, [esp+20h+var_4]
                xor     esi, [eax+0C8h]
                shr     ebx, 10h
                mov     [esp+20h+var_C], esi
                movzx   esi, byte ptr [esp+20h+arg_0+1]
                and     ebx, edi
                shr     ecx, 18h
                mov     [esp+20h+arg_0], ebx
                mov     ebx, ds:Te2[esi*4]
                mov     esi, [esp+20h+arg_0]
                xor     ebx, ds:Te1[esi*4]
                mov     esi, [esp+20h+var_10]
                xor     ebx, ds:Te0[ecx*4]
                mov     ecx, [esp+20h+var_8]
                and     ecx, edi
                xor     ebx, ds:Te3[ecx*4]
                movzx   ecx, byte ptr [esp+20h+var_C+1]
                mov     ecx, ds:Te2[ecx*4]
                xor     ebx, [eax+0CCh]
                shr     esi, 10h
                and     esi, edi
                xor     ecx, ds:Te1[esi*4]
                mov     esi, edx
                shr     esi, 18h
                xor     ecx, ds:Te0[esi*4]
                mov     esi, ebx
                and     esi, edi
                xor     ecx, ds:Te3[esi*4]
                mov     esi, [esp+20h+var_C]
                xor     ecx, [eax+0D0h]
                shr     esi, 10h
                mov     [esp+20h+var_4], ecx
                movzx   ecx, bh
                mov     ecx, ds:Te2[ecx*4]
                and     esi, edi
                xor     ecx, ds:Te1[esi*4]
                mov     esi, [esp+20h+var_10]
                shr     esi, 18h
                xor     ecx, ds:Te0[esi*4]
                mov     esi, edx
                and     esi, edi
                xor     ecx, ds:Te3[esi*4]
                movzx   esi, dh
                xor     ecx, [eax+0D4h]
                shr     edx, 10h
                mov     [esp+20h+arg_0], ecx
                mov     ecx, ebx
                shr     ecx, 10h
                and     ecx, edi
                mov     ecx, ds:Te1[ecx*4]
                xor     ecx, ds:Te2[esi*4]
                mov     esi, [esp+20h+var_C]
                shr     esi, 18h
                xor     ecx, ds:Te0[esi*4]
                mov     esi, [esp+20h+var_10]
                and     esi, edi
                xor     ecx, ds:Te3[esi*4]
                and     edx, edi
                xor     ecx, [eax+0D8h]
                shr     ebx, 18h
                mov     [esp+20h+var_8], ecx
                movzx   ecx, byte ptr [esp+20h+var_10+1]
                mov     esi, ds:Te2[ecx*4]
                xor     esi, ds:Te1[edx*4]
                mov     ecx, [esp+20h+var_C]
                xor     esi, ds:Te0[ebx*4]
                and     ecx, edi
                xor     esi, ds:Te3[ecx*4]
                xor     esi, [eax+0DCh]
                mov     ecx, esi

loc_1000D91F:                           ; CODE XREF: AES__encrypt+8E0j
                                        ; AES__encrypt+AE9j
                mov     edx, [esp+20h+arg_0]
                mov     ebx, [esp+20h+var_8]
                shl     ebp, 4
                add     eax, ebp
                shr     edx, 10h
                and     edx, edi
                mov     ebp, ds:Te4[edx*4]
                movzx   edx, bh
                mov     edx, ds:Te4[edx*4]
                and     ebp, 0FF0000h
                and     edx, 0FF00h
                xor     ebp, edx
                mov     edx, [esp+20h+var_4]
                mov     esi, edx
                shr     esi, 18h
                mov     esi, ds:Te4[esi*4]
                and     esi, 0FF000000h
                xor     ebp, esi
                mov     esi, ecx
                shr     ebx, 10h
                and     ebx, edi
                and     esi, edi
                movzx   esi, byte ptr ds:Te4[esi*4]
                xor     ebp, esi
                xor     ebp, [eax]
                mov     esi, [esp+20h+arg_4]
                mov     [esi], ebp
                mov     ebx, ds:Te4[ebx*4]
                and     ebx, 0FF0000h
                movzx   ebp, ch
                mov     ebp, ds:Te4[ebp*4]
                and     ebp, 0FF00h
                xor     ebx, ebp
                mov     ebp, [esp+20h+arg_0]
                shr     ebp, 18h
                mov     ebp, ds:Te4[ebp*4]
                and     ebp, 0FF000000h
                xor     ebx, ebp
                mov     ebp, edx
                and     ebp, edi
                movzx   ebp, byte ptr ds:Te4[ebp*4]
                xor     ebx, ebp
                xor     ebx, [eax+4]
                movzx   ebp, dh
                mov     [esi+4], ebx
                mov     ebp, ds:Te4[ebp*4]
                mov     ebx, ecx
                shr     ebx, 10h
                and     ebx, edi
                mov     ebx, ds:Te4[ebx*4]
                and     ebp, 0FF00h
                and     ebx, 0FF0000h
                xor     ebx, ebp
                mov     ebp, [esp+20h+var_8]
                shr     ebp, 18h
                mov     ebp, ds:Te4[ebp*4]
                and     ebp, 0FF000000h
                xor     ebx, ebp
                mov     ebp, [esp+20h+arg_0]
                and     ebp, edi
                movzx   ebp, byte ptr ds:Te4[ebp*4]
                xor     ebx, ebp
                xor     ebx, [eax+8]
                shr     edx, 10h
                mov     [esi+8], ebx
                movzx   ebx, byte ptr [esp+20h+arg_0+1]
                mov     ebx, ds:Te4[ebx*4]
                and     edx, edi
                mov     edx, ds:Te4[edx*4]
                shr     ecx, 18h
                mov     ecx, ds:Te4[ecx*4]
                and     edx, 0FF0000h
                and     ecx, 0FF000000h
                and     ebx, 0FF00h
                xor     edx, ebx
                xor     edx, ecx
                mov     ecx, [esp+20h+var_8]
                and     ecx, edi
                movzx   ecx, byte ptr ds:Te4[ecx*4]
                xor     edx, ecx
                xor     edx, [eax+0Ch]
                pop     edi
                mov     [esi+0Ch], edx
                pop     esi
                pop     ebp
                pop     ebx
                add     esp, 10h
                retn    8
AES__encrypt    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================


AES__decrypt    proc near               ; DATA XREF: .rdata:10060224o

var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  4
arg_4           = dword ptr  8

                sub     esp, 14h
                mov     eax, ecx
                mov     edx, [eax+104h]
                mov     ecx, [eax+0F8h]
                push    ebx
                mov     ebx, [eax+100h]
                push    ebp
                push    esi
                mov     esi, [eax+0FCh]
                push    edi
                mov     edi, [esp+24h+arg_0]
                xor     ecx, [edi]
                xor     edx, [edi+0Ch]
                xor     ebx, [edi+8]
                xor     esi, [edi+4]
                mov     edi, edx
                shr     edi, 10h
                and     edi, 0FFh
                mov     edi, ds:Td1[edi*4]
                mov     [esp+24h+var_4], eax
                add     eax, 0F8h
                mov     [esp+24h+arg_0], ecx
                shr     ecx, 18h
                movzx   ebp, bh
                xor     edi, ds:Td2[ebp*4]
                mov     ebp, 0FFh
                xor     edi, ds:Td0[ecx*4]
                mov     ecx, esi
                and     ecx, ebp
                xor     edi, ds:Td3[ecx*4]
                movzx   ecx, dh
                xor     edi, [eax+10h]
                mov     ecx, ds:Td2[ecx*4]
                mov     [esp+24h+var_14], edi
                mov     edi, [esp+24h+arg_0]
                shr     edi, 10h
                and     edi, ebp
                xor     ecx, ds:Td1[edi*4]
                mov     edi, esi
                shr     edi, 18h
                xor     ecx, ds:Td0[edi*4]
                mov     edi, ebx
                and     edi, ebp
                xor     ecx, ds:Td3[edi*4]
                movzx   edi, byte ptr [esp+24h+arg_0+1]
                xor     ecx, [eax+14h]
                mov     [esp+24h+var_10], esi
                shr     esi, 10h
                and     esi, ebp
                mov     [esp+24h+var_8], edx
                mov     [esp+24h+var_C], ecx
                mov     ecx, ds:Td1[esi*4]
                xor     ecx, ds:Td2[edi*4]
                mov     esi, ebx
                and     edx, ebp
                shr     esi, 18h
                xor     ecx, ds:Td0[esi*4]
                shr     ebx, 10h
                xor     ecx, ds:Td3[edx*4]
                movzx   edx, byte ptr [esp+24h+var_10+1]
                xor     ecx, [eax+18h]
                and     ebx, ebp
                mov     ebx, ds:Td1[ebx*4]
                xor     ebx, ds:Td2[edx*4]
                mov     edx, [esp+24h+var_8]
                shr     edx, 18h
                xor     ebx, ds:Td0[edx*4]
                mov     edx, [esp+24h+arg_0]
                and     edx, ebp
                xor     ebx, ds:Td3[edx*4]
                movzx   edi, ch
                xor     ebx, [eax+1Ch]
                mov     edx, ebx
                shr     edx, 10h
                and     edx, ebp
                mov     esi, ds:Td1[edx*4]
                xor     esi, ds:Td2[edi*4]
                mov     edx, [esp+24h+var_14]
                mov     edi, [esp+24h+var_C]
                shr     edx, 18h
                xor     esi, ds:Td0[edx*4]
                mov     [esp+24h+var_8], ebx
                mov     edx, edi
                and     edx, ebp
                xor     esi, ds:Td3[edx*4]
                movzx   edx, bh
                xor     esi, [eax+20h]
                mov     edx, ds:Td2[edx*4]
                mov     [esp+24h+arg_0], esi
                mov     esi, [esp+24h+var_14]
                shr     esi, 10h
                and     esi, ebp
                xor     edx, ds:Td1[esi*4]
                mov     esi, edi
                shr     esi, 18h
                xor     edx, ds:Td0[esi*4]
                mov     esi, ecx
                and     esi, ebp
                xor     edx, ds:Td3[esi*4]
                movzx   esi, byte ptr [esp+24h+var_14+1]
                xor     edx, [eax+24h]
                shr     edi, 10h
                and     edi, ebp
                mov     [esp+24h+var_10], edx
                mov     edx, ds:Td1[edi*4]
                xor     edx, ds:Td2[esi*4]
                mov     esi, ecx
                shr     esi, 18h
                xor     edx, ds:Td0[esi*4]
                movzx   esi, byte ptr [esp+24h+var_C+1]
                shr     ecx, 10h
                and     ecx, ebp
                mov     ecx, ds:Td1[ecx*4]
                xor     ecx, ds:Td2[esi*4]
                mov     esi, [esp+24h+var_8]
                shr     esi, 18h
                xor     ecx, ds:Td0[esi*4]
                mov     esi, [esp+24h+var_14]
                and     esi, ebp
                xor     ecx, ds:Td3[esi*4]
                and     ebx, ebp
                xor     edx, ds:Td3[ebx*4]
                xor     ecx, [eax+2Ch]
                xor     edx, [eax+28h]
                mov     esi, ecx
                shr     esi, 10h
                and     esi, ebp
                mov     esi, ds:Td1[esi*4]
                movzx   edi, dh
                xor     esi, ds:Td2[edi*4]
                mov     edi, [esp+24h+arg_0]
                shr     edi, 18h
                xor     esi, ds:Td0[edi*4]
                mov     edi, [esp+24h+var_10]
                mov     ebx, edi
                and     ebx, ebp
                xor     esi, ds:Td3[ebx*4]
                mov     ebx, [esp+24h+arg_0]
                xor     esi, [eax+30h]
                shr     ebx, 10h
                mov     [esp+24h+var_14], esi
                and     ebx, ebp
                movzx   esi, ch
                mov     esi, ds:Td2[esi*4]
                xor     esi, ds:Td1[ebx*4]
                mov     ebx, edi
                shr     ebx, 18h
                xor     esi, ds:Td0[ebx*4]
                mov     ebx, edx
                and     ebx, ebp
                xor     esi, ds:Td3[ebx*4]
                shr     edi, 10h
                xor     esi, [eax+34h]
                and     edi, ebp
                mov     ebx, ds:Td1[edi*4]
                mov     [esp+24h+var_C], esi
                movzx   esi, byte ptr [esp+24h+arg_0+1]
                xor     ebx, ds:Td2[esi*4]
                mov     esi, edx
                shr     esi, 18h
                xor     ebx, ds:Td0[esi*4]
                mov     [esp+24h+var_8], ecx
                and     ecx, ebp
                xor     ebx, ds:Td3[ecx*4]
                movzx   ecx, byte ptr [esp+24h+var_10+1]
                xor     ebx, [eax+38h]
                shr     edx, 10h
                and     edx, ebp
                mov     edx, ds:Td1[edx*4]
                xor     edx, ds:Td2[ecx*4]
                mov     ecx, [esp+24h+var_8]
                shr     ecx, 18h
                xor     edx, ds:Td0[ecx*4]
                mov     ecx, [esp+24h+arg_0]
                and     ecx, ebp
                xor     edx, ds:Td3[ecx*4]
                movzx   edi, bh
                xor     edx, [eax+3Ch]
                mov     ecx, edx
                shr     ecx, 10h
                and     ecx, ebp
                mov     esi, ds:Td1[ecx*4]
                xor     esi, ds:Td2[edi*4]
                mov     ecx, [esp+24h+var_14]
                mov     edi, [esp+24h+var_C]
                shr     ecx, 18h
                xor     esi, ds:Td0[ecx*4]
                mov     ecx, edi
                and     ecx, ebp
                xor     esi, ds:Td3[ecx*4]
                movzx   ecx, dh
                xor     esi, [eax+40h]
                mov     ecx, ds:Td2[ecx*4]
                mov     [esp+24h+arg_0], esi
                mov     esi, [esp+24h+var_14]
                shr     esi, 10h
                and     esi, ebp
                xor     ecx, ds:Td1[esi*4]
                mov     esi, edi
                shr     esi, 18h
                xor     ecx, ds:Td0[esi*4]
                mov     esi, ebx
                and     esi, ebp
                xor     ecx, ds:Td3[esi*4]
                movzx   esi, byte ptr [esp+24h+var_14+1]
                xor     ecx, [eax+44h]
                shr     edi, 10h
                mov     [esp+24h+var_8], edx
                mov     [esp+24h+var_10], ecx
                and     edi, ebp
                mov     ecx, ds:Td1[edi*4]
                xor     ecx, ds:Td2[esi*4]
                and     edx, ebp
                mov     esi, ebx
                shr     esi, 18h
                xor     ecx, ds:Td0[esi*4]
                shr     ebx, 10h
                xor     ecx, ds:Td3[edx*4]
                movzx   edx, byte ptr [esp+24h+var_C+1]
                xor     ecx, [eax+48h]
                and     ebx, ebp
                mov     ebx, ds:Td1[ebx*4]
                xor     ebx, ds:Td2[edx*4]
                mov     edx, [esp+24h+var_8]
                shr     edx, 18h
                xor     ebx, ds:Td0[edx*4]
                mov     edx, [esp+24h+var_14]
                and     edx, ebp
                xor     ebx, ds:Td3[edx*4]
                movzx   edi, ch
                xor     ebx, [eax+4Ch]
                mov     edx, ebx
                shr     edx, 10h
                and     edx, ebp
                mov     esi, ds:Td1[edx*4]
                xor     esi, ds:Td2[edi*4]
                mov     edx, [esp+24h+arg_0]
                mov     edi, [esp+24h+var_10]
                shr     edx, 18h
                xor     esi, ds:Td0[edx*4]
                mov     edx, edi
                and     edx, ebp
                xor     esi, ds:Td3[edx*4]
                mov     [esp+24h+var_8], ebx
                xor     esi, [eax+50h]
                movzx   edx, bh
                mov     edx, ds:Td2[edx*4]
                mov     [esp+24h+var_14], esi
                mov     esi, [esp+24h+arg_0]
                shr     esi, 10h
                and     esi, ebp
                xor     edx, ds:Td1[esi*4]
                mov     esi, edi
                shr     esi, 18h
                xor     edx, ds:Td0[esi*4]
                mov     esi, ecx
                and     esi, ebp
                xor     edx, ds:Td3[esi*4]
                movzx   esi, byte ptr [esp+24h+arg_0+1]
                xor     edx, [eax+54h]
                shr     edi, 10h
                and     edi, ebp
                mov     [esp+24h+var_C], edx
                mov     edx, ds:Td1[edi*4]
                xor     edx, ds:Td2[esi*4]
                mov     esi, ecx
                shr     esi, 18h
                xor     edx, ds:Td0[esi*4]
                movzx   esi, byte ptr [esp+24h+var_10+1]
                shr     ecx, 10h
                and     ecx, ebp
                mov     ecx, ds:Td1[ecx*4]
                xor     ecx, ds:Td2[esi*4]
                mov     esi, [esp+24h+var_8]
                shr     esi, 18h
                xor     ecx, ds:Td0[esi*4]
                mov     esi, [esp+24h+arg_0]
                and     esi, ebp
                xor     ecx, ds:Td3[esi*4]
                and     ebx, ebp
                xor     edx, ds:Td3[ebx*4]
                xor     ecx, [eax+5Ch]
                xor     edx, [eax+58h]
                mov     esi, ecx
                shr     esi, 10h
                and     esi, ebp
                mov     esi, ds:Td1[esi*4]
                movzx   edi, dh
                xor     esi, ds:Td2[edi*4]
                mov     edi, [esp+24h+var_14]
                shr     edi, 18h
                xor     esi, ds:Td0[edi*4]
                mov     edi, [esp+24h+var_C]
                mov     ebx, edi
                and     ebx, ebp
                xor     esi, ds:Td3[ebx*4]
                mov     ebx, [esp+24h+var_14]
                xor     esi, [eax+60h]
                shr     ebx, 10h
                mov     [esp+24h+arg_0], esi
                and     ebx, ebp
                movzx   esi, ch
                mov     esi, ds:Td2[esi*4]
                xor     esi, ds:Td1[ebx*4]
                mov     ebx, edi
                shr     ebx, 18h
                xor     esi, ds:Td0[ebx*4]
                mov     ebx, edx
                and     ebx, ebp
                xor     esi, ds:Td3[ebx*4]
                shr     edi, 10h
                xor     esi, [eax+64h]
                and     edi, ebp
                mov     ebx, ds:Td1[edi*4]
                mov     [esp+24h+var_10], esi
                movzx   esi, byte ptr [esp+24h+var_14+1]
                xor     ebx, ds:Td2[esi*4]
                mov     esi, edx
                shr     esi, 18h
                xor     ebx, ds:Td0[esi*4]
                mov     [esp+24h+var_8], ecx
                and     ecx, ebp
                xor     ebx, ds:Td3[ecx*4]
                xor     ebx, [eax+68h]
                shr     edx, 10h
                movzx   ecx, byte ptr [esp+24h+var_C+1]
                and     edx, ebp
                mov     edx, ds:Td1[edx*4]
                xor     edx, ds:Td2[ecx*4]
                mov     ecx, [esp+24h+var_8]
                shr     ecx, 18h
                xor     edx, ds:Td0[ecx*4]
                mov     ecx, [esp+24h+var_14]
                and     ecx, ebp
                xor     edx, ds:Td3[ecx*4]
                movzx   edi, bh
                xor     edx, [eax+6Ch]
                mov     ecx, edx
                shr     ecx, 10h
                and     ecx, ebp
                mov     esi, ds:Td1[ecx*4]
                xor     esi, ds:Td2[edi*4]
                mov     ecx, [esp+24h+arg_0]
                mov     edi, [esp+24h+var_10]
                shr     ecx, 18h
                xor     esi, ds:Td0[ecx*4]
                mov     ecx, edi
                and     ecx, ebp
                xor     esi, ds:Td3[ecx*4]
                movzx   ecx, dh
                xor     esi, [eax+70h]
                mov     ecx, ds:Td2[ecx*4]
                mov     [esp+24h+var_14], esi
                mov     esi, [esp+24h+arg_0]
                shr     esi, 10h
                and     esi, ebp
                xor     ecx, ds:Td1[esi*4]
                mov     esi, edi
                shr     esi, 18h
                xor     ecx, ds:Td0[esi*4]
                mov     esi, ebx
                and     esi, ebp
                xor     ecx, ds:Td3[esi*4]
                movzx   esi, byte ptr [esp+24h+arg_0+1]
                xor     ecx, [eax+74h]
                mov     [esp+24h+var_8], edx
                shr     edi, 10h
                mov     [esp+24h+var_C], ecx
                and     edx, ebp
                and     edi, ebp
                mov     ecx, ds:Td1[edi*4]
                xor     ecx, ds:Td2[esi*4]
                mov     esi, ebx
                shr     esi, 18h
                xor     ecx, ds:Td0[esi*4]
                shr     ebx, 10h
                xor     ecx, ds:Td3[edx*4]
                movzx   edx, byte ptr [esp+24h+var_10+1]
                xor     ecx, [eax+78h]
                and     ebx, ebp
                mov     ebx, ds:Td1[ebx*4]
                xor     ebx, ds:Td2[edx*4]
                mov     edx, [esp+24h+var_8]
                shr     edx, 18h
                xor     ebx, ds:Td0[edx*4]
                mov     edx, [esp+24h+arg_0]
                and     edx, ebp
                xor     ebx, ds:Td3[edx*4]
                movzx   edi, ch
                xor     ebx, [eax+7Ch]
                mov     edx, ebx
                shr     edx, 10h
                and     edx, ebp
                mov     esi, ds:Td1[edx*4]
                xor     esi, ds:Td2[edi*4]
                mov     edx, [esp+24h+var_14]
                mov     edi, [esp+24h+var_C]
                shr     edx, 18h
                xor     esi, ds:Td0[edx*4]
                mov     edx, edi
                and     edx, ebp
                xor     esi, ds:Td3[edx*4]
                mov     [esp+24h+var_8], ebx
                xor     esi, [eax+80h]
                movzx   edx, bh
                mov     [esp+24h+arg_0], esi
                mov     edx, ds:Td2[edx*4]
                mov     esi, [esp+24h+var_14]
                shr     esi, 10h
                and     esi, ebp
                xor     edx, ds:Td1[esi*4]
                mov     esi, edi
                shr     esi, 18h
                xor     edx, ds:Td0[esi*4]
                shr     edi, 10h
                mov     esi, ecx
                and     esi, ebp
                xor     edx, ds:Td3[esi*4]
                movzx   esi, byte ptr [esp+24h+var_14+1]
                xor     edx, [eax+84h]
                and     edi, ebp
                mov     [esp+24h+var_10], edx
                mov     edx, ds:Td1[edi*4]
                xor     edx, ds:Td2[esi*4]
                mov     esi, ecx
                shr     esi, 18h
                xor     edx, ds:Td0[esi*4]
                movzx   esi, byte ptr [esp+24h+var_C+1]
                shr     ecx, 10h
                and     ecx, ebp
                mov     ecx, ds:Td1[ecx*4]
                xor     ecx, ds:Td2[esi*4]
                mov     esi, [esp+24h+var_8]
                shr     esi, 18h
                xor     ecx, ds:Td0[esi*4]
                mov     esi, [esp+24h+var_14]
                and     esi, ebp
                xor     ecx, ds:Td3[esi*4]
                and     ebx, ebp
                xor     ecx, [eax+8Ch]
                xor     edx, ds:Td3[ebx*4]
                mov     esi, ecx
                xor     edx, [eax+88h]
                shr     esi, 10h
                and     esi, ebp
                mov     esi, ds:Td1[esi*4]
                movzx   edi, dh
                xor     esi, ds:Td2[edi*4]
                mov     edi, [esp+24h+var_10]
                mov     [esp+24h+var_8], esi
                mov     esi, [esp+24h+arg_0]
                shr     esi, 18h
                mov     esi, ds:Td0[esi*4]
                xor     [esp+24h+var_8], esi
                mov     esi, [esp+24h+var_8]
                and     edi, ebp
                xor     esi, ds:Td3[edi*4]
                mov     edi, [esp+24h+arg_0]
                xor     esi, [eax+90h]
                shr     edi, 10h
                mov     [esp+24h+var_14], esi
                and     edi, ebp
                movzx   esi, ch
                mov     esi, ds:Td2[esi*4]
                xor     esi, ds:Td1[edi*4]
                mov     edi, [esp+24h+var_10]
                shr     edi, 18h
                xor     esi, ds:Td0[edi*4]
                mov     edi, edx
                and     edi, ebp
                xor     esi, ds:Td3[edi*4]
                movzx   edi, byte ptr [esp+24h+arg_0+1]
                xor     esi, [eax+94h]
                mov     [esp+24h+var_C], esi
                mov     esi, [esp+24h+var_10]
                shr     esi, 10h
                and     esi, ebp
                mov     esi, ds:Td1[esi*4]
                xor     esi, ds:Td2[edi*4]
                mov     edi, edx
                shr     edi, 18h
                xor     esi, ds:Td0[edi*4]
                mov     edi, ecx
                and     edi, ebp
                xor     esi, ds:Td3[edi*4]
                xor     esi, [eax+98h]
                mov     [esp+24h+var_8], esi
                movzx   esi, byte ptr [esp+24h+var_10+1]
                shr     edx, 10h
                and     edx, ebp
                mov     edx, ds:Td1[edx*4]
                xor     edx, ds:Td2[esi*4]
                shr     ecx, 18h
                xor     edx, ds:Td0[ecx*4]
                mov     ecx, [esp+24h+arg_0]
                and     ecx, ebp
                xor     edx, ds:Td3[ecx*4]
                mov     ecx, [esp+24h+var_4]
                mov     edi, [ecx+4]
                xor     edx, [eax+9Ch]
                cmp     edi, 0Ah
                jbe     loc_1000E704
                movzx   ebx, byte ptr [esp+24h+var_8+1]
                mov     ecx, edx
                shr     ecx, 10h
                and     ecx, ebp
                mov     esi, ds:Td1[ecx*4]
                xor     esi, ds:Td2[ebx*4]
                mov     ecx, [esp+24h+var_14]
                mov     ebp, [esp+24h+var_C]
                mov     ebx, ecx
                shr     ebx, 18h
                xor     esi, ds:Td0[ebx*4]
                mov     ebx, ebp
                and     ebx, 0FFh
                xor     esi, ds:Td3[ebx*4]
                mov     ebx, ecx
                xor     esi, [eax+0A0h]
                shr     ebx, 10h
                mov     [esp+24h+arg_0], esi
                movzx   esi, dh
                mov     esi, ds:Td2[esi*4]
                and     ebx, 0FFh
                xor     esi, ds:Td1[ebx*4]
                mov     ebx, ebp
                shr     ebx, 18h
                xor     esi, ds:Td0[ebx*4]
                mov     ebx, [esp+24h+var_8]
                and     ebx, 0FFh
                xor     esi, ds:Td3[ebx*4]
                shr     ebp, 10h
                xor     esi, [eax+0A4h]
                and     ebp, 0FFh
                mov     [esp+24h+var_10], esi
                movzx   esi, ch
                mov     ecx, ds:Td1[ebp*4]
                xor     ecx, ds:Td2[esi*4]
                mov     esi, [esp+24h+var_8]
                movzx   ebp, byte ptr [esp+24h+var_C+1]
                shr     esi, 18h
                xor     ecx, ds:Td0[esi*4]
                mov     esi, edx
                and     esi, 0FFh
                xor     ecx, ds:Td3[esi*4]
                mov     esi, [esp+24h+var_8]
                xor     ecx, [eax+0A8h]
                shr     esi, 10h
                and     esi, 0FFh
                mov     ebx, ds:Td1[esi*4]
                xor     ebx, ds:Td2[ebp*4]
                shr     edx, 18h
                xor     ebx, ds:Td0[edx*4]
                mov     edx, [esp+24h+var_14]
                and     edx, 0FFh
                xor     ebx, ds:Td3[edx*4]
                movzx   esi, ch
                xor     ebx, [eax+0ACh]
                mov     edx, ebx
                shr     edx, 10h
                and     edx, 0FFh
                mov     edx, ds:Td1[edx*4]
                xor     edx, ds:Td2[esi*4]
                mov     esi, [esp+24h+arg_0]
                shr     esi, 18h
                xor     edx, ds:Td0[esi*4]
                mov     esi, [esp+24h+var_10]
                and     esi, 0FFh
                xor     edx, ds:Td3[esi*4]
                mov     esi, [esp+24h+arg_0]
                xor     edx, [eax+0B0h]
                shr     esi, 10h
                mov     [esp+24h+var_14], edx
                and     esi, 0FFh
                movzx   edx, bh
                mov     edx, ds:Td2[edx*4]
                xor     edx, ds:Td1[esi*4]
                mov     esi, [esp+24h+var_10]
                shr     esi, 18h
                xor     edx, ds:Td0[esi*4]
                mov     esi, ecx
                and     esi, 0FFh
                xor     edx, ds:Td3[esi*4]
                xor     edx, [eax+0B4h]
                movzx   esi, byte ptr [esp+24h+arg_0+1]
                mov     [esp+24h+var_C], edx
                mov     edx, [esp+24h+var_10]
                shr     edx, 10h
                and     edx, 0FFh
                mov     edx, ds:Td1[edx*4]
                xor     edx, ds:Td2[esi*4]
                mov     esi, ecx
                shr     esi, 18h
                xor     edx, ds:Td0[esi*4]
                mov     esi, ebx
                and     esi, 0FFh
                xor     edx, ds:Td3[esi*4]
                shr     ecx, 10h
                xor     edx, [eax+0B8h]
                and     ecx, 0FFh
                mov     esi, ds:Td1[ecx*4]
                mov     ecx, [esp+24h+arg_0]
                mov     [esp+24h+var_8], edx
                movzx   edx, byte ptr [esp+24h+var_10+1]
                xor     esi, ds:Td2[edx*4]
                shr     ebx, 18h
                xor     esi, ds:Td0[ebx*4]
                and     ecx, 0FFh
                xor     esi, ds:Td3[ecx*4]
                xor     esi, [eax+0BCh]
                cmp     edi, 0Ch
                mov     edx, esi
                jbe     loc_1000E6FF
                movzx   ebx, byte ptr [esp+24h+var_8+1]
                mov     ebp, [esp+24h+var_C]
                mov     ecx, edx
                shr     ecx, 10h
                and     ecx, 0FFh
                mov     esi, ds:Td1[ecx*4]
                xor     esi, ds:Td2[ebx*4]
                mov     ecx, [esp+24h+var_14]
                mov     ebx, ecx
                shr     ebx, 18h
                xor     esi, ds:Td0[ebx*4]
                mov     ebx, ebp
                and     ebx, 0FFh
                xor     esi, ds:Td3[ebx*4]
                mov     ebx, ecx
                xor     esi, [eax+0C0h]
                shr     ebx, 10h
                mov     [esp+24h+arg_0], esi
                movzx   esi, dh
                mov     esi, ds:Td2[esi*4]
                and     ebx, 0FFh
                xor     esi, ds:Td1[ebx*4]
                mov     ebx, ebp
                shr     ebx, 18h
                xor     esi, ds:Td0[ebx*4]
                mov     ebx, [esp+24h+var_8]
                and     ebx, 0FFh
                xor     esi, ds:Td3[ebx*4]
                shr     ebp, 10h
                xor     esi, [eax+0C4h]
                and     ebp, 0FFh
                mov     [esp+24h+var_10], esi
                movzx   esi, ch
                mov     ecx, ds:Td1[ebp*4]
                xor     ecx, ds:Td2[esi*4]
                mov     esi, [esp+24h+var_8]
                movzx   ebp, byte ptr [esp+24h+var_C+1]
                shr     esi, 18h
                xor     ecx, ds:Td0[esi*4]
                mov     esi, edx
                and     esi, 0FFh
                xor     ecx, ds:Td3[esi*4]
                mov     esi, [esp+24h+var_8]
                xor     ecx, [eax+0C8h]
                shr     esi, 10h
                and     esi, 0FFh
                mov     ebx, ds:Td1[esi*4]
                xor     ebx, ds:Td2[ebp*4]
                shr     edx, 18h
                xor     ebx, ds:Td0[edx*4]
                mov     edx, [esp+24h+var_14]
                and     edx, 0FFh
                xor     ebx, ds:Td3[edx*4]
                movzx   esi, ch
                xor     ebx, [eax+0CCh]
                mov     edx, ebx
                shr     edx, 10h
                and     edx, 0FFh
                mov     edx, ds:Td1[edx*4]
                xor     edx, ds:Td2[esi*4]
                mov     esi, [esp+24h+arg_0]
                shr     esi, 18h
                xor     edx, ds:Td0[esi*4]
                mov     esi, [esp+24h+var_10]
                and     esi, 0FFh
                xor     edx, ds:Td3[esi*4]
                mov     esi, [esp+24h+arg_0]
                xor     edx, [eax+0D0h]
                shr     esi, 10h
                mov     [esp+24h+var_14], edx
                and     esi, 0FFh
                movzx   edx, bh
                mov     edx, ds:Td2[edx*4]
                xor     edx, ds:Td1[esi*4]
                mov     esi, [esp+24h+var_10]
                shr     esi, 18h
                xor     edx, ds:Td0[esi*4]
                mov     esi, ecx
                and     esi, 0FFh
                xor     edx, ds:Td3[esi*4]
                xor     edx, [eax+0D4h]
                movzx   esi, byte ptr [esp+24h+arg_0+1]
                mov     [esp+24h+var_C], edx
                mov     edx, [esp+24h+var_10]
                shr     edx, 10h
                and     edx, 0FFh
                mov     edx, ds:Td1[edx*4]
                xor     edx, ds:Td2[esi*4]
                mov     esi, ecx
                shr     esi, 18h
                xor     edx, ds:Td0[esi*4]
                mov     esi, ebx
                and     esi, 0FFh
                xor     edx, ds:Td3[esi*4]
                shr     ecx, 10h
                xor     edx, [eax+0D8h]
                and     ecx, 0FFh
                mov     esi, ds:Td1[ecx*4]
                mov     ecx, [esp+24h+arg_0]
                mov     [esp+24h+var_8], edx
                movzx   edx, byte ptr [esp+24h+var_10+1]
                xor     esi, ds:Td2[edx*4]
                shr     ebx, 18h
                xor     esi, ds:Td0[ebx*4]
                and     ecx, 0FFh
                xor     esi, ds:Td3[ecx*4]
                xor     esi, [eax+0DCh]
                mov     edx, esi

loc_1000E6FF:                           ; CODE XREF: AES__decrypt+A5Fj
                mov     ebp, 0FFh

loc_1000E704:                           ; CODE XREF: AES__decrypt+840j
                shl     edi, 4
                add     eax, edi
                mov     ecx, edx
                shr     ecx, 10h
                and     ecx, ebp
                mov     edi, ds:Td4[ecx*4]
                mov     ecx, [esp+24h+var_8]
                and     edi, 0FF0000h
                movzx   esi, ch
                mov     esi, ds:Td4[esi*4]
                and     esi, 0FF00h
                xor     edi, esi
                mov     esi, [esp+24h+var_14]
                shr     esi, 18h
                mov     esi, ds:Td4[esi*4]
                and     esi, 0FF000000h
                xor     edi, esi
                mov     esi, [esp+24h+var_C]
                and     esi, ebp
                movzx   esi, byte ptr ds:Td4[esi*4]
                xor     edi, esi
                xor     edi, [eax]
                mov     esi, [esp+24h+arg_4]
                mov     [esi], edi
                mov     edi, [esp+24h+var_14]
                shr     edi, 10h
                and     edi, ebp
                mov     edi, ds:Td4[edi*4]
                and     edi, 0FF0000h
                movzx   ebx, dh
                mov     ebx, ds:Td4[ebx*4]
                and     ebx, 0FF00h
                xor     edi, ebx
                mov     ebx, [esp+24h+var_C]
                shr     ebx, 18h
                mov     ebx, ds:Td4[ebx*4]
                and     ebx, 0FF000000h
                xor     edi, ebx
                mov     ebx, ecx
                and     ebx, ebp
                movzx   ebx, byte ptr ds:Td4[ebx*4]
                xor     edi, ebx
                xor     edi, [eax+4]
                mov     ebx, [esp+24h+var_14]
                mov     [esi+4], edi
                mov     edi, [esp+24h+var_C]
                shr     edi, 10h
                and     edi, ebp
                mov     edi, ds:Td4[edi*4]
                and     edi, 0FF0000h
                movzx   ebp, bh
                mov     ebp, ds:Td4[ebp*4]
                and     ebp, 0FF00h
                xor     edi, ebp
                mov     ebp, ecx
                shr     ebp, 18h
                mov     ebp, ds:Td4[ebp*4]
                and     ebp, 0FF000000h
                xor     edi, ebp
                mov     ebp, edx
                and     ebp, 0FFh
                movzx   ebp, byte ptr ds:Td4[ebp*4]
                xor     edi, ebp
                xor     edi, [eax+8]
                shr     ecx, 10h
                mov     [esi+8], edi
                movzx   edi, byte ptr [esp+24h+var_C+1]
                mov     edi, ds:Td4[edi*4]
                and     ecx, 0FFh
                mov     ecx, ds:Td4[ecx*4]
                shr     edx, 18h
                mov     edx, ds:Td4[edx*4]
                and     ecx, 0FF0000h
                and     edi, 0FF00h
                xor     ecx, edi
                and     edx, 0FF000000h
                xor     ecx, edx
                and     ebx, 0FFh
                movzx   edx, byte ptr ds:Td4[ebx*4]
                xor     ecx, edx
                xor     ecx, [eax+0Ch]
                pop     edi
                mov     [esi+0Ch], ecx
                pop     esi
                pop     ebp
                pop     ebx
                add     esp, 14h
                retn    8
AES__decrypt    endp
; int __thiscall AES__ExpandKey(int this, int a2, int a3)
AES__ExpandKey  proc near               ; CODE XREF: calculate_volume_id_mac+46p
                                        ; AES__makeKey+34p

a2              = dword ptr  4
a3              = dword ptr  8

                mov     edx, [ecx]
                push    esi
                push    edi
                mov     edi, edx
                ror     edi, 8
                and     edi, 0FF00FF00h
                rol     edx, 8
                and     edx, 0FF00FFh
                or      edi, edx
                mov     [ebx+8], edi
                mov     edx, [ecx+4]
                mov     edi, edx
                ror     edi, 8
                and     edi, 0FF00FF00h
                mov     esi, eax
                lea     eax, [ebx+8]
                rol     edx, 8
                and     edx, 0FF00FFh
                or      edi, edx
                mov     [eax+4], edi
                mov     edx, [ecx+8]
                mov     edi, edx
                ror     edi, 8
                and     edi, 0FF00FF00h
                rol     edx, 8
                and     edx, 0FF00FFh
                or      edi, edx
                mov     [eax+8], edi
                mov     edx, [ecx+0Ch]
                mov     edi, edx
                ror     edi, 8
                and     edi, 0FF00FF00h
                rol     edx, 8
                and     edx, 0FF00FFh
                or      edi, edx
                cmp     esi, 80h
                mov     [eax+0Ch], edi
                jnz     loc_1000C4F9
                mov     edx, edi
                mov     ecx, edi
                shr     ecx, 10h
                and     ecx, 0FFh
                mov     ecx, ds:Te4[ecx*4]
                xor     ecx, 1000000h
                mov     edi, [eax+4]
                movzx   esi, dh
                mov     esi, ds:Te4[esi*4]
                and     esi, 0FF0000h
                and     ecx, 0FF000000h
                xor     ecx, esi
                mov     esi, edx
                shr     esi, 18h
                movzx   esi, byte ptr ds:Te4[esi*4]
                xor     ecx, esi
                mov     esi, edx
                and     esi, 0FFh
                mov     esi, ds:Te4[esi*4]
                and     esi, 0FF00h
                xor     ecx, esi
                xor     ecx, [eax]
                lea     esi, [eax+10h]
                xor     edi, ecx
                mov     [esi], ecx
                mov     ecx, [eax+8]
                xor     ecx, edi
                xor     edx, ecx
                mov     [eax+14h], edi
                mov     [eax+18h], ecx
                mov     [eax+1Ch], edx
                mov     edi, 4
                jmp     short loc_1000C470
; ---------------------------------------------------------------------------
                lea     ecx, [ecx+0]

loc_1000C470:                           ; CODE XREF: AES__ExpandKey+FBj
                                        ; AES__ExpandKey+17Dj
                                        ; DATA XREF: ...
                mov     ecx, esi
                mov     edx, [ecx+0Ch]
                mov     esi, edx
                movzx   eax, dh
                mov     eax, ds:Te4[eax*4]
                shr     esi, 10h
                and     esi, 0FFh
                mov     esi, ds:Te4[esi*4]
                and     eax, 0FF0000h
                and     esi, 0FF000000h
                xor     eax, esi
                mov     esi, edx
                and     edx, 0FFh
                mov     edx, ds:Te4[edx*4]
                shr     esi, 18h
                movzx   esi, byte ptr ds:Te4[esi*4]
                xor     eax, esi
                and     edx, 0FF00h
                xor     eax, edx
                xor     eax, ds:rcon[edi]
                lea     esi, [ecx+10h]
                xor     eax, [ecx]
                add     edi, 4
                mov     [esi], eax
                mov     edx, [ecx+4]
                xor     edx, eax
                mov     [ecx+14h], edx
                mov     eax, [ecx+8]
                xor     eax, edx
                mov     [ecx+18h], eax
                mov     edx, [ecx+0Ch]
                xor     edx, eax
                cmp     edi, 28h
                mov     [ecx+1Ch], edx
                jnz     short loc_1000C470
                pop     edi
                mov     dword ptr [ebx+4], 0Ah
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_1000C4F9:                           ; CODE XREF: AES__ExpandKey+7Cj
                mov     edx, [ecx+10h]
                mov     edi, edx
                ror     edi, 8
                and     edi, 0FF00FF00h
                rol     edx, 8
                and     edx, 0FF00FFh
                or      edi, edx
                mov     [eax+10h], edi
                mov     edx, [ecx+14h]
                mov     edi, edx
                ror     edi, 8
                and     edi, 0FF00FF00h
                rol     edx, 8
                and     edx, 0FF00FFh
                or      edi, edx
                cmp     esi, 0C0h
                mov     [eax+14h], edi
                jnz     loc_1000C653
                mov     edx, edi
                mov     ecx, edx
                shr     ecx, 10h
                and     ecx, 0FFh
                mov     ecx, ds:Te4[ecx*4]
                movzx   esi, dh
                mov     esi, ds:Te4[esi*4]
                xor     ecx, 1000000h
                and     ecx, 0FF000000h
                and     esi, 0FF0000h
                xor     ecx, esi
                mov     esi, edx
                and     edx, 0FFh
                mov     edx, ds:Te4[edx*4]
                shr     esi, 18h
                movzx   esi, byte ptr ds:Te4[esi*4]
                xor     ecx, esi
                and     edx, 0FF00h
                xor     ecx, edx
                xor     ecx, [eax]
                mov     edx, [eax+4]
                xor     edx, ecx
                mov     [eax+18h], ecx
                mov     ecx, [eax+8]
                xor     ecx, edx
                mov     [eax+1Ch], edx
                mov     edx, [eax+0Ch]
                xor     edx, ecx
                mov     [eax+20h], ecx
                mov     [eax+24h], edx
                mov     esi, 4

loc_1000C5B5:                           ; CODE XREF: AES__ExpandKey+2D3j
                mov     ecx, [eax+10h]
                xor     ecx, [eax+24h]
                mov     edx, [eax+14h]
                xor     edx, ecx
                mov     [eax+28h], ecx
                mov     [eax+2Ch], edx
                mov     edx, [eax+2Ch]
                add     eax, 18h
                mov     edi, edx
                movzx   ecx, dh
                mov     ecx, ds:Te4[ecx*4]
                shr     edi, 10h
                and     edi, 0FFh
                mov     edi, ds:Te4[edi*4]
                and     ecx, 0FF0000h
                and     edi, 0FF000000h
                xor     ecx, edi
                mov     edi, edx
                and     edx, 0FFh
                mov     edx, ds:Te4[edx*4]
                shr     edi, 18h
                movzx   edi, byte ptr ds:Te4[edi*4]
                xor     ecx, edi
                and     edx, 0FF00h
                xor     ecx, edx
                xor     ecx, ds:rcon[esi]
                add     esi, 4
                xor     ecx, [eax]
                mov     [eax+18h], ecx
                mov     edx, [eax+4]
                xor     edx, ecx
                mov     [eax+1Ch], edx
                mov     ecx, [eax+8]
                xor     ecx, edx
                mov     [eax+20h], ecx
                mov     edx, [eax+0Ch]
                xor     edx, ecx
                cmp     esi, 20h
                mov     [eax+24h], edx
                jnz     loc_1000C5B5
                pop     edi
                mov     dword ptr [ebx+4], 0Ch
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_1000C653:                           ; CODE XREF: AES__ExpandKey+1C7j
                mov     edx, [ecx+18h]
                mov     edi, edx
                ror     edi, 8
                and     edi, 0FF00FF00h
                rol     edx, 8
                and     edx, 0FF00FFh
                or      edi, edx
                mov     [eax+18h], edi
                mov     ecx, [ecx+1Ch]
                mov     edx, ecx
                ror     edx, 8
                and     edx, 0FF00FF00h
                rol     ecx, 8
                and     ecx, 0FF00FFh
                or      edx, ecx
                cmp     esi, 100h
                mov     [eax+1Ch], edx
                jnz     loc_1000C80C
                mov     ecx, edx
                shr     ecx, 10h
                and     ecx, 0FFh
                mov     ecx, ds:Te4[ecx*4]
                movzx   esi, dh
                mov     esi, ds:Te4[esi*4]
                xor     ecx, 1000000h
                and     ecx, 0FF000000h
                and     esi, 0FF0000h
                xor     ecx, esi
                mov     esi, edx
                and     edx, 0FFh
                mov     edx, ds:Te4[edx*4]
                shr     esi, 18h
                movzx   esi, byte ptr ds:Te4[esi*4]
                xor     ecx, esi
                and     edx, 0FF00h
                xor     ecx, edx
                xor     ecx, [eax]
                mov     edx, [eax+4]
                xor     edx, ecx
                mov     [eax+20h], ecx
                mov     ecx, [eax+8]
                xor     ecx, edx
                mov     [eax+24h], edx
                mov     edx, [eax+0Ch]
                xor     edx, ecx
                mov     [eax+28h], ecx
                mov     [eax+2Ch], edx
                mov     esi, 4
                lea     ecx, [ecx+0]

loc_1000C710:                           ; CODE XREF: AES__ExpandKey+48Cj
                                        ; DATA XREF: ___free_lconv_mon+54?
                mov     edx, [eax+2Ch]
                mov     ecx, edx
                shr     ecx, 10h
                and     ecx, 0FFh
                mov     ecx, ds:Te4[ecx*4]
                movzx   edi, dh
                mov     edi, ds:Te4[edi*4]
                and     ecx, 0FF0000h
                and     edi, 0FF00h
                xor     ecx, edi
                mov     edi, edx
                and     edx, 0FFh
                movzx   edx, byte ptr ds:Te4[edx*4]
                shr     edi, 18h
                mov     edi, ds:Te4[edi*4]
                and     edi, 0FF000000h
                xor     ecx, edi
                xor     ecx, edx
                xor     ecx, [eax+10h]
                mov     edx, [eax+14h]
                xor     edx, ecx
                mov     [eax+30h], ecx
                mov     ecx, [eax+18h]
                xor     ecx, edx
                mov     [eax+34h], edx
                mov     edx, [eax+1Ch]
                xor     edx, ecx
                mov     [eax+38h], ecx
                mov     [eax+3Ch], edx
                mov     edx, [eax+3Ch]
                add     eax, 20h
                mov     edi, edx
                movzx   ecx, dh
                mov     ecx, ds:Te4[ecx*4]
                shr     edi, 10h
                and     edi, 0FFh
                mov     edi, ds:Te4[edi*4]
                and     ecx, 0FF0000h
                and     edi, 0FF000000h
                xor     ecx, edi
                mov     edi, edx
                and     edx, 0FFh
                mov     edx, ds:Te4[edx*4]
                shr     edi, 18h
                movzx   edi, byte ptr ds:Te4[edi*4]
                xor     ecx, edi
                and     edx, 0FF00h
                xor     ecx, edx
                xor     ecx, ds:rcon[esi]
                add     esi, 4
                xor     ecx, [eax]
                mov     [eax+20h], ecx
                mov     edx, [eax+4]
                xor     edx, ecx
                mov     [eax+24h], edx
                mov     ecx, [eax+8]
                xor     ecx, edx
                mov     [eax+28h], ecx
                mov     edx, [eax+0Ch]
                xor     edx, ecx
                cmp     esi, 1Ch
                mov     [eax+2Ch], edx
                jnz     loc_1000C710
                pop     edi
                mov     dword ptr [ebx+4], 0Eh
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_1000C80C:                           ; CODE XREF: AES__ExpandKey+321j
                pop     edi
                mov     dword ptr [ebx+4], 0
                pop     esi
                retn
AES__ExpandKey  endp
ChttpSession__init proc near            ; DATA XREF: .rdata:10060364o
                push    esi
                mov     esi, ecx
                cmp     dword ptr [esi+4], 0
                jz      short loc_1001101F

loc_10011019:                           ; CODE XREF: ChttpSession__init+1Aj
                xor     eax, eax
                pop     esi
                retn    4
; ---------------------------------------------------------------------------

loc_1001101F:                           ; CODE XREF: ChttpSession__init+7j
                call    ds:curl_easy_init
                test    eax, eax
                mov     [esi+4], eax
                jz      short loc_10011019
                push    edi
                mov     edi, ds:curl_easy_setopt
                lea     ecx, [esi+8]
                push    ecx
                push    271Ah
                push    eax
                call    edi ; curl_easy_setopt
                mov     edx, [esi+4]
                push    offset curl_write
                push    4E2Bh
                push    edx
                call    edi ; curl_easy_setopt
                mov     eax, [esi+4]
                push    esi
                push    2711h
                push    eax
                call    edi ; curl_easy_setopt
                mov     ecx, [esi+4]
                push    0
                push    40h
                push    ecx
                call    edi ; curl_easy_setopt
                mov     edx, [esi+4]
                push    0
                push    51h
                push    edx
                call    edi ; curl_easy_setopt
                add     esp, 3Ch
                pop     edi
                mov     eax, 1
                pop     esi
                retn    4
ChttpSession__init endp

CHttpSession__Uninit proc near          ; DATA XREF: .rdata:10060368o
                push    esi
                mov     esi, ecx
                mov     eax, [esi+4]
                test    eax, eax
                jnz     short loc_1001108C
                pop     esi
                retn
; ---------------------------------------------------------------------------

loc_1001108C:                           ; CODE XREF: CHttpSession__Uninit+8j
                push    eax
                call    ds:curl_easy_cleanup
                add     esp, 4
                mov     dword ptr [esi+4], 0
                mov     eax, 1
                pop     esi
                retn
CHttpSession__Uninit endp
CHttpSession__SetServerUrl proc near    ; DATA XREF: __IsNonwritableInCurrentImage+5?
                                        ; .rdata:1006036Co

arg_0           = dword ptr  4

                mov     eax, [ecx+4]
                test    eax, eax
                jnz     short loc_100110BA
                retn    4
; ---------------------------------------------------------------------------

loc_100110BA:                           ; CODE XREF: CHttpSession__SetServerUrl+5j
                mov     ecx, [esp+arg_0]
                push    ecx
                push    2712h
                push    eax
                call    ds:curl_easy_setopt
                add     esp, 0Ch
                neg     eax
                sbb     eax, eax
                add     eax, 1
                retn    4
CHttpSession__SetServerUrl endp

CHttpSession__SetPOSTData proc near     ; DATA XREF: .rdata:10060370o

arg_0           = dword ptr  4

                mov     eax, [ecx+4]
                test    eax, eax
                jnz     short loc_1001112A
                retn    4
; ---------------------------------------------------------------------------

loc_1001112A:                           ; CODE XREF: CHttpSession__SetPOSTData+5j
                mov     ecx, [esp+arg_0]
                push    ecx
                push    271Fh
                push    eax
                call    ds:curl_easy_setopt
                add     esp, 0Ch
                mov     eax, 1
                retn    4
CHttpSession__SetPOSTData endp
CHttpSession__SetPOSTData_ proc near    ; DATA XREF: .rdata:10060374o

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                push    esi
                mov     esi, ecx
                mov     eax, [esi+4]
                test    eax, eax
                jnz     short loc_100110EE
                pop     esi
                retn    8
; ---------------------------------------------------------------------------

loc_100110EE:                           ; CODE XREF: CHttpSession__SetPOSTData_+8j
                mov     ecx, [esp+4+arg_0]
                push    edi
                mov     edi, ds:curl_easy_setopt
                push    ecx
                push    271Fh
                push    eax
                call    edi ; curl_easy_setopt
                mov     edx, [esp+14h+arg_4]
                mov     eax, [esi+4]
                push    edx
                push    3Ch
                push    eax
                call    edi ; curl_easy_setopt
                add     esp, 18h
                pop     edi
                mov     eax, 1
                pop     esi
                retn    8
CHttpSession__SetPOSTData_ endp
CHttpSession__CommitRequest proc near   ; DATA XREF: _has_osfxsr_set+2?
                                        ; .rdata:10060378o

var_4           = dword ptr -4

                push    ecx
                push    edi
                mov     edi, ecx
                cmp     dword ptr [edi+4], 0
                jz      short loc_100111BC
                push    esi
                lea     esi, [edi+108h]
                call    sub_10012670
                mov     eax, [edi+4]
                push    eax
                call    ds:curl_easy_perform
                add     esp, 4
                test    eax, eax
                pop     esi
                jnz     short loc_100111BC
                mov     edx, [edi+4]
                lea     ecx, [esp+8+var_4]
                push    ecx
                push    200002h
                push    edx
                mov     [esp+14h+var_4], eax
                call    ds:curl_easy_getinfo
                add     esp, 0Ch
                test    eax, eax
                mov     eax, [esp+8+var_4]
                jnz     short loc_100111AA
                cmp     eax, 0C8h
                jnz     short loc_100111AA
                mov     eax, 1
                pop     edi
                pop     ecx
                retn
; ---------------------------------------------------------------------------

loc_100111AA:                           ; CODE XREF: CHttpSession__CommitRequest+49j
                                        ; CHttpSession__CommitRequest+50j
                push    eax
                push    offset aD       ; "%d"
                add     edi, 8
                push    edi             ; char *
                call    crt_sprintf
                add     esp, 0Ch

loc_100111BC:                           ; CODE XREF: CHttpSession__CommitRequest+8j
                                        ; CHttpSession__CommitRequest+26j
                xor     eax, eax
                pop     edi
                pop     ecx
                retn
CHttpSession__CommitRequest endp

CHttpSession__GetResponseData proc near ; DATA XREF: .rdata:1006037Co

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                cmp     dword ptr [ecx+4], 0
                push    ebx
                jz      short loc_1001121C
                mov     ebx, [esp+4+arg_4]
                test    ebx, ebx
                jz      short loc_1001121C
                mov     eax, [ebx]
                test    eax, eax
                push    esi
                mov     esi, [ecx+114h]
                jz      short loc_10011213
                cmp     eax, esi
                jb      short loc_10011213
                mov     edx, [esp+8+arg_0]
                test    edx, edx
                jz      short loc_10011215
                push    edi
                lea     edi, [ecx+108h]
                mov     ecx, edx
                call    sub_100127B0
                pop     edi
                mov     [ebx], esi
                pop     esi
                mov     eax, 1
                pop     ebx
                retn    8
; ---------------------------------------------------------------------------

loc_10011213:                           ; CODE XREF: CHttpSession__GetResponseData+1Aj
                                        ; CHttpSession__GetResponseData+1Ej
                mov     [ebx], esi

loc_10011215:                           ; CODE XREF: CHttpSession__GetResponseData+26j
                pop     esi
                xor     eax, eax
                pop     ebx
                retn    8
; ---------------------------------------------------------------------------

loc_1001121C:                           ; CODE XREF: CHttpSession__GetResponseData+5j
                                        ; CHttpSession__GetResponseData+Dj
                xor     eax, eax
                pop     ebx
                retn    8
CHttpSession__GetResponseData endp

CHttpSession__GetErrMsg proc near       ; DATA XREF: .rdata:10060380o

arg_0           = dword ptr  4
arg_4           = dword ptr  8

                cmp     dword ptr [ecx+4], 0
                push    edi
                jz      short loc_1001128B
                mov     edi, [esp+4+arg_4]
                test    edi, edi
                jz      short loc_1001128B
                push    ebx
                lea     ebx, [ecx+8]
                mov     eax, ebx
                lea     edx, [eax+1]

loc_10011248:                           ; CODE XREF: CHttpSession__GetErrMsg+1Fj
                mov     cl, [eax]
                add     eax, 1
                test    cl, cl
                jnz     short loc_10011248
                sub     eax, edx
                push    esi
                lea     esi, [eax+1]
                mov     eax, [edi]
                test    eax, eax
                jz      short loc_10011281
                cmp     eax, esi
                jb      short loc_10011281
                mov     ecx, [esp+0Ch+arg_0]
                test    ecx, ecx
                jz      short loc_10011283
                push    eax             ; size_t
                push    ebx             ; char *
                push    ecx             ; char *
                call    crt_strncpy
                add     esp, 0Ch
                mov     [edi], esi
                pop     esi
                pop     ebx
                mov     eax, 1
                pop     edi
                retn    8
; ---------------------------------------------------------------------------

loc_10011281:                           ; CODE XREF: CHttpSession__GetErrMsg+2Bj
                                        ; CHttpSession__GetErrMsg+2Fj
                mov     [edi], esi

loc_10011283:                           ; CODE XREF: CHttpSession__GetErrMsg+37j
                pop     esi
                pop     ebx
                xor     eax, eax
                pop     edi
                retn    8
; ---------------------------------------------------------------------------

loc_1001128B:                           ; CODE XREF: CHttpSession__GetErrMsg+5j
                                        ; CHttpSession__GetErrMsg+Dj
                xor     eax, eax
                pop     edi
                retn    8
CHttpSession__GetErrMsg endp
; int __fastcall CHttpSession__Release(void *)
CHttpSession__Release proc near         ; DATA XREF: .rdata:const CHttpSession::`vftable'o
                push    esi
                push    edi
                mov     edi, ecx
                cmp     dword ptr [edi+4], 0
                jz      short loc_10010FE1
                mov     eax, [edi]
                mov     edx, [eax+8]
                call    edx

loc_10010FE1:                           ; CODE XREF: CHttpSession__Release+8j
                lea     esi, [edi+108h]
                mov     dword ptr [edi], offset ??_7CHttpSession@@6B@ ; const CHttpSession::`vftable'
                call    sub_10012670
                call    sub_10012850
                push    edi             ; void *
                call    j__free
                add     esp, 4
                pop     edi
                pop     esi
                retn
CHttpSession__Release endp

; int __cdecl curl_write(int data, int size_1, int nmemb, int content)
curl_write      proc near               ; DATA XREF: ChttpSession__init+32o

data            = dword ptr  4
size_1          = dword ptr  8
nmemb           = dword ptr  0Ch
content         = dword ptr  10h

                push    esi
                mov     esi, [esp+4+size_1]
                imul    esi, [esp+4+nmemb]
                test    esi, esi
                jz      short loc_100112C5
                mov     eax, [esp+4+data]
                push    ebx
                mov     ebx, [esp+8+content]
                push    esi
                push    eax
                add     ebx, 108h
                call    sub_100126F0
                pop     ebx

loc_100112C5:                           ; CODE XREF: curl_write+Cj
                mov     eax, esi
                pop     esi
                retn
curl_write      endp



 sub_10022690      proc near 
int 3;------if call here ,please copy real code!
sub_10022690        endp 
 sub_100168A0      proc near 
int 3;------if call here ,please copy real code!
sub_100168A0        endp 
 
sub_1004AABF      proc near 
int 3;------if call here ,please copy real code!
sub_1004AABF        endp 
 sub_10037F81      proc near 
int 3;------if call here ,please copy real code!
sub_10037F81        endp 
 sub_1004AAFE      proc near 
int 3;------if call here ,please copy real code!
sub_1004AAFE        endp 
 sub_10004440      proc near 
int 3;------if call here ,please copy real code!
sub_10004440        endp 
 sub_10002650      proc near 
int 3;------if call here ,please copy real code!
sub_10002650        endp 
 sub_10002610      proc near 
int 3;------if call here ,please copy real code!
sub_10002610        endp 
 


 sub_10017A60      proc near 
int 3;------if call here ,please copy real code!
sub_10017A60        endp 
 sub_100179F0      proc near 
int 3;------if call here ,please copy real code!
sub_100179F0        endp 
 
sub_1004BEEF    proc near
int 3;
sub_1004BEEF    endp
sub_1004BE9A    proc near
int 3;
sub_1004BE9A    endp
sub_1004BE90    proc near
int 3;
sub_1004BE90    endp

sub_100042E0    proc near
int 3;
sub_100042E0    endp

sub_100026A0    proc near
int 3;
sub_100026A0    endp
unknown_libname_1    proc near
int 3;
unknown_libname_1    endp


_memcpy_s    proc near
int 3;
_memcpy_s    endp

_memmove_s    proc near
int 3;
_memmove_s    endp

??0exception@std@@QAE@ABV01@@Z    proc near
int 3;
??0exception@std@@QAE@ABV01@@Z    endp

__invalid_parameter_noinfo    proc near
int 3;
__invalid_parameter_noinfo    endp

sub_1001FD30      proc near 
int 3;------if call here ,please copy real code!
sub_1001FD30        endp 
 sub_10016FA0      proc near 
int 3;------if call here ,please copy real code!
sub_10016FA0        endp 
 sub_100173F0      proc near 
int 3;------if call here ,please copy real code!
sub_100173F0        endp 
 


loc_100076F0:
int 3;

loc_10007710:
int 3;
loc_1004BF18:
int 3;
 sub_100187A0      proc near 
int 3;------if call here ,please copy real code!
sub_100187A0        endp 
 sub_100279F0      proc near 
int 3;------if call here ,please copy real code!
sub_100279F0        endp 

sub_10018280      proc near 
int 3;------if call here ,please copy real code!
sub_10018280        endp 
 sub_1001EB90      proc near 
int 3;------if call here ,please copy real code!
sub_1001EB90        endp 
 sub_1001EB10      proc near 
int 3;------if call here ,please copy real code!
sub_1001EB10        endp 
 sub_1001EF10      proc near 
int 3;------if call here ,please copy real code!
sub_1001EF10        endp 
 sub_1001EEC0      proc near 
int 3;------if call here ,please copy real code!
sub_1001EEC0        endp 
 sub_1001EBC0      proc near 
int 3;------if call here ,please copy real code!
sub_1001EBC0        endp 
 sub_1001EAA0      proc near 
int 3;------if call here ,please copy real code!
sub_1001EAA0        endp 
 sub_1001EAC0      proc near 
int 3;------if call here ,please copy real code!
sub_1001EAC0        endp 
 ??3@YAXPAX@Z_0      proc near 
int 3;------if call here ,please copy real code!
                                        ; sub_100183B0+53p
??3@YAXPAX@Z_0        endp 

__purecall      proc near 
int 3;------if call here ,please copy real code!
__purecall        endp 




MAC___MAC      proc near 
int 3;------if call here ,please copy real code!
MAC___MAC        endp 
CMAC__getTag      proc near 
int 3;------if call here ,please copy real code!
CMAC__getTag        endp 

sub_1003E334      proc near 
int 3;------if call here ,please copy real code!
sub_1003E334        endp 

; int __cdecl operator delete(size_t)
??3@YAXPAX@Z    proc near               
                                        ; DATA XREF: ...

arg_0           = dword ptr  4

                mov     eax, [esp+arg_0]
                push    eax             ; size_t
                call    crt_malloc
                add     esp, 4
                retn
??3@YAXPAX@Z    endp

; ---------------------------------------------------------------------------
                align 10h
 
f_check_gs_failure proc near            ; CODE XREF: f_decrypt+7FAp
                                        ; cf_decrypt+CAp ...
                cmp     ecx, gs_cookie_magic1
                jnz     short loc_10037F21
                retn
;                rep retn
; ---------------------------------------------------------------------------

loc_10037F21:                           ; CODE XREF: f_check_gs_failure+6j
int 3;
;                jmp     ___report_gsfailure

f_check_gs_failure endp



___CxxFrameHandler3      proc near 
int 3;------if call here ,please copy real code!
___CxxFrameHandler3        endp 

 __CxxThrowException@8      proc near 
int 3;------if call here ,please copy real code!
 __CxxThrowException@8        endp 




;-----极小的调用可能性
sub_1004BE20      proc near 
int 3;------if call here ,please copy real code!
sub_1004BE20        endp 

sub_1004BE50      proc near 
int 3;------if call here ,please copy real code!
sub_1004BE50        endp 

sub_1004BE5B      proc near 
int 3;------if call here ,please copy real code!
sub_1004BE5B        endp 

end;-------------------------------------------------------------------------------------------------------------end of file